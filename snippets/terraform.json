{
  "alicloud-data-dns_domain_groups": {
    "description": "Defines alicloud_dns_groups data source",
    "prefix": "tf-alicloud-data-alicloud_dns_groups",
    "body": [
      "data \"alicloud_dns_groups\" \"group\" {",
      "  name_regex = \"^y[A-Za-z]+\"",
      "  output_file = \"groups.txt\"",
      "}",
      ""
    ]
  },
  "alicloud-data-dns_domain_records": {
    "description": "Defines dns_domain_records",
    "prefix": "tf-alicloud-data-dns_domain_records",
    "body": [
      "data \"alicloud_dns_records\" \"record\" {",
      "  domain_name = \"xiaozhu.top\"",
      "  is_locked = false",
      "  type = \"A\"",
      "  host_record_regex = \"^@\"",
      "  output_file = \"records.txt\"",
      "}",
      ""
    ]
  },
  "alicloud-data-dns_domains": {
    "description": "Defines dns_domains",
    "prefix": "tf-alicloud-data-dns_domains",
    "body": [
      "data \"alicloud_dns_domains\" \"domain\" {",
      "  domain_name_regex = \"^hegu\"",
      "  output_file = \"domains.txt\"",
      "}",
      ""
    ]
  },
  "alicloud-data-dns_groups": {
    "description": "Defines dns_groups",
    "prefix": "tf-alicloud-data-dns_groups",
    "body": [
      "data \"alicloud_dns_groups\" \"group\" {",
      "  name_regex = \"^y[A-Za-z]+\"",
      "  output_file = \"groups.txt\"",
      "}",
      ""
    ]
  },
  "alicloud-data-dns_records": {
    "description": "Defines dns_records",
    "prefix": "tf-alicloud-data-dns_records",
    "body": [
      "data \"alicloud_dns_records\" \"record\" {",
      "  domain_name = \"xiaozhu.top\"",
      "  is_locked = false",
      "  type = \"A\"",
      "  host_record_regex = \"^@\"",
      "  output_file = \"records.txt\"",
      "}",
      ""
    ]
  },
  "alicloud-data-eips": {
    "description": "Defines eips",
    "prefix": "tf-alicloud-data-eips",
    "body": [
      "data \"alicloud_eips\" \"eips\"{",
      "    cidr_block=\"172.16.0.0/12\"",
      "    name_regex=\"^foo\"",
      "}",
      "",
      "resource \"alicloud_instance\" \"foo\" {",
      "    ...",
      "    instance_name =  \"in-the-eip\"",
      "    vswitch_id = \"vsw-abc123456\"",
      "    ...",
      "}",
      "",
      "resource \"alicloud_eip_association\" \"asso\" {",
      "    instance_id = \"${alicloud_instance.foo.id}\"",
      "    allocation_id = \"${data.alicloud_eips.eips.eips.0.id}\"",
      "}",
      ""
    ]
  },
  "alicloud-data-images": {
    "description": "Defines images",
    "prefix": "tf-alicloud-data-images",
    "body": [
      "data \"alicloud_images\" \"multi_image\" {",
      "\towners = \"system\"",
      "\tname_regex = \"^centos_6\"",
      "}",
      ""
    ]
  },
  "alicloud-data-instance_types": {
    "description": "Defines instance_types",
    "prefix": "tf-alicloud-data-instance_types",
    "body": [
      "# Declare the data source",
      "data \"alicloud_instance_types\" \"1c2g\" {",
      "  cpu_core_count = 1",
      "  memory_size = 2",
      "}",
      "",
      "# Create ecs instance with the first matched instance_type",
      "",
      "resource \"alicloud_instance\" \"instance\" {",
      "  instance_type = \"${data.alicloud_instance_types.1c2g.instance_types.0.id}\"",
      "",
      "  # Other properties...",
      "}",
      ""
    ]
  },
  "alicloud-data-instances": {
    "description": "Defines instances",
    "prefix": "tf-alicloud-data-instances",
    "body": [
      "data \"alicloud_instances\" \"instances\" {",
      "\tname_regex = \"web_server\"",
      "\tstatus = \"Running\"",
      "}",
      ""
    ]
  },
  "alicloud-data-key_pairs": {
    "description": "Defines key_pairs",
    "prefix": "tf-alicloud-data-key_pairs",
    "body": [
      "# Declare the data source",
      "data \"alicloud_key_pairs\" \"name_regex\" {",
      "\tname_regex = \"test\"",
      "\toutput_file = \"my_key_pairs.json\"",
      "}",
      "",
      "# Bind a key pair for several ecs instances using the first matched key pair",
      "",
      "resource \"alicloud_key_pair_attachment\" \"attachment\" {",
      "  key_name = \"${data.alicloud_key_pairs.default.key_pairs.0.id}\"",
      "  instance_ids = [...]",
      "}",
      ""
    ]
  },
  "alicloud-data-kms_keys": {
    "description": "Defines kms_keys",
    "prefix": "tf-alicloud-data-kms_keys",
    "body": [
      "# Declare the data source",
      "data \"alicloud_kms_keys\" \"keys\" {",
      "\tdescription_regex = \"Hello KMS\"",
      "\toutput_file = \"kms_keys.json\"",
      "}",
      ""
    ]
  },
  "alicloud-data-ram_account_aliases": {
    "description": "Defines ram_account_aliases",
    "prefix": "tf-alicloud-data-ram_account_aliases",
    "body": [
      "data \"alicloud_ram_account_aliases\" \"alias\" {",
      "  output_file = \"alias.txt\"",
      "}",
      ""
    ]
  },
  "alicloud-data-ram_alias": {
    "description": "Defines ram_alias data source",
    "prefix": "tf-alicloud-data-ram_alias",
    "body": [
      "resource \"alicloud_ram_account_alias\" \"alias\" {",
      "  account_alias = \"hallo\"",
      "}",
      ""
    ]
  },
  "alicloud-data-ram_groups": {
    "description": "Defines ram_groups",
    "prefix": "tf-alicloud-data-ram_groups",
    "body": [
      "data \"alicloud_ram_groups\" \"group\" {",
      "  output_file = \"groups.txt\"",
      "  user_name = \"user1\"",
      "  name_regex = \"^group[0-9]*\"",
      "}",
      ""
    ]
  },
  "alicloud-data-ram_policies": {
    "description": "Defines ram_policies",
    "prefix": "tf-alicloud-data-ram_policies",
    "body": [
      "data \"alicloud_ram_policies\" \"policy\" {",
      "  output_file = \"policies.txt\"",
      "  user_name = \"user1\"",
      "  group_name = \"group1\"",
      "  type = \"System\"",
      "}",
      ""
    ]
  },
  "alicloud-data-ram_roles": {
    "description": "Defines ram_roles",
    "prefix": "tf-alicloud-data-ram_roles",
    "body": [
      "data \"alicloud_ram_roles\" \"role\" {",
      "  output_file = \"roles.txt\"",
      "  name_regex = \".*test.*\"",
      "  policy_name = \"AliyunACSDefaultAccess\"",
      "  policy_type = \"Custom\"",
      "}",
      ""
    ]
  },
  "alicloud-data-ram_users": {
    "description": "Defines ram_users",
    "prefix": "tf-alicloud-data-ram_users",
    "body": [
      "data \"alicloud_ram_users\" \"user\" {",
      "  output_file = \"users.txt\"",
      "  group_name = \"group1\"",
      "  policy_name = \"AliyunACSDefaultAccess\"",
      "  policy_type = \"Custom\"",
      "  name_regex = \"^user\"",
      "}",
      ""
    ]
  },
  "alicloud-data-regions": {
    "description": "Defines regions",
    "prefix": "tf-alicloud-data-regions",
    "body": [
      "data \"alicloud_regions\" \"current\" {",
      "\tcurrent = true",
      "}",
      ""
    ]
  },
  "alicloud-data-security_group_rules": {
    "description": "Defines security_group_rules",
    "prefix": "tf-alicloud-data-security_group_rules",
    "body": [
      "# accept a security group id as a variable",
      "",
      "variable \"security_group_id\" {}",
      "",
      "# or filter using data source",
      "# note the filter must select only one specific group",
      "",
      "data \"alicloud_security_groups\" \"api\" {",
      "  name_regex = \"api\"",
      "}",
      "",
      "# filter the rule",
      "",
      "data \"alicloud_security_group_rules\" \"ingress\" {",
      "  id          = \"${alicloud_security_groups.api.0.id}\"",
      "                # or ${var.security_group_id}",
      "  nic_type    = \"internet\"",
      "  direction   = \"ingress\"",
      "  ip_protocol = \"TCP\"",
      "}",
      "",
      "# pass port_range to the backend service",
      "",
      "resource \"alicloud_instance\" \"backend\" {",
      "  ...",
      "  user_data = \"config_service.sh --portrange=${data.alicloud_security_group_rules.ingress.0.port_range}\"",
      "}"
    ]
  },
  "alicloud-data-security_groups": {
    "description": "Defines security_groups",
    "prefix": "tf-alicloud-data-security_groups",
    "body": [
      "# Filter security groups and output to a file",
      "",
      "data \"alicloud_security_groups\" \"web\" {",
      "  name_regex  = \"^web-\"",
      "  output_file = \"web_access.json\"",
      "}",
      "",
      "# in conjunction with vpc",
      "",
      "resource \"alicloud_vpc\" \"primary\" {",
      "  ...",
      "}",
      "",
      "data \"alicloud_security_groups\" \"primary_groups\" {",
      "  vpc_id = \"${alicloud_vpc.primary.id}\"",
      "}"
    ]
  },
  "alicloud-data-vpcs": {
    "description": "Defines vpcs",
    "prefix": "tf-alicloud-data-vpcs",
    "body": [
      "data \"alicloud_vpcs\" \"multi_vpc\"{",
      "\tcidr_block=\"172.16.0.0/12\"",
      "\tstatus=\"Available\"",
      "\tname_regex=\"^foo\"",
      "}",
      ""
    ]
  },
  "alicloud-data-vswitches": {
    "description": "Defines vswitches",
    "prefix": "tf-alicloud-data-vswitches",
    "body": [
      "data \"alicloud_vswitches\" \"subnets\"{",
      "    cidr_block=\"172.16.0.0/12\"",
      "    name_regex=\"^foo\"",
      "}",
      "",
      "resource \"alicloud_instance\" \"foo\" {",
      "    ...",
      "    instance_name =  \"in-the-vpc\"",
      "    vswitch_id = \"${data.alicloud_vswitches.subnets.vswitches.0.id}\"",
      "    ...",
      "}",
      ""
    ]
  },
  "alicloud-data-zones": {
    "description": "Defines zones",
    "prefix": "tf-alicloud-data-zones",
    "body": [
      "# Declare the data source",
      "data \"alicloud_zones\" \"default\" {",
      "\t\"available_instance_type\"= \"ecs.n4.large\"",
      "\t\"available_disk_category\"= \"cloud_ssd\"",
      "}",
      "",
      "# Create ecs instance with the first matched zone",
      "",
      "resource \"alicloud_instance\" \"instance\" {",
      "  availability_zone = \"${data.alicloud_zones.default.zones.0.id}\"",
      "",
      "  # Other properties...",
      "}",
      ""
    ]
  },
  "alicloud-resource-cdn_domain": {
    "description": "Defines cdn_domain",
    "prefix": "tf-alicloud-resource-cdn_domain",
    "body": [
      "# Add a CDN Accelerated Domain with configs.",
      "resource \"alicloud_cdn_domain\" \"domain\" {",
      "  domain_name = \"${your_cdn_domain_name}\"",
      "  cdn_type = \"web\"",
      "  source_type = \"domain\"",
      "  sources = [\"${your_cdn_domain_source1}\", \"${your_cdn_domain_source2}\"]",
      "  ",
      "  // configs",
      "  optimize_enable = \"off\"",
      "  page_compress_enable = \"off\"",
      "  range_enable = \"off\"",
      "  video_seek_enable = \"off\"",
      "  block_ips = [\"1.2.3.4\", \"111.222.111.111\"]",
      "  parameter_filter_config = [",
      "    {",
      "      enable = \"on\"",
      "      hash_key_args = [\"hello\", \"youyouyou\"]",
      "    }]",
      "  page_404_config = [",
      "    {",
      "      page_type = \"other\"",
      "      custom_page_url = \"http://${your_cdn_domain_name}/notfound/\"",
      "    }]",
      "  refer_config = [",
      "    {",
      "      refer_type = \"block\"",
      "      refer_list = [\"www.xxxx.com\", \"www.xxxx.cn\"]",
      "      allow_empty = \"off\"",
      "    }]",
      "  auth_config = [",
      "    {",
      "      auth_type = \"type_a\"",
      "      master_key = \"helloworld1\"",
      "      slave_key = \"helloworld2\"",
      "    }]",
      "  http_header_config = [",
      "    {",
      "      header_key = \"Content-Type\",",
      "      header_value = \"text/plain\"",
      "    },",
      "    {",
      "      header_key = \"Access-Control-Allow-Origin\",",
      "      header_value = \"*\"",
      "    }]",
      "  cache_config = [",
      "    {",
      "      cache_content = \"/hello/world\",",
      "      ttl = 1000",
      "      cache_type = \"path\"",
      "    },",
      "    {",
      "      cache_content = \"/hello/world/youyou\",",
      "      ttl = 1000",
      "      cache_type = \"path\"",
      "    },",
      "    {",
      "      cache_content = \"txt,jpg,png\",",
      "      ttl = 2000",
      "      cache_type = \"suffix\"",
      "    }]",
      "}"
    ]
  },
  "alicloud-resource-cms_alarm": {
    "description": "Defines cms_alarm",
    "prefix": "tf-alicloud-resource-cms_alarm",
    "body": [
      "resource \"alicloud_cms_alarm\" \"basic\" {",
      "  name = \"tf-testAccCmsAlarm_basic\"",
      "  project = \"acs_ecs_dashboard\"",
      "  metric = \"disk_writebytes\"",
      "  dimensions = {",
      "    instanceId = \"i-bp1247,i-bp11gd\"",
      "    device = \"/dev/vda1,/dev/vdb1\"",
      "  }",
      "  statistics =\"Average\"",
      "  period = 900",
      "  operator = \"<=\"",
      "  threshold = 35",
      "  triggered_count = 2",
      "  contact_groups = [\"test-group\"]",
      "  end_time = 20",
      "  start_time = 6",
      "  notify_type = 1",
      "}"
    ]
  },
  "alicloud-resource-container_cluster": {
    "description": "Defines container_cluster",
    "prefix": "tf-alicloud-resource-container_cluster",
    "body": [
      "resource \"alicloud_cs_swarm\" \"my_cluster\" {",
      "  password = \"Test12345\"",
      "  instance_type = \"ecs.n4.small\"",
      "  name = \"ClusterFromAlicloud\"",
      "  node_number = 2",
      "  disk_category = \"cloud_efficiency\"",
      "  disk_size = 20",
      "  cidr_block = \"172.18.0.0/24\"",
      "  image_id = \"${var.image_id}\"",
      "  vswitch_id = \"${var.vswitch_id}\"",
      "}",
      ""
    ]
  },
  "alicloud-resource-cs_application": {
    "description": "Defines cs_application",
    "prefix": "tf-alicloud-resource-cs_application",
    "body": [
      "resource \"alicloud_cs_application\" \"app\" {",
      "  cluster_name = \"my-first-swarm\"",
      "  name = \"wordpress\"",
      "  version = \"1.2\"",
      "  template = \"${file(\"wordpress.yml\")}\"",
      "  latest_image = true",
      "  environment = {",
      "    EXTERNAL_URL = \"123.123.123.123:8080\"",
      "  }",
      "}"
    ]
  },
  "alicloud-resource-cs_kubernetes": {
    "description": "Defines cs_kubernetes",
    "prefix": "tf-alicloud-resource-cs_kubernetes",
    "body": [
      "data \"alicloud_zones\" \"default\" {",
      "  \"available_resource_creation\"= \"VSwitch\"",
      "}",
      "",
      "resource \"alicloud_cs_kubernetes\" \"main\" {",
      "  name_prefix = \"my-first-k8s\"",
      "  availability_zone = \"${data.alicloud_zones.default.zones.0.id}\"",
      "  new_nat_gateway = true",
      "  master_instance_type = \"ecs.n4.small\"",
      "  worker_instance_type = \"ecs.n4.small\"",
      "  worker_number = 3",
      "  password = \"Test12345\"",
      "  pod_cidr = \"192.168.1.0/24\"",
      "  service_cidr = \"192.168.2.0/24\"",
      "  enable_ssh = true",
      "  install_cloud_monitor = true",
      "}"
    ]
  },
  "alicloud-resource-cs_swarm": {
    "description": "Defines cs_swarm",
    "prefix": "tf-alicloud-resource-cs_swarm",
    "body": [
      "resource \"alicloud_cs_swarm\" \"my_cluster\" {",
      "  password = \"Test12345\"",
      "  instance_type = \"ecs.n4.small\"",
      "  name = \"ClusterFromAlicloud\"",
      "  node_number = 2",
      "  disk_category = \"cloud_efficiency\"",
      "  disk_size = 20",
      "  cidr_block = \"172.18.0.0/24\"",
      "  image_id = \"${var.image_id}\"",
      "  vswitch_id = \"${var.vswitch_id}\"",
      "}"
    ]
  },
  "alicloud-resource-db_account": {
    "description": "Defines db_account",
    "prefix": "tf-alicloud-resource-db_account",
    "body": [
      "resource \"alicloud_db_account\" \"default\" {",
      "\tinstance_id = \"rm-2eps...\"",
      "\tname = \"tf_account\"",
      "\tpassword = \"...\"",
      "}"
    ]
  },
  "alicloud-resource-db_account_privilege": {
    "description": "Defines db_account_privilege",
    "prefix": "tf-alicloud-resource-db_account_privilege",
    "body": [
      "resource \"alicloud_db_database\" \"default\" {",
      "    count = 2",
      "\tinstance_id = \"rm-2eps...\"",
      "\tname = \"tf_database\"",
      "\tcharacter_set = \"utf8\"",
      "}",
      "",
      "resource \"alicloud_db_account_privilege\" \"default\" {",
      "\tinstance_id = \"rm-2eps...\"",
      "\taccount_name = \"tf_account\"",
      "\tprivilege = \"ReadOnly\"",
      "\tdb_names = [\"${alicloud_db_database.base.*.name}\"]",
      "}"
    ]
  },
  "alicloud-resource-db_backup_policy": {
    "description": "Defines db_backup_policy",
    "prefix": "tf-alicloud-resource-db_backup_policy",
    "body": [
      "resource \"alicloud_db_backup_policy\" \"default\" {",
      "\tinstance_id = \"rm-2eps...\"",
      "\tbackup_period = [\"Monday\", \"Wednesday\"]",
      "\tbackup_time = \"02:00Z-03:00Z\"",
      "\tretention_period = 7",
      "\tlog_backup = true",
      "}"
    ]
  },
  "alicloud-resource-db_connection": {
    "description": "Defines db_connection",
    "prefix": "tf-alicloud-resource-db_connection",
    "body": [
      "resource \"alicloud_db_connection\" \"default\" {",
      "\tinstance_id = \"rm-2eps...\"",
      "\tconnection_prefix = \"alicloud\"",
      "\tport = \"3306\"",
      "}"
    ]
  },
  "alicloud-resource-db_database": {
    "description": "Defines db_database",
    "prefix": "tf-alicloud-resource-db_database",
    "body": [
      "resource \"alicloud_db_database\" \"default\" {",
      "\tinstance_id = \"rm-2eps...\"",
      "\tname = \"tf_database\"",
      "\tcharacter_set = \"utf8\"",
      "}"
    ]
  },
  "alicloud-resource-db_instance": {
    "description": "Defines db_instance",
    "prefix": "tf-alicloud-resource-db_instance",
    "body": [
      "resource \"alicloud_db_instance\" \"default\" {",
      "\tengine = \"MySQL\"",
      "\tengine_version = \"5.6\"",
      "\tdb_instance_class = \"rds.mysql.t1.small\"",
      "\tdb_instance_storage = \"10\"",
      "}"
    ]
  },
  "alicloud-resource-disk": {
    "description": "Defines disk",
    "prefix": "tf-alicloud-resource-disk",
    "body": [
      "# Create a new ECS disk.",
      "resource \"alicloud_disk\" \"ecs_disk\" {",
      "  # cn-beijing",
      "  availability_zone = \"cn-beijing-b\"",
      "  name              = \"New-disk\"",
      "  description       = \"Hello ecs disk.\"",
      "  category          = \"cloud_efficiency\"",
      "  size              = \"30\"",
      "",
      "  tags {",
      "    Name = \"TerraformTest\"",
      "  }",
      "}"
    ]
  },
  "alicloud-resource-disk_attachment": {
    "description": "Defines disk_attachment",
    "prefix": "tf-alicloud-resource-disk_attachment",
    "body": [
      "# Create a new ECS disk-attachment and use it attach one disk to a new instance.",
      "",
      "resource \"alicloud_security_group\" \"ecs_sg\" {",
      "  name        = \"terraform-test-group\"",
      "  description = \"New security group\"",
      "}",
      "",
      "resource \"alicloud_disk\" \"ecs_disk\" {",
      "  availability_zone = \"cn-beijing-a\"",
      "  size              = \"50\"",
      "",
      "  tags {",
      "    Name = \"TerraformTest-disk\"",
      "  }",
      "}",
      "",
      "resource \"alicloud_instance\" \"ecs_instance\" {",
      "  image_id              = \"ubuntu_140405_64_40G_cloudinit_20161115.vhd\"",
      "  instance_type         = \"ecs.n4.small\"",
      "  availability_zone     = \"cn-beijing-a\"",
      "  security_groups       = [\"${alicloud_security_group.ecs_sg.id}\"]",
      "  instance_name         = \"Hello\"",
      "  instance_network_type = \"classic\"",
      "  internet_charge_type  = \"PayByBandwidth\"",
      "",
      "  tags {",
      "    Name = \"TerraformTest-instance\"",
      "  }",
      "}",
      "",
      "resource \"alicloud_disk_attachment\" \"ecs_disk_att\" {",
      "  disk_id     = \"${alicloud_disk.ecs_disk.id}\"",
      "  instance_id = \"${alicloud_instance.ecs_instance.id}\"",
      "}"
    ]
  },
  "alicloud-resource-dns": {
    "description": "Defines dns",
    "prefix": "tf-alicloud-resource-dns",
    "body": [
      "# Add a new Domain.",
      "resource \"alicloud_dns\" \"dns\" {",
      "  name = \"starmove.com\"                      ",
      "  group_id = \"85ab8713-4a30-4de4-9d20-155ff830f651\" ",
      "}"
    ]
  },
  "alicloud-resource-dns_group": {
    "description": "Defines dns_group",
    "prefix": "tf-alicloud-resource-dns_group",
    "body": [
      "# Add a new Domain group.",
      "resource \"alicloud_dns_group\" \"group\" {",
      "  name = \"testgroup\"",
      "}"
    ]
  },
  "alicloud-resource-dns_record": {
    "description": "Defines dns_record",
    "prefix": "tf-alicloud-resource-dns_record",
    "body": [
      "# Create a new Domain record",
      "resource \"alicloud_dns_record\" \"record\" {",
      "  name = \"domainname\"",
      "  host_record = \"@\"",
      "  type = \"A\"",
      "  value = \"192.168.99.99\"",
      "}"
    ]
  },
  "alicloud-resource-eip": {
    "description": "Defines eip",
    "prefix": "tf-alicloud-resource-eip",
    "body": [
      "# Create a new EIP.",
      "resource \"alicloud_eip\" \"example\" {",
      "  bandwidth            = \"10\"",
      "  internet_charge_type = \"PayByBandwidth\"",
      "}"
    ]
  },
  "alicloud-resource-eip_association": {
    "description": "Defines eip_association",
    "prefix": "tf-alicloud-resource-eip_association",
    "body": [
      "# Create a new EIP association and use it to associate a EIP form a instance.",
      "",
      "resource \"alicloud_vpc\" \"vpc\" {",
      "  cidr_block = \"10.1.0.0/21\"",
      "}",
      "",
      "resource \"alicloud_vswitch\" \"vsw\" {",
      "  vpc_id            = \"${alicloud_vpc.vpc.id}\"",
      "  cidr_block        = \"10.1.1.0/24\"",
      "  availability_zone = \"cn-beijing-a\"",
      "",
      "  depends_on = [",
      "    \"alicloud_vpc.vpc\",",
      "  ]",
      "}",
      "",
      "resource \"alicloud_instance\" \"ecs_instance\" {",
      "  image_id              = \"ubuntu_140405_64_40G_cloudinit_20161115.vhd\"",
      "  instance_type         = \"ecs.n4.small\"",
      "  availability_zone     = \"cn-beijing-a\"",
      "  security_groups       = [\"${alicloud_security_group.group.id}\"]",
      "  vswitch_id            = \"${alicloud_vswitch.vsw.id}\"",
      "  instance_name         = \"hello\"",
      "  instance_network_type = \"vpc\"",
      "",
      "  tags {",
      "    Name = \"TerraformTest-instance\"",
      "  }",
      "}",
      "",
      "resource \"alicloud_eip\" \"eip\" {}",
      "",
      "resource \"alicloud_eip_association\" \"eip_asso\" {",
      "  allocation_id = \"${alicloud_eip.eip.id}\"",
      "  instance_id   = \"${alicloud_instance.ecs_instance.id}\"",
      "}",
      "",
      "resource \"alicloud_security_group\" \"group\" {",
      "  name        = \"terraform-test-group\"",
      "  description = \"New security group\"",
      "  vpc_id      = \"${alicloud_vpc.vpc.id}\"",
      "}"
    ]
  },
  "alicloud-resource-ess_attachment": {
    "description": "Defines ess_attachment",
    "prefix": "tf-alicloud-resource-ess_attachment",
    "body": [
      "resource \"alicloud_instance\" \"instance\" {",
      "  # Other parameters...",
      "}",
      "resource \"alicloud_ess_scaling_group\" \"scaling\" {",
      "  min_size           = 0",
      "  max_size           = 2",
      "  removal_policies   = [\"OldestInstance\", \"NewestInstance\"]",
      "",
      "  # Other parameters...",
      "}",
      "",
      "resource \"alicloud_ess_scaling_configuration\" \"config\" {",
      "  scaling_group_id  = \"${alicloud_ess_scaling_group.scaling.id}\"",
      "  image_id          = \"ubuntu_140405_64_40G_cloudinit_20161115.vhd\"",
      "  instance_type     = \"ecs.n4.large\"",
      "  security_group_id = \"${alicloud_security_group.classic.id}\"",
      "  active = true",
      "  enable = true",
      "}",
      "",
      "resource \"alicloud_ess_attachment\" \"att\" {",
      "  scaling_group_id = \"${alicloud_ess_scaling_group.scaling.id}\"",
      "  instance_ids = [\"${alicloud_instance.instance.*.id}\"]",
      "  force = true",
      "}",
      ""
    ]
  },
  "alicloud-resource-ess_scaling_configuration": {
    "description": "Defines ess_scaling_configuration",
    "prefix": "tf-alicloud-resource-ess_scaling_configuration",
    "body": [
      "resource \"alicloud_security_group\" \"classic\" {",
      "  # Other parameters...",
      "}",
      "resource \"alicloud_ess_scaling_group\" \"scaling\" {",
      "  min_size           = 1",
      "  max_size           = 2",
      "  removal_policies   = [\"OldestInstance\", \"NewestInstance\"]",
      "}",
      "",
      "resource \"alicloud_ess_scaling_configuration\" \"config\" {",
      "  scaling_group_id  = \"${alicloud_ess_scaling_group.scaling.id}\"",
      "",
      "  image_id          = \"ubuntu_140405_64_40G_cloudinit_20161115.vhd\"",
      "  instance_type     = \"ecs.n4.large\"",
      "  security_group_id = \"${alicloud_security_group.classic.id}\"",
      "}",
      ""
    ]
  },
  "alicloud-resource-ess_scaling_group": {
    "description": "Defines ess_scaling_group",
    "prefix": "tf-alicloud-resource-ess_scaling_group",
    "body": [
      "resource \"alicloud_ess_scaling_group\" \"scaling\" {",
      "  min_size           = 1",
      "  max_size           = 2",
      "  removal_policies   = [\"OldestInstance\", \"NewestInstance\"]",
      "}"
    ]
  },
  "alicloud-resource-ess_scaling_rule": {
    "description": "Defines ess_scaling_rule",
    "prefix": "tf-alicloud-resource-ess_scaling_rule",
    "body": [
      "resource \"alicloud_ess_scaling_group\" \"scaling\" {",
      "  # Other parameters...",
      "}",
      "",
      "resource \"alicloud_ess_scaling_configuration\" \"config\" {",
      "  # Other parameters...",
      "}",
      "",
      "resource \"alicloud_ess_scaling_rule\" \"rule\" {",
      "  scaling_group_id = \"${alicloud_ess_scaling_group.scaling.id}\"",
      "  adjustment_type  = \"TotalCapacity\"",
      "  adjustment_value = 2",
      "  cooldown         = 60",
      "}"
    ]
  },
  "alicloud-resource-ess_schedule": {
    "description": "Defines ess_schedule",
    "prefix": "tf-alicloud-resource-ess_schedule",
    "body": [
      "resource \"alicloud_ess_scaling_group\" \"scaling\" {",
      "  # Other parameters...",
      "}",
      "",
      "resource \"alicloud_ess_scaling_configuration\" \"config\" {",
      "  # Other parameters...",
      "}",
      "",
      "resource \"alicloud_ess_scaling_rule\" \"rule\" {",
      "  # Other parameters...",
      "}",
      "",
      "resource \"alicloud_ess_schedule\" \"schedule\" {",
      "  scheduled_action    = \"${alicloud_ess_scaling_rule.rule.ari}\"",
      "  launch_time         = \"2017-04-29T07:30Z\"",
      "  scheduled_task_name = \"sg-schedule\"",
      "}"
    ]
  },
  "alicloud-resource-forward": {
    "description": "Defines forward",
    "prefix": "tf-alicloud-resource-forward",
    "body": [
      "resource \"alicloud_vpc\" \"foo\" {",
      "  ...",
      "}",
      "",
      "resource \"alicloud_vswitch\" \"foo\" {",
      "  ...",
      "}",
      "",
      "resource \"alicloud_nat_gateway\" \"foo\" {",
      "  vpc_id = \"${alicloud_vpc.foo.id}\"",
      "  spec   = \"Small\"",
      "  name   = \"test_foo\"",
      "",
      "  bandwidth_packages = [",
      "    {",
      "      ip_count  = 2",
      "      bandwidth = 5",
      "      zone      = \"\"",
      "    },",
      "    {",
      "      ip_count  = 1",
      "      bandwidth = 6",
      "      zone      = \"cn-beijing-b\"",
      "    }",
      "  ]",
      "",
      "  depends_on = [",
      "    \"alicloud_vswitch.foo\",",
      "  ]",
      "}",
      "",
      "resource \"alicloud_forward_entry\" \"foo\" {",
      "  forward_table_id = \"${alicloud_nat_gateway.foo.forward_table_ids}\"",
      "  external_ip      = \"${alicloud_nat_gateway.foo.bandwidth_packages.0.public_ip_addresses}\"",
      "  external_port    = \"80\"",
      "  ip_protocol      = \"tcp\"",
      "  internal_ip      = \"172.16.0.3\"",
      "  internal_port    = \"8080\"",
      "}",
      ""
    ]
  },
  "alicloud-resource-instance": {
    "description": "Defines instance",
    "prefix": "tf-alicloud-resource-instance",
    "body": [
      "# Create a new ECS instance for a VPC",
      "resource \"alicloud_security_group\" \"group\" {",
      "  name        = \"tf_test_foo\"",
      "  description = \"foo\"",
      "  vpc_id = \"${alicloud_vpc.vpc.id}\"",
      "}",
      "",
      "resource \"alicloud_instance\" \"instance\" {",
      "  # cn-beijing",
      "  availability_zone = \"cn-beijing-b\"",
      "  security_groups = [\"${alicloud_security_group.group.*.id}\"]",
      "",
      "  # series III",
      "  instance_type        = \"ecs.n4.large\"",
      "  system_disk_category = \"cloud_efficiency\"",
      "  image_id             = \"ubuntu_140405_64_40G_cloudinit_20161115.vhd\"",
      "  instance_name        = \"test_foo\"",
      "  vswitch_id = \"${alicloud_vswitch.vswitch.id}\"",
      "  internet_max_bandwidth_out = 10",
      "}",
      "",
      "# Create a new ECS instance for VPC",
      "resource \"alicloud_vpc\" \"vpc\" {",
      "  # Other parameters...",
      "}",
      "",
      "resource \"alicloud_vswitch\" \"vswitch\" {",
      "  vpc_id = \"${alicloud_vpc.vpc.id}\"",
      "  # Other parameters...",
      "}",
      "",
      "resource \"alicloud_slb\" \"slb\" {",
      "  name       = \"test-slb-tf\"",
      "  vpc_id     = \"${alicloud_vpc.vpc.id}\"",
      "  vswitch_id = \"${alicloud_vswitch.vswitch.id}\"",
      "}"
    ]
  },
  "alicloud-resource-key_pair": {
    "description": "Defines key_pair",
    "prefix": "tf-alicloud-resource-key_pair",
    "body": [
      "resource \"alicloud_key_pair\" \"basic\" {",
      "\tkey_name = \"terraform-test-key-pair\"",
      "}",
      "",
      "// Using name prefix to build key pair",
      "resource \"alicloud_key_pair\" \"prefix\" {",
      "\tkey_name_prefix = \"terraform-test-key-pair-prefix\"",
      "}",
      "",
      "// Import an existing public key to build a alicloud key pair",
      "resource \"alicloud_key_pair\" \"publickey\" {",
      "    key_name = \"my_public_key\"",
      "  \tpublic_key = \"ssh-rsa AAAAB3Nza12345678qwertyuudsfsg\"",
      "}"
    ]
  },
  "alicloud-resource-key_pair_attachment": {
    "description": "Defines key_pair_attachment",
    "prefix": "tf-alicloud-resource-key_pair_attachment",
    "body": [
      "resource \"alicloud_key_pair\" \"key\" {",
      "\tkey_name = \"terraform-test-key-pair\"",
      "}",
      "",
      "resource \"alicloud_instance\" \"instance\" {",
      "  instance_name = \"test-keypair-${format(var.count_format, count.index+1)}\"",
      "  image_id = \"ubuntu_140405_64_40G_cloudinit_20161115.vhd\"",
      "  instance_type = \"ecs.n4.small\"",
      "  count = 2",
      "  availability_zone = \"${var.availability_zones}\"",
      "  ...",
      "}",
      "",
      "resource \"alicloud_key_pair_attachment\" \"attach\" {",
      "  key_name = \"${alicloud_key_pair.key.id}\"",
      "  instance_ids = [\"${alicloud_instance.instance.*.id}\"]",
      "}"
    ]
  },
  "alicloud-resource-kms_key": {
    "description": "Defines kms_key",
    "prefix": "tf-alicloud-resource-kms_key",
    "body": [
      "resource \"alicloud_kms_key\" \"key\" {",
      "  description = \"Hello KMS\"",
      "  deletion_window_in_days = \"7\"",
      "  is_enabled = true",
      "}"
    ]
  },
  "alicloud-resource-nat_gateway": {
    "description": "Defines nat_gateway",
    "prefix": "tf-alicloud-resource-nat_gateway",
    "body": [
      "resource \"alicloud_vpc\" \"vpc\" {",
      "  name       = \"tf_test_foo\"",
      "  cidr_block = \"172.16.0.0/12\"",
      "}",
      "",
      "resource \"alicloud_vswitch\" \"vsw\" {",
      "  vpc_id            = \"${alicloud_vpc.vpc.id}\"",
      "  cidr_block        = \"172.16.0.0/21\"",
      "  availability_zone = \"cn-beijing-b\"",
      "}",
      "",
      "resource \"alicloud_nat_gateway\" \"nat_gateway\" {",
      "  vpc_id = \"${alicloud_vpc.vpc.id}\"",
      "  spec   = \"Small\"",
      "  name   = \"test_foo\"",
      "}"
    ]
  },
  "alicloud-resource-oss_bucket": {
    "description": "Defines oss_bucket",
    "prefix": "tf-alicloud-resource-oss_bucket",
    "body": [
      "resource \"alicloud_oss_bucket\" \"bucket-acl\"{",
      "  bucket = \"bucket-170309-acl\"",
      "  acl = \"private\"",
      "}"
    ]
  },
  "alicloud-resource-oss_bucket_object": {
    "description": "Defines oss_bucket_object",
    "prefix": "tf-alicloud-resource-oss_bucket_object",
    "body": [
      "resource \"alicloud_oss_bucket_object\" \"object-source\" {",
      "  bucket = \"your_bucket_name\"",
      "  key    = \"new_object_key\"",
      "  source = \"path/to/file\"",
      "}"
    ]
  },
  "alicloud-resource-ots_table": {
    "description": "Defines ots_table",
    "prefix": "tf-alicloud-resource-ots_table",
    "body": [
      "# Create an OTS table",
      "provider \"alicloud\" {",
      "  ots_instance_name = \"${var.ots_instance_name}\"",
      "}",
      "",
      "resource \"alicloud_ots_table\" \"table\" {",
      "  provider = \"alicloud\"",
      "  table_name = \"${var.table_name}\"",
      "  primary_key = [",
      "    {",
      "      name = \"${var.primary_key_1_name}\"",
      "      type = \"${var.primary_key_integer_type}\"",
      "    },",
      "    {",
      "      name = \"${var.primary_key_2_name}\"",
      "      type = \"${var.primary_key_integer_type}\"",
      "    },",
      "    {",
      "      name = \"${var.primary_key_3_name}\"",
      "      type = \"${var.primary_key_integer_type}\"",
      "    },",
      "    {",
      "      name = \"${var.primary_key_4_name}\"",
      "      type = \"${var.primary_key_string_type}\"",
      "    },",
      "  ]",
      "  time_to_live = \"${var.time_to_live}\"",
      "  max_version = \"${var.max_version}\"",
      "}"
    ]
  },
  "alicloud-resource-ram_access_key": {
    "description": "Defines ram_access_key",
    "prefix": "tf-alicloud-resource-ram_access_key",
    "body": [
      "# Create a new RAM access key for user.",
      "resource \"alicloud_ram_user\" \"user\" {",
      "  name = \"user_test\"",
      "  display_name = \"user_display_name\"",
      "  mobile = \"86-18688888888\"",
      "  email = \"hello.uuu@aaa.com\"",
      "  comments = \"yoyoyo\"",
      "  force = true",
      "}",
      "",
      "resource \"alicloud_ram_access_key\" \"ak\" {",
      "  user_name = \"${alicloud_ram_user.user.name}\"",
      "  secret_file = \"/xxx/xxx/xxx.txt\"",
      "}"
    ]
  },
  "alicloud-resource-ram_account_alias": {
    "description": "Defines ram_account_alias",
    "prefix": "tf-alicloud-resource-ram_account_alias",
    "body": [
      "# Create a alias for cloud account.",
      "resource \"alicloud_ram_account_alias\" \"alias\" {",
      "  account_alias = \"hallo\"",
      "}"
    ]
  },
  "alicloud-resource-ram_alias": {
    "description": "Defines ram_alias",
    "prefix": "tf-alicloud-resource-ram_alias",
    "body": [
      "# Create a alias for cloud account.",
      "resource \"alicloud_ram_account_alias\" \"alias\" {",
      "  account_alias = \"hallo\"",
      "}",
      ""
    ]
  },
  "alicloud-resource-ram_group": {
    "description": "Defines ram_group",
    "prefix": "tf-alicloud-resource-ram_group",
    "body": [
      "# Create a new RAM Group.",
      "resource \"alicloud_ram_group\" \"group\" {",
      "  name = \"test_group\"",
      "  comments = \"this is a group comments.\"",
      "  force = true",
      "}"
    ]
  },
  "alicloud-resource-ram_group_membership": {
    "description": "Defines ram_group_membership",
    "prefix": "tf-alicloud-resource-ram_group_membership",
    "body": [
      "# Create a RAM Group membership.",
      "resource \"alicloud_ram_group\" \"group\" {",
      "  name = \"test_group\"",
      "  comments = \"this is a group comments.\"",
      "  force = true",
      "}",
      "",
      "resource \"alicloud_ram_user\" \"user\" {",
      "  name = \"user_test\"",
      "  display_name = \"user_display_name\"",
      "  mobile = \"86-18688888888\"",
      "  email = \"hello.uuu@aaa.com\"",
      "  comments = \"yoyoyo\"",
      "  force = true",
      "}",
      "",
      "resource \"alicloud_ram_user\" \"user1\" {",
      "  name = \"user_test1\"",
      "  display_name = \"user_display_name1\"",
      "  mobile = \"86-18688888889\"",
      "  email = \"hello.uuu@aaa.com\"",
      "  comments = \"yoyoyo\"",
      "  force = true",
      "}",
      "",
      "resource \"alicloud_ram_group_membership\" \"membership\" {",
      "  group_name = \"${alicloud_ram_group.group.name}\"",
      "  user_names = [\"${alicloud_ram_user.user.name}\"，\"${alicloud_ram_user.user1.name}\"]",
      "}"
    ]
  },
  "alicloud-resource-ram_group_policy_attachment": {
    "description": "Defines ram_group_policy_attachment",
    "prefix": "tf-alicloud-resource-ram_group_policy_attachment",
    "body": [
      "# Create a RAM Group Policy attachment.",
      "resource \"alicloud_ram_group\" \"group\" {",
      "  name = \"test_group\"",
      "  comments = \"this is a group comments.\"",
      "  force = true",
      "}",
      "",
      "resource \"alicloud_ram_policy\" \"policy\" {",
      "  name = \"test_policy\"",
      "  statement = [",
      "      {",
      "        effect = \"Allow\"",
      "        action = [",
      "          \"oss:ListObjects\",",
      "          \"oss:GetObject\"]",
      "        resource = [",
      "          \"acs:oss:*:*:mybucket\",",
      "          \"acs:oss:*:*:mybucket/*\"]",
      "      }]",
      "  description = \"this is a policy test\"",
      "  force = true",
      "}",
      "",
      "resource \"alicloud_ram_group_policy_attachment\" \"attach\" {",
      "  policy_name = \"${alicloud_ram_policy.policy.name}\"",
      "  policy_type = \"${alicloud_ram_policy.policy.type}\"",
      "  group_name = \"${alicloud_ram_group.group.name}\"",
      "}"
    ]
  },
  "alicloud-resource-ram_login_profile": {
    "description": "Defines ram_login_profile",
    "prefix": "tf-alicloud-resource-ram_login_profile",
    "body": [
      "# Create a RAM login profile.",
      "resource \"alicloud_ram_user\" \"user\" {",
      "  name = \"user_test\"",
      "  display_name = \"user_display_name\"",
      "  mobile = \"86-18688888888\"",
      "  email = \"hello.uuu@aaa.com\"",
      "  comments = \"yoyoyo\"",
      "  force = true",
      "}",
      "",
      "resource \"alicloud_ram_login_profile\" \"profile\" {",
      "  user_name = \"${alicloud_ram_user.user.name}\"",
      "  password = \"Haha..1234\"",
      "}"
    ]
  },
  "alicloud-resource-ram_policy": {
    "description": "Defines ram_policy",
    "prefix": "tf-alicloud-resource-ram_policy",
    "body": [
      "# Create a new RAM Policy.",
      "resource \"alicloud_ram_policy\" \"policy\" {",
      "  name = \"test_policy\"",
      "  statement = [",
      "    {",
      "      effect = \"Allow\"",
      "      action = [",
      "        \"oss:ListObjects\",",
      "        \"oss:GetObject\"",
      "      ]",
      "      resource = [",
      "        \"acs:oss:*:*:mybucket\",",
      "        \"acs:oss:*:*:mybucket/*\"",
      "      ]",
      "    }",
      "  ]",
      "  description = \"this is a policy test\"",
      "  force = true",
      "}"
    ]
  },
  "alicloud-resource-ram_role": {
    "description": "Defines ram_role",
    "prefix": "tf-alicloud-resource-ram_role",
    "body": [
      "# Create a new RAM Role.",
      "resource \"alicloud_ram_role\" \"role\" {",
      "  name = \"test_role\"",
      "  ram_users = [\"acs:ram::${your_account_id}:root\", \"acs:ram::${other_account_id}:user/username\"]",
      "  services = [\"apigateway.aliyuncs.com\", \"ecs.aliyuncs.com\"]",
      "  description = \"this is a role test.\"",
      "  force = true",
      "}"
    ]
  },
  "alicloud-resource-ram_role_attachment": {
    "description": "Defines ram_role_attachment",
    "prefix": "tf-alicloud-resource-ram_role_attachment",
    "body": [
      "resource \"alicloud_ram_role\" \"role\" {",
      "  name = \"test_role\"",
      "  services = [\"apigateway.aliyuncs.com\", \"ecs.aliyuncs.com\"]",
      "  ram_users = [\"acs:ram::${your_account_id}:root\", \"acs:ram::${other_account_id}:user/username\"]",
      "  description = \"this is a role test.\"",
      "  force = true",
      "}",
      "",
      "resource \"alicloud_instance\" \"instance\" {",
      "  instance_name = \"test-keypair-${format(var.count_format, count.index+1)}\"",
      "  image_id = \"ubuntu_140405_64_40G_cloudinit_20161115.vhd\"",
      "  instance_type = \"ecs.n4.small\"",
      "  count = 2",
      "  availability_zone = \"${var.availability_zones}\"",
      "  ...",
      "}",
      "",
      "resource \"alicloud_ram_role_attachment\" \"attach\" {",
      "  role_name = \"${alicloud_ram_role.role.name}\"",
      "  instance_ids = [\"${alicloud_instance.instance.*.id}\"]",
      "}"
    ]
  },
  "alicloud-resource-ram_role_policy_attachment": {
    "description": "Defines ram_role_policy_attachment",
    "prefix": "tf-alicloud-resource-ram_role_policy_attachment",
    "body": [
      "# Create a RAM Role Policy attachment.",
      "resource \"alicloud_ram_role\" \"role\" {",
      "  name = \"test_role\"",
      "  ram_users = [\"acs:ram::${your_account_id}:root\", \"acs:ram::${other_account_id}:user/username\"]",
      "  services = [\"apigateway.aliyuncs.com\", \"ecs.aliyuncs.com\"]",
      "  description = \"this is a role test.\"",
      "  force = true",
      "}",
      "",
      "resource \"alicloud_ram_policy\" \"policy\" {",
      "  name = \"test_policy\"",
      "  statement = [",
      "          {",
      "            effect = \"Allow\"",
      "            action = [",
      "              \"oss:ListObjects\",",
      "              \"oss:GetObject\"]",
      "            resource = [",
      "              \"acs:oss:*:*:mybucket\",",
      "              \"acs:oss:*:*:mybucket/*\"]",
      "          }]",
      "  description = \"this is a policy test\"",
      "  force = true",
      "}",
      "",
      "resource \"alicloud_ram_role_policy_attachment\" \"attach\" {",
      "  policy_name = \"${alicloud_ram_policy.policy.name}\"",
      "  policy_type = \"${alicloud_ram_policy.policy.type}\"",
      "  role_name = \"${alicloud_ram_role.role.name}\"",
      "}"
    ]
  },
  "alicloud-resource-ram_user": {
    "description": "Defines ram_user",
    "prefix": "tf-alicloud-resource-ram_user",
    "body": [
      "# Create a new RAM user.",
      "resource \"alicloud_ram_user\" \"user\" {",
      "  name = \"user_test\"",
      "  display_name = \"user_display_name\"",
      "  mobile = \"86-18688888888\"",
      "  email = \"hello.uuu@aaa.com\"",
      "  comments = \"yoyoyo\"",
      "  force = true",
      "}"
    ]
  },
  "alicloud-resource-ram_user_policy_attachment": {
    "description": "Defines ram_user_policy_attachment",
    "prefix": "tf-alicloud-resource-ram_user_policy_attachment",
    "body": [
      "# Create a RAM User Policy attachment.",
      "resource \"alicloud_ram_user\" \"user\" {",
      "  name = \"user_test\"",
      "  display_name = \"user_display_name\"",
      "  mobile = \"86-18688888888\"",
      "  email = \"hello.uuu@aaa.com\"",
      "  comments = \"yoyoyo\"",
      "  force = true",
      "}",
      "",
      "resource \"alicloud_ram_policy\" \"policy\" {",
      "  name = \"test_policy\"",
      "  statement = [",
      "          {",
      "            effect = \"Allow\"",
      "            action = [",
      "              \"oss:ListObjects\",",
      "              \"oss:GetObject\"]",
      "            resource = [",
      "              \"acs:oss:*:*:mybucket\",",
      "              \"acs:oss:*:*:mybucket/*\"]",
      "          }]",
      "  description = \"this is a policy test\"",
      "  force = true",
      "}",
      "",
      "resource \"alicloud_ram_user_policy_attachment\" \"attach\" {",
      "  policy_name = \"${alicloud_ram_policy.policy.name}\"",
      "  policy_type = \"${alicloud_ram_policy.policy.type}\"",
      "  user_name = \"${alicloud_ram_user.user.name}\"",
      "}"
    ]
  },
  "alicloud-resource-router_interface": {
    "description": "Defines router_interface",
    "prefix": "tf-alicloud-resource-router_interface",
    "body": [
      "resource \"alicloud_vpc\" \"foo\" {",
      "  name = \"tf_test_foo12345\"",
      "  cidr_block = \"172.16.0.0/12\"",
      "}",
      "",
      "resource \"alicloud_router_interface\" \"interface\" {",
      "  opposite_region = \"cn-beijing\"",
      "  router_type = \"VRouter\"",
      "  router_id = \"${alicloud_vpc.foo.router_id}\"",
      "  role = \"InitiatingSide\"",
      "  specification = \"Large.2\"",
      "  name = \"test1\"",
      "  description = \"test1\"",
      "}"
    ]
  },
  "alicloud-resource-security_group": {
    "description": "Defines security_group",
    "prefix": "tf-alicloud-resource-security_group",
    "body": [
      "resource \"alicloud_security_group\" \"group\" {",
      "  name        = \"terraform-test-group\"",
      "  description = \"New security group\"",
      "}"
    ]
  },
  "alicloud-resource-security_group_rule": {
    "description": "Defines security_group_rule",
    "prefix": "tf-alicloud-resource-security_group_rule",
    "body": [
      "resource \"alicloud_security_group\" \"default\" {",
      "  name = \"default\"",
      "}",
      "",
      "resource \"alicloud_security_group_rule\" \"allow_all_tcp\" {",
      "  type              = \"ingress\"",
      "  ip_protocol       = \"tcp\"",
      "  nic_type          = \"internet\"",
      "  policy            = \"accept\"",
      "  port_range        = \"1/65535\"",
      "  priority          = 1",
      "  security_group_id = \"${alicloud_security_group.default.id}\"",
      "  cidr_ip           = \"0.0.0.0/0\"",
      "}"
    ]
  },
  "alicloud-resource-slb": {
    "description": "Defines slb",
    "prefix": "tf-alicloud-resource-slb",
    "body": [
      "# Create a new load balancer for classic",
      "resource \"alicloud_slb\" \"classic\" {",
      "  name                 = \"test-slb-tf\"",
      "  internet             = true",
      "  internet_charge_type = \"paybybandwidth\"",
      "  bandwidth            = 5",
      "  specification = \"slb.s1.small\"",
      "}",
      "",
      "# Create a new load balancer for VPC",
      "resource \"alicloud_vpc\" \"default\" {",
      "  # Other parameters...",
      "}",
      "",
      "resource \"alicloud_vswitch\" \"default\" {",
      "  # Other parameters...",
      "}",
      "",
      "resource \"alicloud_slb\" \"vpc\" {",
      "  name       = \"test-slb-tf\"",
      "  vswitch_id = \"${alicloud_vswitch.default.id}\"",
      "}"
    ]
  },
  "alicloud-resource-slb_attachment": {
    "description": "Defines slb_attachment",
    "prefix": "tf-alicloud-resource-slb_attachment",
    "body": [
      "# Create a new load balancer attachment for classic",
      "resource \"alicloud_slb\" \"default\" {",
      "  # Other parameters...",
      "}",
      "",
      "resource \"alicloud_instance\" \"default\" {",
      "  # Other parameters...",
      "}",
      "",
      "resource \"alicloud_slb_attachment\" \"default\" {",
      "  load_balancer_id    = \"${alicloud_slb.default.id}\"",
      "  instances = [\"${alicloud_instance.default.id}\"]",
      "}"
    ]
  },
  "alicloud-resource-slb_listener": {
    "description": "Defines slb_listener",
    "prefix": "tf-alicloud-resource-slb_listener",
    "body": [
      "# Create a new load balancer and listeners",
      "resource \"alicloud_slb\" \"instance\" {",
      "  name                 = \"test-slb-tf\"",
      "  internet             = true",
      "  internet_charge_type = \"paybybandwidth\"",
      "  bandwidth            = 25",
      "}",
      "",
      "resource \"alicloud_slb_listener\" \"http\" {",
      "  load_balancer_id = \"${alicloud_slb.instance.id}\"",
      "  backend_port = 80",
      "  frontend_port = 80",
      "  bandwidth = 10",
      "  protocol = \"http\"",
      "  sticky_session = \"on\"",
      "  sticky_session_type = \"insert\"",
      "  cookie = \"testslblistenercookie\"",
      "  cookie_timeout = 86400",
      "}",
      "resource \"alicloud_slb_listener\" \"tcp\" {",
      "  load_balancer_id = \"${alicloud_slb.instance.id}\"",
      "  backend_port = \"22\"",
      "  frontend_port = \"22\"",
      "  protocol = \"tcp\"",
      "  bandwidth = \"10\"",
      "  health_check_type = \"tcp\"",
      "}"
    ]
  },
  "alicloud-resource-slb_rule": {
    "description": "Defines slb_rule",
    "prefix": "tf-alicloud-resource-slb_rule",
    "body": [
      "# Create a new load balancer and virtual rule",
      "",
      "resource \"alicloud_slb\" \"instance\" {",
      "  name = \"new-slb\"",
      "  vswitch_id = \"<one vswitch id>\"",
      "}",
      "",
      "resource \"alicloud_slb_listener\" \"listener\" {",
      "  load_balancer_id = \"${alicloud_slb.instance.id}\"",
      "  protocol = \"http\"",
      "  ...",
      "}",
      "",
      "resource \"alicloud_slb_server_group\" \"group\" {",
      "  load_balancer_id = \"${alicloud_slb.instance.id}\"",
      "  ...",
      "}",
      "",
      "resource \"alicloud_slb_rule\" \"rule\" {",
      "  count = 2",
      "  load_balancer_id = \"${alicloud_slb.instance.id}\"",
      "  frontend_port = \"${alicloud_slb_listener.listener.frontend_port}\"",
      "  name = \"from-tf\"",
      "  domain = \"*.test.com\"",
      "  url = \"/image/${count.index}\"",
      "  server_group_id = \"${alicloud_slb_server_group.group.id}\"",
      "}",
      ""
    ]
  },
  "alicloud-resource-slb_server_group": {
    "description": "Defines slb_server_group",
    "prefix": "tf-alicloud-resource-slb_server_group",
    "body": [
      "# Create a new load balancer and virtual server group",
      "",
      "resource \"alicloud_instance\" \"instance\" {",
      "  instance_name = \"for-slb-server\"",
      "  count = 3",
      "  ...",
      "}",
      "",
      "resource \"alicloud_slb\" \"instance\" {",
      "  name = \"new-slb\"",
      "  vswitch_id = \"<one vswitch id>\"",
      "}",
      "",
      "resource \"alicloud_slb_server_group\" \"group\" {",
      "  load_balancer_id = \"${alicloud_slb.instance.id}\"",
      "  servers = [",
      "    {",
      "      server_ids = [\"${alicloud_instance.instance.*.id}\"]",
      "      port = 80",
      "      weight = 100",
      "    }",
      "  ]",
      "}"
    ]
  },
  "alicloud-resource-snat": {
    "description": "Defines snat",
    "prefix": "tf-alicloud-resource-snat",
    "body": [
      "resource \"alicloud_vpc\" \"foo\" {",
      "  ...",
      "}",
      "",
      "resource \"alicloud_vswitch\" \"foo\" {",
      "  ...",
      "}",
      "",
      "resource \"alicloud_nat_gateway\" \"foo\" {",
      "  vpc_id = \"${alicloud_vpc.foo.id}\"",
      "  spec   = \"Small\"",
      "  name   = \"test_foo\"",
      "",
      "  bandwidth_packages = [",
      "    {",
      "      ip_count  = 2",
      "      bandwidth = 5",
      "      zone      = \"\"",
      "    },",
      "    {",
      "      ip_count  = 1",
      "      bandwidth = 6",
      "      zone      = \"cn-beijing-b\"",
      "    }",
      "  ]",
      "",
      "  depends_on = [",
      "    \"alicloud_vswitch.foo\"",
      "  ]",
      "}",
      "",
      "resource \"alicloud_snat_entry\" \"foo\" {",
      "  snat_table_id     = \"${alicloud_nat_gateway.foo.snat_table_ids}\"",
      "  source_vswitch_id = \"${alicloud_vswitch.foo.id}\"",
      "  snat_ip           = \"${alicloud_nat_gateway.foo.bandwidth_packages.0.public_ip_addresses}\"",
      "}"
    ]
  },
  "alicloud-resource-vpc": {
    "description": "Defines vpc",
    "prefix": "tf-alicloud-resource-vpc",
    "body": [
      "resource \"alicloud_vpc\" \"vpc\" {",
      "  name       = \"tf_test_foo\"",
      "  cidr_block = \"172.16.0.0/12\"",
      "}"
    ]
  },
  "alicloud-resource-vroute_entry": {
    "description": "Defines vroute_entry",
    "prefix": "tf-alicloud-resource-vroute_entry",
    "body": [
      "resource \"alicloud_vpc\" \"vpc\" {",
      "  name       = \"tf_test_foo\"",
      "  cidr_block = \"172.16.0.0/12\"",
      "}",
      "",
      "resource \"alicloud_route_entry\" \"default\" {",
      "  route_table_id        = \"${alicloud_vpc.default.router_table_id}\"",
      "  destination_cidrblock = \"${var.entry_cidr}\"",
      "  nexthop_type          = \"Instance\"",
      "  nexthop_id            = \"${alicloud_instance.snat.id}\"",
      "}",
      "",
      "resource \"alicloud_instance\" \"snat\" {",
      "  // ...",
      "}"
    ]
  },
  "alicloud-resource-vswitch": {
    "description": "Defines vswitch",
    "prefix": "tf-alicloud-resource-vswitch",
    "body": [
      "resource \"alicloud_vpc\" \"vpc\" {",
      "  name       = \"tf_test_foo\"",
      "  cidr_block = \"172.16.0.0/12\"",
      "}",
      "",
      "resource \"alicloud_vswitch\" \"vsw\" {",
      "  vpc_id            = \"${alicloud_vpc.vpc.id}\"",
      "  cidr_block        = \"172.16.0.0/21\"",
      "  availability_zone = \"cn-beijing-b\"",
      "}"
    ]
  },
  "archive-data-archive_file": {
    "description": "Defines archive_file",
    "prefix": "tf-archive-data-archive_file",
    "body": [
      "# Archive a single file.",
      "",
      "data \"archive_file\" \"init\" {",
      "  type        = \"zip\"",
      "  source_file = \"${path.module}/init.tpl\"",
      "  output_path = \"${path.module}/files/init.zip\"",
      "}",
      "",
      "# Archive multiple files.",
      "",
      "data \"archive_file\" \"dotfiles\" {",
      "  type        = \"zip\"",
      "  output_path = \"${path.module}/files/dotfiles.zip\"",
      "",
      "  source {",
      "    content  = \"${data.template_file.vimrc.rendered}\"",
      "    filename = \".vimrc\"",
      "  }",
      "",
      "  source {",
      "    content  = \"${data.template_file.ssh_config.rendered}\"",
      "    filename = \".ssh/config\"",
      "  }",
      "}"
    ]
  },
  "arukas-resource-container": {
    "description": "Defines container",
    "prefix": "tf-arukas-resource-container",
    "body": [
      "resource \"arukas_container\" \"foobar\" {",
      "  name      = \"terraform_for_arukas_test_foobar\"",
      "  image     = \"nginx:latest\"",
      "  instances = 1",
      "  memory    = 256",
      "",
      "  ports = {",
      "    protocol = \"tcp\"",
      "    number   = \"80\"",
      "  }",
      "",
      "  environments {",
      "    key   = \"key1\"",
      "    value = \"value1\"",
      "  }",
      "}"
    ]
  },
  "atlas-data-artifact": {
    "description": "Defines artifact",
    "prefix": "tf-atlas-data-artifact",
    "body": [
      "# Read the AMI",
      "data \"atlas_artifact\" \"web\" {",
      "  name  = \"hashicorp/web\"",
      "  type  = \"amazon.image\"",
      "  build = \"latest\"",
      "",
      "  metadata {",
      "    arch = \"386\"",
      "  }",
      "}",
      "",
      "# Start our instance with the dynamic ami value",
      "# Remember to include the AWS region as it is part of the full ID",
      "resource \"aws_instance\" \"app\" {",
      "  ami = \"${data.atlas_artifact.web.metadata_full.region-us-east-1}\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "atlas-resource-artifact": {
    "description": "Defines artifact",
    "prefix": "tf-atlas-resource-artifact",
    "body": [
      "# Read the AMI",
      "resource \"atlas_artifact\" \"web\" {",
      "  name  = \"hashicorp/web\"",
      "  type  = \"amazon.image\"",
      "  build = \"latest\"",
      "",
      "  metadata {",
      "    arch = \"386\"",
      "  }",
      "}",
      "",
      "# Start our instance with the dynamic ami value",
      "# Remember to include the AWS region as it is part of the full ID",
      "resource \"aws_instance\" \"app\" {",
      "  ami = \"${atlas_artifact.web.metadata_full.region-us-east-1}\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "aws-data-acm_certificate": {
    "description": "Defines acm_certificate",
    "prefix": "tf-aws-data-acm_certificate",
    "body": [
      "data \"aws_acm_certificate\" \"example\" {",
      "  domain   = \"tf.example.com\"",
      "  statuses = [\"ISSUED\"]",
      "}",
      "",
      "data \"aws_acm_certificate\" \"example\" {",
      "  domain   = \"tf.example.com\"",
      "  types = [\"AMAZON_ISSUED\"]",
      "  most_recent = true",
      "}"
    ]
  },
  "aws-data-acmpca_certificate_authority": {
    "description": "Defines acmpca_certificate_authority",
    "prefix": "tf-aws-data-acmpca_certificate_authority",
    "body": [
      "data \"aws_acmpca_certificate_authority\" \"example\" {",
      "  arn = \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\"",
      "}"
    ]
  },
  "aws-data-ami": {
    "description": "Defines ami",
    "prefix": "tf-aws-data-ami",
    "body": [
      "data \"aws_ami\" \"nat_ami\" {",
      "  most_recent      = true",
      "  executable_users = [\"self\"]",
      "",
      "  filter {",
      "    name   = \"owner-alias\"",
      "    values = [\"amazon\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"name\"",
      "    values = [\"amzn-ami-vpc-nat*\"]",
      "  }",
      "",
      "  name_regex = \"^myami-\\\\d{3}\"",
      "  owners     = [\"self\"]",
      "}"
    ]
  },
  "aws-data-ami_ids": {
    "description": "Defines ami_ids",
    "prefix": "tf-aws-data-ami_ids",
    "body": [
      "data \"aws_ami_ids\" \"ubuntu\" {",
      "  owners = [\"099720109477\"]",
      "",
      "  filter {",
      "    name   = \"name\"",
      "    values = [\"ubuntu/images/ubuntu-*-*-amd64-server-*\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-api_gateway_rest_api": {
    "description": "Defines api_gateway_rest_api",
    "prefix": "tf-aws-data-api_gateway_rest_api",
    "body": [
      "data \"aws_api_gateway_rest_api\" \"my_rest_api\" {",
      "  name = \"my-rest-api\"",
      "}"
    ]
  },
  "aws-data-arn": {
    "description": "Defines arn",
    "prefix": "tf-aws-data-arn",
    "body": [
      "data \"aws_arn\" \"db_instance\" {",
      "  arn = \"arn:aws:rds:eu-west-1:123456789012:db:mysql-db\"",
      "}"
    ]
  },
  "aws-data-autoscaling_groups": {
    "description": "Defines autoscaling_groups",
    "prefix": "tf-aws-data-autoscaling_groups",
    "body": [
      "data \"aws_autoscaling_groups\" \"groups\" {",
      "  filter {",
      "    name = \"key\"",
      "    values = [\"Team\"]",
      "  }",
      "",
      "  filter {",
      "    name = \"value\"",
      "    values = [\"Pets\"]",
      "  }",
      "}",
      "",
      "resource \"aws_autoscaling_notification\" \"slack_notifications\" {",
      "  group_names = [\"${data.aws_autoscaling_groups.groups.names}\"]",
      "",
      "  notifications = [",
      "    \"autoscaling:EC2_INSTANCE_LAUNCH\",",
      "    \"autoscaling:EC2_INSTANCE_TERMINATE\",",
      "    \"autoscaling:EC2_INSTANCE_LAUNCH_ERROR\",",
      "    \"autoscaling:EC2_INSTANCE_TERMINATE_ERROR\",",
      "  ]",
      "",
      "  topic_arn = \"TOPIC ARN\"",
      "}"
    ]
  },
  "aws-data-availability_zone": {
    "description": "Defines availability_zone",
    "prefix": "tf-aws-data-availability_zone",
    "body": [
      "variable \"region_number\" {",
      "  # Arbitrary mapping of region name to number to use in",
      "  # a VPC's CIDR prefix.",
      "  default = {",
      "    us-east-1      = 1",
      "    us-west-1      = 2",
      "    us-west-2      = 3",
      "    eu-central-1   = 4",
      "    ap-northeast-1 = 5",
      "  }",
      "}",
      "",
      "variable \"az_number\" {",
      "  # Assign a number to each AZ letter used in our configuration",
      "  default = {",
      "    a = 1",
      "    b = 2",
      "    c = 3",
      "    d = 4",
      "    e = 5",
      "    f = 6",
      "  }",
      "}",
      "",
      "# Retrieve the AZ where we want to create network resources",
      "# This must be in the region selected on the AWS provider.",
      "data \"aws_availability_zone\" \"example\" {",
      "  name = \"eu-central-1a\"",
      "}",
      "",
      "# Create a VPC for the region associated with the AZ",
      "resource \"aws_vpc\" \"example\" {",
      "  cidr_block = \"${cidrsubnet(\"10.0.0.0/8\", 4, var.region_number[data.aws_availability_zone.example.region])}\"",
      "}",
      "",
      "# Create a subnet for the AZ within the regional VPC",
      "resource \"aws_subnet\" \"example\" {",
      "  vpc_id     = \"${aws_vpc.example.id}\"",
      "  cidr_block = \"${cidrsubnet(aws_vpc.example.cidr_block, 4, var.az_number[data.aws_availability_zone.example.name_suffix])}\"",
      "}"
    ]
  },
  "aws-data-availability_zones": {
    "description": "Defines availability_zones",
    "prefix": "tf-aws-data-availability_zones",
    "body": [
      "# Declare the data source",
      "data \"aws_availability_zones\" \"available\" {}",
      "",
      "# e.g. Create subnets in the first two available availability zones",
      "",
      "resource \"aws_subnet\" \"primary\" {",
      "  availability_zone = \"${data.aws_availability_zones.available.names[0]}\"",
      "",
      "  # ...",
      "}",
      "",
      "resource \"aws_subnet\" \"secondary\" {",
      "  availability_zone = \"${data.aws_availability_zones.available.names[1]}\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "aws-data-batch_compute_environment": {
    "description": "Defines batch_compute_environment",
    "prefix": "tf-aws-data-batch_compute_environment",
    "body": [
      "data \"aws_batch_compute_environment\" \"batch-mongo\" {",
      "  compute_environment_name = \"batch-mongo-production\"",
      "}"
    ]
  },
  "aws-data-batch_job_queue": {
    "description": "Defines batch_job_queue",
    "prefix": "tf-aws-data-batch_job_queue",
    "body": [
      "data \"aws_batch_job_queue\" \"test-queue\" {",
      "  name = \"tf-test-batch-job-queue\"",
      "}"
    ]
  },
  "aws-data-billing_service_account": {
    "description": "Defines billing_service_account",
    "prefix": "tf-aws-data-billing_service_account",
    "body": [
      "data \"aws_billing_service_account\" \"main\" {}",
      "",
      "resource \"aws_s3_bucket\" \"billing_logs\" {",
      "  bucket = \"my-billing-tf-test-bucket\"",
      "  acl    = \"private\"",
      "",
      "  policy = <<POLICY",
      "{",
      "  \"Id\": \"Policy\",",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"s3:GetBucketAcl\", \"s3:GetBucketPolicy\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"arn:aws:s3:::my-billing-tf-test-bucket\",",
      "      \"Principal\": {",
      "        \"AWS\": [",
      "          \"${data.aws_billing_service_account.main.arn}\"",
      "        ]",
      "      }",
      "    },",
      "    {",
      "      \"Action\": [",
      "        \"s3:PutObject\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"arn:aws:s3:::my-billing-tf-test-bucket/*\",",
      "      \"Principal\": {",
      "        \"AWS\": [",
      "          \"${data.aws_billing_service_account.main.arn}\"",
      "        ]",
      "      }",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-data-caller_identity": {
    "description": "Defines caller_identity",
    "prefix": "tf-aws-data-caller_identity",
    "body": [
      "data \"aws_caller_identity\" \"current\" {}",
      "",
      "output \"account_id\" {",
      "  value = \"${data.aws_caller_identity.current.account_id}\"",
      "}",
      "",
      "output \"caller_arn\" {",
      "  value = \"${data.aws_caller_identity.current.arn}\"",
      "}",
      "",
      "output \"caller_user\" {",
      "  value = \"${data.aws_caller_identity.current.user_id}\"",
      "}"
    ]
  },
  "aws-data-canonical_user_id": {
    "description": "Defines canonical_user_id",
    "prefix": "tf-aws-data-canonical_user_id",
    "body": [
      "data \"aws_canonical_user_id\" \"current\" {}",
      "",
      "output \"canonical_user_id\" {",
      "  value = \"${data.aws_canonical_user_id.current.id}\"",
      "}"
    ]
  },
  "aws-data-cloudformation_stack": {
    "description": "Defines cloudformation_stack",
    "prefix": "tf-aws-data-cloudformation_stack",
    "body": [
      "data \"aws_cloudformation_stack\" \"network\" {",
      "  name = \"my-network-stack\"",
      "}",
      "",
      "resource \"aws_instance\" \"web\" {",
      "  ami           = \"ami-abb07bcb\"",
      "  instance_type = \"t1.micro\"",
      "  subnet_id     = \"${data.aws_cloudformation_stack.network.outputs[\"SubnetId\"]}\"",
      "",
      "  tags {",
      "    Name = \"HelloWorld\"",
      "  }",
      "}"
    ]
  },
  "aws-data-cloudtrail_service_account": {
    "description": "Defines cloudtrail_service_account",
    "prefix": "tf-aws-data-cloudtrail_service_account",
    "body": [
      "data \"aws_cloudtrail_service_account\" \"main\" {}",
      "",
      "resource \"aws_s3_bucket\" \"bucket\" {",
      "  bucket        = \"tf-cloudtrail-logging-test-bucket\"",
      "  force_destroy = true",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2008-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Sid\": \"Put bucket policy needed for trails\",",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"AWS\": \"${data.aws_cloudtrail_service_account.main.arn}\"",
      "      },",
      "      \"Action\": \"s3:PutObject\",",
      "      \"Resource\": \"arn:aws:s3:::tf-cloudtrail-logging-test-bucket/*\"",
      "    },",
      "    {",
      "      \"Sid\": \"Get bucket policy needed for trails\",",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"AWS\": \"${data.aws_cloudtrail_service_account.main.arn}\"",
      "      },",
      "      \"Action\": \"s3:GetBucketAcl\",",
      "      \"Resource\": \"arn:aws:s3:::tf-cloudtrail-logging-test-bucket\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-data-cloudwatch_log_group": {
    "description": "Defines cloudwatch_log_group",
    "prefix": "tf-aws-data-cloudwatch_log_group",
    "body": [
      "data \"aws_cloudwatch_log_group\" \"example\" {",
      "  name = \"MyImportantLogs\"",
      "}"
    ]
  },
  "aws-data-cognito_user_pools": {
    "description": "Defines cognito_user_pools",
    "prefix": "tf-aws-data-cognito_user_pools",
    "body": [
      "data \"aws_api_gateway_rest_api\" \"selected\" {",
      "  name = \"${var.api_gateway_name}\"",
      "}",
      "",
      "data \"aws_cognito_user_pools\" \"selected\" {",
      "  name = \"${var.cognito_user_pool_name}\"",
      "}",
      "",
      "resource \"aws_api_gateway_authorizer\" \"cognito\" {",
      "  name = \"cognito\"",
      "  type = \"COGNITO_USER_POOLS\"",
      "  rest_api_id = \"${data.aws_api_gateway_rest_api.selected.id}\"",
      "  provider_arns = [\"${data.aws_cognito_user_pools.selected.arns}\"]",
      "}"
    ]
  },
  "aws-data-db_instance": {
    "description": "Defines db_instance",
    "prefix": "tf-aws-data-db_instance",
    "body": [
      "data \"aws_db_instance\" \"database\" {",
      "  db_instance_identifier = \"my-test-database\"",
      "}"
    ]
  },
  "aws-data-db_snapshot": {
    "description": "Defines db_snapshot",
    "prefix": "tf-aws-data-db_snapshot",
    "body": [
      "resource \"aws_db_instance\" \"prod\" {",
      "  allocated_storage    = 10",
      "  engine               = \"mysql\"",
      "  engine_version       = \"5.6.17\"",
      "  instance_class       = \"db.t2.micro\"",
      "  name                 = \"mydb\"",
      "  username             = \"foo\"",
      "  password             = \"bar\"",
      "  db_subnet_group_name = \"my_database_subnet_group\"",
      "  parameter_group_name = \"default.mysql5.6\"",
      "}",
      "",
      "data \"aws_db_snapshot\" \"latest_prod_snapshot\" {",
      "  db_instance_identifier = \"${aws_db_instance.prod.id}\"",
      "  most_recent = true",
      "}",
      "",
      "# Use the latest production snapshot to create a dev instance.",
      "resource \"aws_db_instance\" \"dev\" {",
      "  instance_class      = \"db.t2.micro\"",
      "  name                = \"mydbdev\"",
      "  snapshot_identifier = \"${data.aws_db_snapshot.latest_prod_snapshot.id}\"",
      "  lifecycle {",
      "    ignore_changes = [\"snapshot_identifier\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-dynamodb_table": {
    "description": "Defines dynamodb_table",
    "prefix": "tf-aws-data-dynamodb_table",
    "body": [
      "data \"aws_dynamodb_table\" \"tableName\" {",
      "  name = \"tableName\"",
      "}"
    ]
  },
  "aws-data-ebs_snapshot": {
    "description": "Defines ebs_snapshot",
    "prefix": "tf-aws-data-ebs_snapshot",
    "body": [
      "data \"aws_ebs_snapshot\" \"ebs_volume\" {",
      "  most_recent = true",
      "  owners      = [\"self\"]",
      "",
      "  filter {",
      "    name   = \"volume-size\"",
      "    values = [\"40\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"tag:Name\"",
      "    values = [\"Example\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-ebs_snapshot_ids": {
    "description": "Defines ebs_snapshot_ids",
    "prefix": "tf-aws-data-ebs_snapshot_ids",
    "body": [
      "data \"aws_ebs_snapshot_ids\" \"ebs_volumes\" {",
      "  owners = [\"self\"]",
      "",
      "  filter {",
      "    name   = \"volume-size\"",
      "    values = [\"40\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"tag:Name\"",
      "    values = [\"Example\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-ebs_volume": {
    "description": "Defines ebs_volume",
    "prefix": "tf-aws-data-ebs_volume",
    "body": [
      "data \"aws_ebs_volume\" \"ebs_volume\" {",
      "  most_recent = true",
      "",
      "  filter {",
      "    name   = \"volume-type\"",
      "    values = [\"gp2\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"tag:Name\"",
      "    values = [\"Example\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-ecr_repository": {
    "description": "Defines ecr_repository",
    "prefix": "tf-aws-data-ecr_repository",
    "body": [
      "data \"aws_ecr_repository\" \"service\" {",
      "  name = \"ecr-repository\"",
      "}"
    ]
  },
  "aws-data-ecs_cluster": {
    "description": "Defines ecs_cluster",
    "prefix": "tf-aws-data-ecs_cluster",
    "body": [
      "data \"aws_ecs_cluster\" \"ecs-mongo\" {",
      "  cluster_name = \"ecs-mongo-production\"",
      "}"
    ]
  },
  "aws-data-ecs_container_definition": {
    "description": "Defines ecs_container_definition",
    "prefix": "tf-aws-data-ecs_container_definition",
    "body": [
      "data \"aws_ecs_container_definition\" \"ecs-mongo\" {",
      "  task_definition = \"${aws_ecs_task_definition.mongo.id}\"",
      "  container_name  = \"mongodb\"",
      "}"
    ]
  },
  "aws-data-ecs_task_definition": {
    "description": "Defines ecs_task_definition",
    "prefix": "tf-aws-data-ecs_task_definition",
    "body": [
      "# Simply specify the family to find the latest ACTIVE revision in that family.",
      "data \"aws_ecs_task_definition\" \"mongo\" {",
      "  task_definition = \"${aws_ecs_task_definition.mongo.family}\"",
      "}",
      "",
      "resource \"aws_ecs_cluster\" \"foo\" {",
      "  name = \"foo\"",
      "}",
      "",
      "resource \"aws_ecs_task_definition\" \"mongo\" {",
      "  family = \"mongodb\"",
      "",
      "  container_definitions = <<DEFINITION",
      "[",
      "  {",
      "    \"cpu\": 128,",
      "    \"environment\": [{",
      "      \"name\": \"SECRET\",",
      "      \"value\": \"KEY\"",
      "    }],",
      "    \"essential\": true,",
      "    \"image\": \"mongo:latest\",",
      "    \"memory\": 128,",
      "    \"memoryReservation\": 64,",
      "    \"name\": \"mongodb\"",
      "  }",
      "]",
      "DEFINITION",
      "}",
      "",
      "resource \"aws_ecs_service\" \"mongo\" {",
      "  name          = \"mongo\"",
      "  cluster       = \"${aws_ecs_cluster.foo.id}\"",
      "  desired_count = 2",
      "",
      "  # Track the latest ACTIVE revision",
      "  task_definition = \"${aws_ecs_task_definition.mongo.family}:${max(\"${aws_ecs_task_definition.mongo.revision}\", \"${data.aws_ecs_task_definition.mongo.revision}\")}\"",
      "}"
    ]
  },
  "aws-data-efs_file_system": {
    "description": "Defines efs_file_system",
    "prefix": "tf-aws-data-efs_file_system",
    "body": [
      "variable \"file_system_id\" {",
      "  type = \"string\"",
      "  default = \"\"",
      "}",
      "",
      "data \"aws_efs_file_system\" \"by_id\" {",
      "  file_system_id = \"${var.file_system_id}\"",
      "}"
    ]
  },
  "aws-data-efs_mount_target": {
    "description": "Defines efs_mount_target",
    "prefix": "tf-aws-data-efs_mount_target",
    "body": [
      "variable \"mount_target_id\" {",
      "  type = \"string\"",
      "  default = \"\"",
      "}",
      "",
      "data \"aws_efs_mount_target\" \"by_id\" {",
      "  mount_target_id = \"${var.mount_target_id}\"",
      "}"
    ]
  },
  "aws-data-eip": {
    "description": "Defines eip",
    "prefix": "tf-aws-data-eip",
    "body": [
      "variable \"instance_id\" {}",
      "variable \"public_ip\" {}",
      "",
      "data \"aws_eip\" \"proxy_ip\" {",
      "  public_ip = \"${var.public_ip}\"",
      "}",
      "",
      "resource \"aws_eip_association\" \"proxy_eip\" {",
      "  instance_id   = \"${var.instance_id}\"",
      "  allocation_id = \"${data.aws_eip.proxy_ip.id}\"",
      "}"
    ]
  },
  "aws-data-elastic_beanstalk_hosted_zone": {
    "description": "Defines elastic_beanstalk_hosted_zone",
    "prefix": "tf-aws-data-elastic_beanstalk_hosted_zone",
    "body": [
      "data \"aws_elastic_beanstalk_hosted_zone\" \"current\" {}"
    ]
  },
  "aws-data-elastic_beanstalk_solution_stack": {
    "description": "Defines elastic_beanstalk_solution_stack",
    "prefix": "tf-aws-data-elastic_beanstalk_solution_stack",
    "body": [
      "data \"aws_elastic_beanstalk_solution_stack\" \"multi_docker\" {",
      "  most_recent   = true",
      "",
      "  name_regex    = \"^64bit Amazon Linux (.*) Multi-container Docker (.*)$\"",
      "}"
    ]
  },
  "aws-data-elasticache_cluster": {
    "description": "Defines elasticache_cluster",
    "prefix": "tf-aws-data-elasticache_cluster",
    "body": [
      "data \"aws_elasticache_cluster\" \"my_cluster\" {",
      "  cluster_id = \"my-cluster-id\"",
      "}"
    ]
  },
  "aws-data-elasticache_replication_group": {
    "description": "Defines elasticache_replication_group",
    "prefix": "tf-aws-data-elasticache_replication_group",
    "body": [
      "data \"aws_elasticache_replication_group\" \"bar\" {",
      "  replication_group_id = \"example\"",
      "}"
    ]
  },
  "aws-data-elb": {
    "description": "Defines elb",
    "prefix": "tf-aws-data-elb",
    "body": [
      "variable \"lb_name\" {",
      "  type    = \"string\"",
      "  default = \"\"",
      "}",
      "",
      "data \"aws_elb\" \"test\" {",
      "  name = \"${var.lb_name}\"",
      "}"
    ]
  },
  "aws-data-elb_hosted_zone_id": {
    "description": "Defines elb_hosted_zone_id",
    "prefix": "tf-aws-data-elb_hosted_zone_id",
    "body": [
      "data \"aws_elb_hosted_zone_id\" \"main\" {}",
      "",
      "resource \"aws_route53_record\" \"www\" {",
      "  zone_id = \"${aws_route53_zone.primary.zone_id}\"",
      "  name    = \"example.com\"",
      "  type    = \"A\"",
      "",
      "  alias {",
      "    name                   = \"${aws_elb.main.dns_name}\"",
      "    zone_id                = \"${data.aws_elb_hosted_zone_id.main.id}\"",
      "    evaluate_target_health = true",
      "  }",
      "}"
    ]
  },
  "aws-data-elb_service_account": {
    "description": "Defines elb_service_account",
    "prefix": "tf-aws-data-elb_service_account",
    "body": [
      "data \"aws_elb_service_account\" \"main\" {}",
      "",
      "resource \"aws_s3_bucket\" \"elb_logs\" {",
      "  bucket = \"my-elb-tf-test-bucket\"",
      "  acl    = \"private\"",
      "",
      "  policy = <<POLICY",
      "{",
      "  \"Id\": \"Policy\",",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"s3:PutObject\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"arn:aws:s3:::my-elb-tf-test-bucket/AWSLogs/*\",",
      "      \"Principal\": {",
      "        \"AWS\": [",
      "          \"${data.aws_elb_service_account.main.arn}\"",
      "        ]",
      "      }",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}",
      "",
      "resource \"aws_elb\" \"bar\" {",
      "  name               = \"my-foobar-terraform-elb\"",
      "  availability_zones = [\"us-west-2a\"]",
      "",
      "  access_logs {",
      "    bucket   = \"${aws_s3_bucket.elb_logs.bucket}\"",
      "    interval = 5",
      "  }",
      "",
      "  listener {",
      "    instance_port     = 8000",
      "    instance_protocol = \"http\"",
      "    lb_port           = 80",
      "    lb_protocol       = \"http\"",
      "  }",
      "}"
    ]
  },
  "aws-data-iam_account_alias": {
    "description": "Defines iam_account_alias",
    "prefix": "tf-aws-data-iam_account_alias",
    "body": [
      "data \"aws_iam_account_alias\" \"current\" {}",
      "",
      "output \"account_id\" {",
      "  value = \"${data.aws_iam_account_alias.current.account_alias}\"",
      "}"
    ]
  },
  "aws-data-iam_group": {
    "description": "Defines iam_group",
    "prefix": "tf-aws-data-iam_group",
    "body": [
      "data \"aws_iam_group\" \"example\" {",
      "  group_name = \"an_example_group_name\"",
      "}"
    ]
  },
  "aws-data-iam_instance_profile": {
    "description": "Defines iam_instance_profile",
    "prefix": "tf-aws-data-iam_instance_profile",
    "body": [
      "data \"aws_iam_instance_profile\" \"example\" {",
      "  name = \"an_example_instance_profile_name\"",
      "}"
    ]
  },
  "aws-data-iam_policy": {
    "description": "Defines iam_policy",
    "prefix": "tf-aws-data-iam_policy",
    "body": [
      "data \"aws_iam_policy\" \"example\" {",
      "  arn = \"arn:aws:iam::123456789012:policy/UsersManageOwnCredentials\"",
      "}"
    ]
  },
  "aws-data-iam_policy_document": {
    "description": "Defines iam_policy_document",
    "prefix": "tf-aws-data-iam_policy_document",
    "body": [
      "data \"aws_iam_policy_document\" \"example\" {",
      "  statement {",
      "    sid = \"1\"",
      "",
      "    actions = [",
      "      \"s3:ListAllMyBuckets\",",
      "      \"s3:GetBucketLocation\",",
      "    ]",
      "",
      "    resources = [",
      "      \"arn:aws:s3:::*\",",
      "    ]",
      "  }",
      "",
      "  statement {",
      "    actions = [",
      "      \"s3:ListBucket\",",
      "    ]",
      "",
      "    resources = [",
      "      \"arn:aws:s3:::${var.s3_bucket_name}\",",
      "    ]",
      "",
      "    condition {",
      "      test     = \"StringLike\"",
      "      variable = \"s3:prefix\"",
      "",
      "      values = [",
      "        \"\",",
      "        \"home/\",",
      "        \"home/&{aws:username}/\",",
      "      ]",
      "    }",
      "  }",
      "",
      "  statement {",
      "    actions = [",
      "      \"s3:*\",",
      "    ]",
      "",
      "    resources = [",
      "      \"arn:aws:s3:::${var.s3_bucket_name}/home/&{aws:username}\",",
      "      \"arn:aws:s3:::${var.s3_bucket_name}/home/&{aws:username}/*\",",
      "    ]",
      "  }",
      "}",
      "",
      "resource \"aws_iam_policy\" \"example\" {",
      "  name   = \"example_policy\"",
      "  path   = \"/\"",
      "  policy = \"${data.aws_iam_policy_document.example.json}\"",
      "}"
    ]
  },
  "aws-data-iam_role": {
    "description": "Defines iam_role",
    "prefix": "tf-aws-data-iam_role",
    "body": [
      "data \"aws_iam_role\" \"example\" {",
      "  name = \"an_example_role_name\"",
      "}"
    ]
  },
  "aws-data-iam_server_certificate": {
    "description": "Defines iam_server_certificate",
    "prefix": "tf-aws-data-iam_server_certificate",
    "body": [
      "data \"aws_iam_server_certificate\" \"my-domain\" {",
      "  name_prefix = \"my-domain.org\"",
      "  latest      = true",
      "}",
      "",
      "resource \"aws_elb\" \"elb\" {",
      "  name = \"my-domain-elb\"",
      "",
      "  listener {",
      "    instance_port      = 8000",
      "    instance_protocol  = \"https\"",
      "    lb_port            = 443",
      "    lb_protocol        = \"https\"",
      "    ssl_certificate_id = \"${data.aws_iam_server_certificate.my-domain.arn}\"",
      "  }",
      "}"
    ]
  },
  "aws-data-iam_user": {
    "description": "Defines iam_user",
    "prefix": "tf-aws-data-iam_user",
    "body": [
      "data \"aws_iam_user\" \"example\" {",
      "  user_name = \"an_example_user_name\"",
      "}"
    ]
  },
  "aws-data-inspector_rules_packages": {
    "description": "Defines inspector_rules_packages",
    "prefix": "tf-aws-data-inspector_rules_packages",
    "body": [
      "# Declare the data source",
      "data \"aws_inspector_rules_packages\" \"rules\" {}",
      "",
      "# e.g. Use in aws_inspector_assessment_template",
      "resource \"aws_inspector_resource_group\" \"group\" {",
      "  tags {",
      "      test = \"test\"",
      "  }",
      "}",
      "",
      "resource \"aws_inspector_assessment_target\" \"assessment\" {",
      "  name               = \"test\"",
      "  resource_group_arn = \"${aws_inspector_resource_group.group.arn}\"",
      "}",
      "",
      "resource \"aws_inspector_assessment_template\" \"assessment\" {",
      "  name       = \"Test\"",
      "  target_arn = \"${aws_inspector_assessment_target.assessment.arn}\"",
      "  duration   = \"60\"",
      "",
      "  rules_package_arns = \"${data.aws_inspector_rules_packages.rules.arns}\"",
      "}"
    ]
  },
  "aws-data-instance": {
    "description": "Defines instance",
    "prefix": "tf-aws-data-instance",
    "body": [
      "data \"aws_instance\" \"foo\" {",
      "  instance_id = \"i-instanceid\"",
      "",
      "  filter {",
      "    name   = \"image-id\"",
      "    values = [\"ami-xxxxxxxx\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"tag:Name\"",
      "    values = [\"instance-name-tag\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-instances": {
    "description": "Defines instances",
    "prefix": "tf-aws-data-instances",
    "body": [
      "data \"aws_instances\" \"test\" {",
      "  instance_tags {",
      "    Role = \"HardWorker\"",
      "  }",
      "  filter {",
      "    name   = \"instance.group-id\"",
      "    values = [\"sg-12345678\"]",
      "  }",
      "}",
      "",
      "resource \"aws_eip\" \"test\" {",
      "  count = \"${length(data.aws_instances.test.ids)}\"",
      "  instance = \"${data.aws_instances.test.ids[count.index]}\"",
      "}"
    ]
  },
  "aws-data-internet_gateway": {
    "description": "Defines internet_gateway",
    "prefix": "tf-aws-data-internet_gateway",
    "body": [
      "variable \"vpc_id\" {}",
      "",
      "data \"aws_internet_gateway\" \"default\" {",
      "  filter {",
      "    name = \"attachment.vpc-id\"",
      "    values = [\"${var.vpc_id}\"]",
      "  }",
      "}"
    ]
  },
  "aws-data-iot_endpoint": {
    "description": "Defines iot_endpoint",
    "prefix": "tf-aws-data-iot_endpoint",
    "body": [
      "data \"aws_iot_endpoint\" \"example\" {}",
      "",
      "resource \"kubernetes_pod\" \"agent\" {",
      "  metadata {",
      "    name = \"my-device\"",
      "  }",
      "  spec {",
      "    container {",
      "      image = \"gcr.io/my-project/image-name\"",
      "      name  = \"image-name\"",
      "",
      "      env = [",
      "        {",
      "          name  = \"IOT_ENDPOINT\"",
      "          value = \"${data.aws_iot_endpoint.example.endpoint_address}\"",
      "        },",
      "      ]",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-data-ip_ranges": {
    "description": "Defines ip_ranges",
    "prefix": "tf-aws-data-ip_ranges",
    "body": [
      "data \"aws_ip_ranges\" \"european_ec2\" {",
      "  regions  = [\"eu-west-1\", \"eu-central-1\"]",
      "  services = [\"ec2\"]",
      "}",
      "",
      "resource \"aws_security_group\" \"from_europe\" {",
      "  name = \"from_europe\"",
      "",
      "  ingress {",
      "    from_port   = \"443\"",
      "    to_port     = \"443\"",
      "    protocol    = \"tcp\"",
      "    cidr_blocks = [\"${data.aws_ip_ranges.european_ec2.cidr_blocks}\"]",
      "  }",
      "",
      "  tags {",
      "    CreateDate = \"${data.aws_ip_ranges.european_ec2.create_date}\"",
      "    SyncToken  = \"${data.aws_ip_ranges.european_ec2.sync_token}\"",
      "  }",
      "}"
    ]
  },
  "aws-data-kinesis_stream": {
    "description": "Defines kinesis_stream",
    "prefix": "tf-aws-data-kinesis_stream",
    "body": [
      "data \"aws_kinesis_stream\" \"stream\" {",
      "  name = \"stream-name\"",
      "}"
    ]
  },
  "aws-data-kms_alias": {
    "description": "Defines kms_alias",
    "prefix": "tf-aws-data-kms_alias",
    "body": [
      "data \"aws_kms_alias\" \"s3\" {",
      "  name = \"alias/aws/s3\"",
      "}"
    ]
  },
  "aws-data-kms_ciphertext": {
    "description": "Defines kms_ciphertext",
    "prefix": "tf-aws-data-kms_ciphertext",
    "body": [
      "resource \"aws_kms_key\" \"oauth_config\" {",
      "  description = \"oauth config\"",
      "  is_enabled = true",
      "}",
      "",
      "data \"aws_kms_ciphertext\" \"oauth\" {",
      "  key_id = \"${aws_kms_key.oauth_config.key_id}\"",
      "  plaintext = <<EOF",
      "{",
      "  \"client_id\": \"e587dbae22222f55da22\",",
      "  \"client_secret\": \"8289575d00000ace55e1815ec13673955721b8a5\"",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-data-kms_key": {
    "description": "Defines kms_key",
    "prefix": "tf-aws-data-kms_key",
    "body": [
      "data \"aws_kms_key\" \"foo\" {",
      "  key_id = \"alias/my-key\"",
      "}",
      "",
      "data \"aws_kms_key\" \"foo\" {",
      "  key_id = \"1234abcd-12ab-34cd-56ef-1234567890ab\"",
      "}",
      "",
      "data \"aws_kms_key\" \"foo\" {",
      "  key_id = \"arn:aws:kms:us-east-1:111122223333:alias/my-key\"",
      "}",
      "",
      "data \"aws_kms_key\" \"foo\" {",
      "  key_id = \"arn:aws:kms:us-east-1:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"",
      "}"
    ]
  },
  "aws-data-kms_secret": {
    "description": "Defines kms_secret",
    "prefix": "tf-aws-data-kms_secret",
    "body": [
      "$ echo -n 'master-password' > plaintext-password",
      "$ aws kms encrypt \\",
      "> --key-id ab123456-c012-4567-890a-deadbeef123 \\",
      "> --plaintext fileb://plaintext-password \\",
      "> --encryption-context foo=bar \\",
      "> --output text --query CiphertextBlob",
      "AQECAHgaPa0J8WadplGCqqVAr4HNvDaFSQ+NaiwIBhmm6qDSFwAAAGIwYAYJKoZIhvcNAQcGoFMwUQIBADBMBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDI+LoLdvYv8l41OhAAIBEIAfx49FFJCLeYrkfMfAw6XlnxP23MmDBdqP8dPp28OoAQ=="
    ]
  },
  "aws-data-lambda_function": {
    "description": "Defines lambda_function",
    "prefix": "tf-aws-data-lambda_function",
    "body": [
      "variable \"function_name\" {",
      "  type = \"string\"",
      "}",
      "",
      "data \"aws_lambda_function\" \"existing\" {",
      "  function_name = \"${var.function_name}\"",
      "}"
    ]
  },
  "aws-data-lambda_invocation": {
    "description": "Defines lambda_invocation",
    "prefix": "tf-aws-data-lambda_invocation",
    "body": [
      "data \"aws_lambda_invocation\" \"example\" {",
      "  function_name = \"${aws_lambda_function.lambda_function_test.function_name}\"",
      "",
      "  input = <<JSON",
      "{",
      "  \"key1\": \"value1\",",
      "  \"key2\": \"value2\"",
      "}",
      "JSON",
      "",
      "}",
      "",
      "output \"result_entry\" {",
      "  value = \"${data.aws_lambda_invocation.result_map[\"key1\"]}\"",
      "}",
      "",
      "output \"result\" {",
      "  value = \"${data.aws_lambda_invocation.result}\"",
      "}"
    ]
  },
  "aws-data-lb": {
    "description": "Defines lb",
    "prefix": "tf-aws-data-lb",
    "body": [
      "variable \"lb_arn\" {",
      "  type    = \"string\"",
      "  default = \"\"",
      "}",
      "",
      "variable \"lb_name\" {",
      "  type    = \"string\"",
      "  default = \"\"",
      "}",
      "",
      "data \"aws_lb\" \"test\" {",
      "  arn  = \"${var.lb_arn}\"",
      "  name = \"${var.lb_name}\"",
      "}"
    ]
  },
  "aws-data-lb_listener": {
    "description": "Defines lb_listener",
    "prefix": "tf-aws-data-lb_listener",
    "body": [
      "# get listener from listener arn",
      "",
      "variable \"listener_arn\" {",
      "  type = \"string\"",
      "}",
      "",
      "data \"aws_lb_listener\" \"listener\" {",
      "  arn = \"${var.listener_arn}\"",
      "}",
      "",
      "# get listener from load_balancer_arn and port",
      "",
      "data \"aws_lb\" \"selected\" {",
      "  name = \"default-public\"",
      "}",
      "",
      "data \"aws_lb_listener\" \"selected443\" {",
      "  load_balancer_arn = \"${data.aws_lb.selected.arn}\"",
      "  port = 443",
      "}"
    ]
  },
  "aws-data-lb_target_group": {
    "description": "Defines lb_target_group",
    "prefix": "tf-aws-data-lb_target_group",
    "body": [
      "variable \"lb_tg_arn\" {",
      "  type    = \"string\"",
      "  default = \"\"",
      "}",
      "",
      "variable \"lb_tg_name\" {",
      "  type    = \"string\"",
      "  default = \"\"",
      "}",
      "",
      "data \"aws_lb_target_group\" \"test\" {",
      "  arn  = \"${var.lb_tg_arn}\"",
      "  name = \"${var.lb_tg_name}\"",
      "}"
    ]
  },
  "aws-data-mq_broker": {
    "description": "Defines mq_broker",
    "prefix": "tf-aws-data-mq_broker",
    "body": [
      "variable \"broker_id\" {",
      "  type    = \"string\"",
      "  default = \"\"",
      "}",
      "",
      "variable \"broker_name\" {",
      "  type    = \"string\"",
      "  default = \"\"",
      "}",
      "",
      "data \"aws_mq_broker\" \"by_id\" {",
      "  broker_id = \"${var.broker_id}\"",
      "}",
      "",
      "data \"aws_mq_broker\" \"by_name\" {",
      "  broker_name = \"${var.broker_name}\"",
      "}"
    ]
  },
  "aws-data-nat_gateway": {
    "description": "Defines nat_gateway",
    "prefix": "tf-aws-data-nat_gateway",
    "body": [
      "variable \"subnet_id\" {}",
      "",
      "data \"aws_nat_gateway\" \"default\" {",
      "  subnet_id = \"${aws_subnet.public.id}\"",
      "}"
    ]
  },
  "aws-data-network_interface": {
    "description": "Defines network_interface",
    "prefix": "tf-aws-data-network_interface",
    "body": [
      "data \"aws_network_interface\" \"bar\" {",
      "  id = \"eni-01234567\"",
      "}"
    ]
  },
  "aws-data-partition": {
    "description": "Defines partition",
    "prefix": "tf-aws-data-partition",
    "body": [
      "data \"aws_partition\" \"current\" {}",
      "",
      "data \"aws_iam_policy_document\" \"s3_policy\" {",
      "  statement {",
      "    sid = \"1\"",
      "",
      "    actions = [",
      "      \"s3:ListBucket\",",
      "    ]",
      "",
      "    resources = [",
      "      \"arn:${data.aws_partition.current.partition}:s3:::my-bucket\",",
      "    ]",
      "  }",
      "}"
    ]
  },
  "aws-data-prefix_list": {
    "description": "Defines prefix_list",
    "prefix": "tf-aws-data-prefix_list",
    "body": [
      "resource \"aws_vpc_endpoint\" \"private_s3\" {",
      "  vpc_id       = \"${aws_vpc.foo.id}\"",
      "  service_name = \"com.amazonaws.us-west-2.s3\"",
      "}",
      "",
      "data \"aws_prefix_list\" \"private_s3\" {",
      "  prefix_list_id = \"${aws_vpc_endpoint.private_s3.prefix_list_id}\"",
      "}",
      "",
      "resource \"aws_network_acl\" \"bar\" {",
      "  vpc_id = \"${aws_vpc.foo.id}\"",
      "}",
      "",
      "resource \"aws_network_acl_rule\" \"private_s3\" {",
      "  network_acl_id = \"${aws_network_acl.bar.id}\"",
      "  rule_number    = 200",
      "  egress         = false",
      "  protocol       = \"tcp\"",
      "  rule_action    = \"allow\"",
      "  cidr_block     = \"${data.aws_prefix_list.private_s3.cidr_blocks[0]}\"",
      "  from_port      = 443",
      "  to_port        = 443",
      "}"
    ]
  },
  "aws-data-rds_cluster": {
    "description": "Defines rds_cluster",
    "prefix": "tf-aws-data-rds_cluster",
    "body": [
      "data \"aws_rds_cluster\" \"clusterName\" {",
      "  cluster_identifier = \"clusterName\"",
      "}"
    ]
  },
  "aws-data-redshift_cluster": {
    "description": "Defines redshift_cluster",
    "prefix": "tf-aws-data-redshift_cluster",
    "body": [
      "data \"aws_redshift_cluster\" \"test_cluster\" {",
      "  cluster_identifier = \"test-cluster\"",
      "}",
      "",
      "resource \"aws_kinesis_firehose_delivery_stream\" \"test_stream\" {",
      "  name        = \"terraform-kinesis-firehose-test-stream\"",
      "  destination = \"redshift\"",
      "",
      "  s3_configuration {",
      "    role_arn           = \"${aws_iam_role.firehose_role.arn}\"",
      "    bucket_arn         = \"${aws_s3_bucket.bucket.arn}\"",
      "    buffer_size        = 10",
      "    buffer_interval    = 400",
      "    compression_format = \"GZIP\"",
      "  }",
      "",
      "  redshift_configuration {",
      "    role_arn           = \"${aws_iam_role.firehose_role.arn}\"",
      "    cluster_jdbcurl    = \"jdbc:redshift://${data.aws_redshift_cluster.test_cluster.endpoint}/${data.aws_redshift_cluster.test_cluster.database_name}\"",
      "    username           = \"testuser\"",
      "    password           = \"T3stPass\"",
      "    data_table_name    = \"test-table\"",
      "    copy_options       = \"delimiter '|'\" # the default delimiter",
      "    data_table_columns = \"test-col\"",
      "  }",
      "}"
    ]
  },
  "aws-data-redshift_service_account": {
    "description": "Defines redshift_service_account",
    "prefix": "tf-aws-data-redshift_service_account",
    "body": [
      "data \"aws_redshift_service_account\" \"main\" {}",
      "",
      "resource \"aws_s3_bucket\" \"bucket\" {",
      "  bucket        = \"tf-redshift-logging-test-bucket\"",
      "  force_destroy = true",
      "",
      "  policy = <<EOF",
      "{",
      "\t\"Version\": \"2008-10-17\",",
      "\t\"Statement\": [",
      "\t\t{",
      "        \t\t\t\"Sid\": \"Put bucket policy needed for audit logging\",",
      "        \t\t\t\"Effect\": \"Allow\",",
      "        \t\t\t\"Principal\": {",
      "\t\t\t\t\t\t\"AWS\": \"${data.aws_redshift_service_account.main.arn}\"",
      "        \t\t\t},",
      "        \t\t\t\"Action\": \"s3:PutObject\",",
      "        \t\t\t\"Resource\": \"arn:aws:s3:::tf-redshift-logging-test-bucket/*\"",
      "        \t\t},",
      "        \t\t{",
      "        \t\t\t\"Sid\": \"Get bucket policy needed for audit logging \",",
      "        \t\t\t\"Effect\": \"Allow\",",
      "        \t\t\t\"Principal\": {",
      "\t\t\t\t\t\t\"AWS\": \"${data.aws_redshift_service_account.main.arn}\"",
      "        \t\t\t},",
      "        \t\t\t\"Action\": \"s3:GetBucketAcl\",",
      "        \t\t\t\"Resource\": \"arn:aws:s3:::tf-redshift-logging-test-bucket\"",
      "        \t\t}",
      "\t]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-data-region": {
    "description": "Defines region",
    "prefix": "tf-aws-data-region",
    "body": [
      "data \"aws_region\" \"current\" {}"
    ]
  },
  "aws-data-route53_zone": {
    "description": "Defines route53_zone",
    "prefix": "tf-aws-data-route53_zone",
    "body": [
      "data \"aws_route53_zone\" \"selected\" {",
      "  name         = \"test.com.\"",
      "  private_zone = true",
      "}",
      "",
      "resource \"aws_route53_record\" \"www\" {",
      "  zone_id = \"${data.aws_route53_zone.selected.zone_id}\"",
      "  name    = \"www.${data.aws_route53_zone.selected.name}\"",
      "  type    = \"A\"",
      "  ttl     = \"300\"",
      "  records = [\"10.0.0.1\"]",
      "}"
    ]
  },
  "aws-data-route_table": {
    "description": "Defines route_table",
    "prefix": "tf-aws-data-route_table",
    "body": [
      "variable \"subnet_id\" {}",
      "",
      "data \"aws_route_table\" \"selected\" {",
      "  subnet_id = \"${var.subnet_id}\"",
      "}",
      "",
      "resource \"aws_route\" \"route\" {",
      "  route_table_id            = \"${data.aws_route_table.selected.id}\"",
      "  destination_cidr_block    = \"10.0.1.0/22\"",
      "  vpc_peering_connection_id = \"pcx-45ff3dc1\"",
      "}"
    ]
  },
  "aws-data-s3_bucket": {
    "description": "Defines s3_bucket",
    "prefix": "tf-aws-data-s3_bucket",
    "body": [
      "data \"aws_s3_bucket\" \"selected\" {",
      "  bucket = \"bucket.test.com\"",
      "}",
      "",
      "data \"aws_route53_zone\" \"test_zone\" {",
      "  name         = \"test.com.\"",
      "}",
      "",
      "resource \"aws_route53_record\" \"example\" {",
      "  zone_id   = \"${data.aws_route53_zone.test_zone.id}\"",
      "  name      = \"bucket\"",
      "  type      = \"A\"",
      "",
      "  alias {",
      "    name    = \"${data.aws_s3_bucket.selected.website_domain}\"",
      "    zone_id = \"${data.aws_s3_bucket.selected.hosted_zone_id}\"",
      "  }",
      "}"
    ]
  },
  "aws-data-s3_bucket_object": {
    "description": "Defines s3_bucket_object",
    "prefix": "tf-aws-data-s3_bucket_object",
    "body": [
      "data \"aws_s3_bucket_object\" \"bootstrap_script\" {",
      "  bucket = \"ourcorp-deploy-config\"",
      "  key    = \"ec2-bootstrap-script.sh\"",
      "}",
      "",
      "resource \"aws_instance\" \"example\" {",
      "  instance_type = \"t2.micro\"",
      "  ami           = \"ami-2757f631\"",
      "  user_data     = \"${data.aws_s3_bucket_object.bootstrap_script.body}\"",
      "}"
    ]
  },
  "aws-data-secretsmanager_secret": {
    "description": "Defines secretsmanager_secret",
    "prefix": "tf-aws-data-secretsmanager_secret",
    "body": [
      "data \"aws_secretsmanager_secret\" \"by-arn\" {",
      "  arn = \"arn:aws:secretsmanager:us-east-1:123456789012:secret:example-123456\"",
      "}"
    ]
  },
  "aws-data-secretsmanager_secret_version": {
    "description": "Defines secretsmanager_secret_version",
    "prefix": "tf-aws-data-secretsmanager_secret_version",
    "body": [
      "data \"aws_secretsmanager_secret_version\" \"example\" {",
      "  secret_id = \"${data.aws_secretsmanager_secret.example.id}\"",
      "}"
    ]
  },
  "aws-data-security_group": {
    "description": "Defines security_group",
    "prefix": "tf-aws-data-security_group",
    "body": [
      "variable \"security_group_id\" {}",
      "",
      "data \"aws_security_group\" \"selected\" {",
      "  id = \"${var.security_group_id}\"",
      "}",
      "",
      "resource \"aws_subnet\" \"subnet\" {",
      "  vpc_id     = \"${data.aws_security_group.selected.vpc_id}\"",
      "  cidr_block = \"10.0.1.0/24\"",
      "}"
    ]
  },
  "aws-data-sns_topic": {
    "description": "Defines sns_topic",
    "prefix": "tf-aws-data-sns_topic",
    "body": [
      "data \"aws_sns_topic\" \"example\" {",
      "  name = \"an_example_topic\"",
      "}"
    ]
  },
  "aws-data-sqs_queue": {
    "description": "Defines sqs_queue",
    "prefix": "tf-aws-data-sqs_queue",
    "body": [
      "data \"aws_sqs_queue\" \"example\" {",
      "  name = \"queue\"",
      "}"
    ]
  },
  "aws-data-ssm_parameter": {
    "description": "Defines ssm_parameter",
    "prefix": "tf-aws-data-ssm_parameter",
    "body": [
      "data \"aws_ssm_parameter\" \"foo\" {",
      "  name  = \"foo\"",
      "}"
    ]
  },
  "aws-data-subnet": {
    "description": "Defines subnet",
    "prefix": "tf-aws-data-subnet",
    "body": [
      "variable \"subnet_id\" {}",
      "",
      "data \"aws_subnet\" \"selected\" {",
      "  id = \"${var.subnet_id}\"",
      "}",
      "",
      "resource \"aws_security_group\" \"subnet\" {",
      "  vpc_id = \"${data.aws_subnet.selected.vpc_id}\"",
      "",
      "  ingress {",
      "    cidr_blocks = [\"${data.aws_subnet.selected.cidr_block}\"]",
      "    from_port   = 80",
      "    to_port     = 80",
      "    protocol    = \"tcp\"",
      "  }",
      "}"
    ]
  },
  "aws-data-subnet_ids": {
    "description": "Defines subnet_ids",
    "prefix": "tf-aws-data-subnet_ids",
    "body": [
      "data \"aws_subnet_ids\" \"example\" {",
      "  vpc_id = \"${var.vpc_id}\"",
      "}",
      "",
      "data \"aws_subnet\" \"example\" {",
      "  count = \"${length(data.aws_subnet_ids.example.ids)}\"",
      "  id = \"${data.aws_subnet_ids.example.ids[count.index]}\"",
      "}",
      "",
      "output \"subnet_cidr_blocks\" {",
      "  value = [\"${data.aws_subnet.example.*.cidr_block}\"]",
      "}"
    ]
  },
  "aws-data-vpc": {
    "description": "Defines vpc",
    "prefix": "tf-aws-data-vpc",
    "body": [
      "variable \"vpc_id\" {}",
      "",
      "data \"aws_vpc\" \"selected\" {",
      "  id = \"${var.vpc_id}\"",
      "}",
      "",
      "resource \"aws_subnet\" \"example\" {",
      "  vpc_id            = \"${data.aws_vpc.selected.id}\"",
      "  availability_zone = \"us-west-2a\"",
      "  cidr_block        = \"${cidrsubnet(data.aws_vpc.selected.cidr_block, 4, 1)}\"",
      "}"
    ]
  },
  "aws-data-vpc_endpoint": {
    "description": "Defines vpc_endpoint",
    "prefix": "tf-aws-data-vpc_endpoint",
    "body": [
      "# Declare the data source",
      "data \"aws_vpc_endpoint\" \"s3\" {",
      "  vpc_id       = \"${aws_vpc.foo.id}\"",
      "  service_name = \"com.amazonaws.us-west-2.s3\"",
      "}",
      "",
      "resource \"aws_vpc_endpoint_route_table_association\" \"private_s3\" {",
      "  vpc_endpoint_id = \"${data.aws_vpc_endpoint.s3.id}\"",
      "  route_table_id  = \"${aws_route_table.private.id}\"",
      "}"
    ]
  },
  "aws-data-vpc_endpoint_service": {
    "description": "Defines vpc_endpoint_service",
    "prefix": "tf-aws-data-vpc_endpoint_service",
    "body": [
      "# Declare the data source",
      "data \"aws_vpc_endpoint_service\" \"s3\" {",
      "  service = \"s3\"",
      "}",
      "",
      "# Create a VPC",
      "resource \"aws_vpc\" \"foo\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "# Create a VPC endpoint",
      "resource \"aws_vpc_endpoint\" \"ep\" {",
      "  vpc_id       = \"${aws_vpc.foo.id}\"",
      "  service_name = \"${data.aws_vpc_endpoint_service.s3.service_name}\"",
      "}"
    ]
  },
  "aws-data-vpc_peering_connection": {
    "description": "Defines vpc_peering_connection",
    "prefix": "tf-aws-data-vpc_peering_connection",
    "body": [
      "# Declare the data source",
      "data \"aws_vpc_peering_connection\" \"pc\" {",
      "  vpc_id          = \"${aws_vpc.foo.id}\"",
      "  peer_cidr_block = \"10.0.1.0/22\"",
      "}",
      "",
      "# Create a route table",
      "resource \"aws_route_table\" \"rt\" {",
      "  vpc_id = \"${aws_vpc.foo.id}\"",
      "}",
      "",
      "# Create a route",
      "resource \"aws_route\" \"r\" {",
      "  route_table_id            = \"${aws_route_table.rt.id}\"",
      "  destination_cidr_block    = \"${data.aws_vpc_peering_connection.pc.peer_cidr_block}\"",
      "  vpc_peering_connection_id = \"${data.aws_vpc_peering_connection.pc.id}\"",
      "}"
    ]
  },
  "aws-data-vpn_gateway": {
    "description": "Defines vpn_gateway",
    "prefix": "tf-aws-data-vpn_gateway",
    "body": [
      "data \"aws_vpn_gateway\" \"selected\" {",
      "  filter {",
      "    name = \"tag:Name\"",
      "    values = [\"vpn-gw\"]",
      "  }",
      "}",
      "",
      "output \"vpn_gateway_id\" {",
      "  value = \"${data.aws_vpn_gateway.selected.id}\"",
      "}"
    ]
  },
  "aws-resource-acm_certificate": {
    "description": "Defines acm_certificate",
    "prefix": "tf-aws-resource-acm_certificate",
    "body": [
      "resource \"aws_acm_certificate\" \"cert\" {",
      "  domain_name = \"example.com\"",
      "  validation_method = \"DNS\"",
      "  tags {",
      "    Environment = \"test\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-acm_certificate_validation": {
    "description": "Defines acm_certificate_validation",
    "prefix": "tf-aws-resource-acm_certificate_validation",
    "body": [
      "resource \"aws_acm_certificate\" \"cert\" {",
      "  domain_name = \"example.com\"",
      "  validation_method = \"DNS\"",
      "}",
      "",
      "data \"aws_route53_zone\" \"zone\" {",
      "  name = \"example.com.\"",
      "  private_zone = false",
      "}",
      "",
      "resource \"aws_route53_record\" \"cert_validation\" {",
      "  name = \"${aws_acm_certificate.cert.domain_validation_options.0.resource_record_name}\"",
      "  type = \"${aws_acm_certificate.cert.domain_validation_options.0.resource_record_type}\"",
      "  zone_id = \"${data.aws_route53_zone.zone.id}\"",
      "  records = [\"${aws_acm_certificate.cert.domain_validation_options.0.resource_record_value}\"]",
      "  ttl = 60",
      "}",
      "",
      "resource \"aws_acm_certificate_validation\" \"cert\" {",
      "  certificate_arn = \"${aws_acm_certificate.cert.arn}\"",
      "  validation_record_fqdns = [\"${aws_route53_record.cert_validation.fqdn}\"]",
      "}",
      "",
      "resource \"aws_lb_listener\" \"front_end\" {",
      "  # [...]",
      "  certificate_arn   = \"${aws_acm_certificate_validation.cert.certificate_arn}\"",
      "}"
    ]
  },
  "aws-resource-acmpca_certificate_authority": {
    "description": "Defines acmpca_certificate_authority",
    "prefix": "tf-aws-resource-acmpca_certificate_authority",
    "body": [
      "resource \"aws_acmpca_certificate_authority\" \"example\" {",
      "  certificate_authority_configuration {",
      "    key_algorithm     = \"RSA_4096\"",
      "    signing_algorithm = \"SHA512WITHRSA\"",
      "",
      "    subject {",
      "      common_name = \"example.com\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-ami": {
    "description": "Defines ami",
    "prefix": "tf-aws-resource-ami",
    "body": [
      "# Create an AMI that will start a machine whose root device is backed by",
      "# an EBS volume populated from a snapshot. It is assumed that such a snapshot",
      "# already exists with the id \"snap-xxxxxxxx\".",
      "resource \"aws_ami\" \"example\" {",
      "    name = \"terraform-example\"",
      "    virtualization_type = \"hvm\"",
      "    root_device_name = \"/dev/xvda\"",
      "",
      "    ebs_block_device {",
      "        device_name = \"/dev/xvda\"",
      "        snapshot_id = \"snap-xxxxxxxx\"",
      "        volume_size = 8",
      "    }",
      "}"
    ]
  },
  "aws-resource-ami_copy": {
    "description": "Defines ami_copy",
    "prefix": "tf-aws-resource-ami_copy",
    "body": [
      "resource \"aws_ami_copy\" \"example\" {",
      "  name              = \"terraform-example\"",
      "  description       = \"A copy of ami-xxxxxxxx\"",
      "  source_ami_id     = \"ami-xxxxxxxx\"",
      "  source_ami_region = \"us-west-1\"",
      "",
      "  tags {",
      "    Name = \"HelloWorld\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ami_from_instance": {
    "description": "Defines ami_from_instance",
    "prefix": "tf-aws-resource-ami_from_instance",
    "body": [
      "resource \"aws_ami_from_instance\" \"example\" {",
      "  name               = \"terraform-example\"",
      "  source_instance_id = \"i-xxxxxxxx\"",
      "}"
    ]
  },
  "aws-resource-ami_launch_permission": {
    "description": "Defines ami_launch_permission",
    "prefix": "tf-aws-resource-ami_launch_permission",
    "body": [
      "resource \"aws_ami_launch_permission\" \"example\" {",
      "  image_id   = \"ami-12345678\"",
      "  account_id = \"123456789012\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_account": {
    "description": "Defines api_gateway_account",
    "prefix": "tf-aws-resource-api_gateway_account",
    "body": [
      "resource \"aws_api_gateway_account\" \"demo\" {",
      "  cloudwatch_role_arn = \"${aws_iam_role.cloudwatch.arn}\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"cloudwatch\" {",
      "  name = \"api_gateway_cloudwatch_global\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Sid\": \"\",",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"Service\": \"apigateway.amazonaws.com\"",
      "      },",
      "      \"Action\": \"sts:AssumeRole\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"cloudwatch\" {",
      "  name = \"default\"",
      "  role = \"${aws_iam_role.cloudwatch.id}\"",
      "",
      "  policy = <<EOF",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": [",
      "        {",
      "            \"Effect\": \"Allow\",",
      "            \"Action\": [",
      "                \"logs:CreateLogGroup\",",
      "                \"logs:CreateLogStream\",",
      "                \"logs:DescribeLogGroups\",",
      "                \"logs:DescribeLogStreams\",",
      "                \"logs:PutLogEvents\",",
      "                \"logs:GetLogEvents\",",
      "                \"logs:FilterLogEvents\"",
      "            ],",
      "            \"Resource\": \"*\"",
      "        }",
      "    ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-api_gateway_api_key": {
    "description": "Defines api_gateway_api_key",
    "prefix": "tf-aws-resource-api_gateway_api_key",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"MyDemoAPI\" {",
      "  name = \"MyDemoAPI\"",
      "}",
      "",
      "resource \"aws_api_gateway_api_key\" \"MyDemoApiKey\" {",
      "  name = \"demo\"",
      "",
      "  stage_key {",
      "    rest_api_id = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "    stage_name  = \"${aws_api_gateway_deployment.MyDemoDeployment.stage_name}\"",
      "  }",
      "}",
      "",
      "resource \"aws_api_gateway_deployment\" \"MyDemoDeployment\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  stage_name  = \"test\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_authorizer": {
    "description": "Defines api_gateway_authorizer",
    "prefix": "tf-aws-resource-api_gateway_authorizer",
    "body": [
      "resource \"aws_api_gateway_authorizer\" \"demo\" {",
      "  name                   = \"demo\"",
      "  rest_api_id            = \"${aws_api_gateway_rest_api.demo.id}\"",
      "  authorizer_uri         = \"${aws_lambda_function.authorizer.invoke_arn}\"",
      "  authorizer_credentials = \"${aws_iam_role.invocation_role.arn}\"",
      "}",
      "",
      "resource \"aws_api_gateway_rest_api\" \"demo\" {",
      "  name = \"auth-demo\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"invocation_role\" {",
      "  name = \"api_gateway_auth_invocation\"",
      "  path = \"/\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"apigateway.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"invocation_policy\" {",
      "  name = \"default\"",
      "  role = \"${aws_iam_role.invocation_role.id}\"",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"lambda:InvokeFunction\",",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"${aws_lambda_function.authorizer.arn}\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role\" \"lambda\" {",
      "  name = \"demo-lambda\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"lambda.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_lambda_function\" \"authorizer\" {",
      "  filename         = \"lambda-function.zip\"",
      "  source_code_hash = \"${base64sha256(file(\"lambda-function.zip\"))}\"",
      "  function_name    = \"api_gateway_authorizer\"",
      "  role             = \"${aws_iam_role.lambda.arn}\"",
      "  handler          = \"exports.example\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_base_path_mapping": {
    "description": "Defines api_gateway_base_path_mapping",
    "prefix": "tf-aws-resource-api_gateway_base_path_mapping",
    "body": [
      "resource \"aws_api_gateway_deployment\" \"example\" {",
      "  # See aws_api_gateway_rest_api_docs for how to create this",
      "  rest_api_id = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  stage_name  = \"live\"",
      "}",
      "",
      "resource \"aws_api_gateway_domain_name\" \"example\" {",
      "  domain_name = \"example.com\"",
      "",
      "  certificate_name        = \"example-api\"",
      "  certificate_body        = \"${file(\"${path.module}/example.com/example.crt\")}\"",
      "  certificate_chain       = \"${file(\"${path.module}/example.com/ca.crt\")}\"",
      "  certificate_private_key = \"${file(\"${path.module}/example.com/example.key\")}\"",
      "}",
      "",
      "resource \"aws_api_gateway_base_path_mapping\" \"test\" {",
      "  api_id      = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  stage_name  = \"${aws_api_gateway_deployment.example.stage_name}\"",
      "  domain_name = \"${aws_api_gateway_domain_name.example.domain_name}\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_client_certificate": {
    "description": "Defines api_gateway_client_certificate",
    "prefix": "tf-aws-resource-api_gateway_client_certificate",
    "body": [
      "resource \"aws_api_gateway_client_certificate\" \"demo\" {",
      "  description = \"My client certificate\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_deployment": {
    "description": "Defines api_gateway_deployment",
    "prefix": "tf-aws-resource-api_gateway_deployment",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"MyDemoAPI\" {",
      "  name        = \"MyDemoAPI\"",
      "  description = \"This is my API for demonstration purposes\"",
      "}",
      "",
      "resource \"aws_api_gateway_resource\" \"MyDemoResource\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  parent_id   = \"${aws_api_gateway_rest_api.MyDemoAPI.root_resource_id}\"",
      "  path_part   = \"test\"",
      "}",
      "",
      "resource \"aws_api_gateway_method\" \"MyDemoMethod\" {",
      "  rest_api_id   = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  resource_id   = \"${aws_api_gateway_resource.MyDemoResource.id}\"",
      "  http_method   = \"GET\"",
      "  authorization = \"NONE\"",
      "}",
      "",
      "resource \"aws_api_gateway_integration\" \"MyDemoIntegration\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  resource_id = \"${aws_api_gateway_resource.MyDemoResource.id}\"",
      "  http_method = \"${aws_api_gateway_method.MyDemoMethod.http_method}\"",
      "  type        = \"MOCK\"",
      "}",
      "",
      "resource \"aws_api_gateway_deployment\" \"MyDemoDeployment\" {",
      "  depends_on = [\"aws_api_gateway_integration.MyDemoIntegration\"]",
      "",
      "  rest_api_id = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  stage_name  = \"test\"",
      "",
      "  variables = {",
      "    \"answer\" = \"42\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-api_gateway_documentation_part": {
    "description": "Defines api_gateway_documentation_part",
    "prefix": "tf-aws-resource-api_gateway_documentation_part",
    "body": [
      "resource \"aws_api_gateway_documentation_part\" \"example\" {",
      "  location {",
      "    type = \"METHOD\"",
      "    method = \"GET\"",
      "    path = \"/example\"",
      "  }",
      "  properties = \"{\\\"description\\\":\\\"Example description\\\"}\"",
      "  rest_api_id = \"${aws_api_gateway_rest_api.example.id}\"",
      "}",
      "",
      "resource \"aws_api_gateway_rest_api\" \"example\" {",
      "  name = \"example_api\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_documentation_version": {
    "description": "Defines api_gateway_documentation_version",
    "prefix": "tf-aws-resource-api_gateway_documentation_version",
    "body": [
      "resource \"aws_api_gateway_documentation_version\" \"example\" {",
      "  version = \"example_version\"",
      "  rest_api_id = \"${aws_api_gateway_rest_api.example.id}\"",
      "  description = \"Example description\"",
      "  depends_on = [\"aws_api_gateway_documentation_part.example\"]",
      "}",
      "",
      "resource \"aws_api_gateway_rest_api\" \"example\" {",
      "  name = \"example_api\"",
      "}",
      "",
      "resource \"aws_api_gateway_documentation_part\" \"example\" {",
      "  location {",
      "    type = \"API\"",
      "  }",
      "  properties = \"{\\\"description\\\":\\\"Example\\\"}\"",
      "  rest_api_id = \"${aws_api_gateway_rest_api.example.id}\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_domain_name": {
    "description": "Defines api_gateway_domain_name",
    "prefix": "tf-aws-resource-api_gateway_domain_name",
    "body": [
      "resource \"aws_api_gateway_domain_name\" \"example\" {",
      "  domain_name = \"api.example.com\"",
      "",
      "  certificate_name        = \"example-api\"",
      "  certificate_body        = \"${file(\"${path.module}/example.com/example.crt\")}\"",
      "  certificate_chain       = \"${file(\"${path.module}/example.com/ca.crt\")}\"",
      "  certificate_private_key = \"${file(\"${path.module}/example.com/example.key\")}\"",
      "}",
      "",
      "# Example DNS record using Route53.",
      "# Route53 is not specifically required; any DNS host can be used.",
      "resource \"aws_route53_record\" \"example\" {",
      "  zone_id = \"${aws_route53_zone.example.id}\" # See aws_route53_zone for how to create this",
      "",
      "  name = \"${aws_api_gateway_domain_name.example.domain_name}\"",
      "  type = \"A\"",
      "",
      "  alias {",
      "    name                   = \"${aws_api_gateway_domain_name.example.cloudfront_domain_name}\"",
      "    zone_id                = \"${aws_api_gateway_domain_name.example.cloudfront_zone_id}\"",
      "    evaluate_target_health = true",
      "  }",
      "}"
    ]
  },
  "aws-resource-api_gateway_gateway_response": {
    "description": "Defines api_gateway_gateway_response",
    "prefix": "tf-aws-resource-api_gateway_gateway_response",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"main\" {",
      "  name = \"MyDemoAPI\"",
      "}",
      "",
      "resource \"aws_api_gateway_gateway_response\" \"test\" {",
      "  rest_api_id   = \"${aws_api_gateway_rest_api.main.id}\"",
      "  status_code   = \"401\"",
      "  response_type = \"UNAUTHORIZED\"",
      "",
      "  response_templates = {",
      "    \"application/json\" = \"{'message':$context.error.messageString}\"",
      "  }",
      "",
      "  response_parameters = {",
      "    \"gatewayresponse.header.Authorization\" = \"'Basic'\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-api_gateway_integration": {
    "description": "Defines api_gateway_integration",
    "prefix": "tf-aws-resource-api_gateway_integration",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"MyDemoAPI\" {",
      "  name        = \"MyDemoAPI\"",
      "  description = \"This is my API for demonstration purposes\"",
      "}",
      "",
      "resource \"aws_api_gateway_resource\" \"MyDemoResource\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  parent_id   = \"${aws_api_gateway_rest_api.MyDemoAPI.root_resource_id}\"",
      "  path_part   = \"mydemoresource\"",
      "}",
      "",
      "resource \"aws_api_gateway_method\" \"MyDemoMethod\" {",
      "  rest_api_id   = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  resource_id   = \"${aws_api_gateway_resource.MyDemoResource.id}\"",
      "  http_method   = \"GET\"",
      "  authorization = \"NONE\"",
      "}",
      "",
      "resource \"aws_api_gateway_integration\" \"MyDemoIntegration\" {",
      "  rest_api_id          = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  resource_id          = \"${aws_api_gateway_resource.MyDemoResource.id}\"",
      "  http_method          = \"${aws_api_gateway_method.MyDemoMethod.http_method}\"",
      "  type                 = \"MOCK\"",
      "  cache_key_parameters = [\"method.request.path.param\"]",
      "  cache_namespace      = \"foobar\"",
      "",
      "  request_parameters = {",
      "    \"integration.request.header.X-Authorization\" = \"'static'\"",
      "  }",
      "",
      "  # Transforms the incoming XML request to JSON",
      "  request_templates {",
      "    \"application/xml\" = <<EOF",
      "{",
      "   \"body\" : $input.json('$')",
      "}",
      "EOF",
      "  }",
      "}"
    ]
  },
  "aws-resource-api_gateway_integration_response": {
    "description": "Defines api_gateway_integration_response",
    "prefix": "tf-aws-resource-api_gateway_integration_response",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"MyDemoAPI\" {",
      "  name        = \"MyDemoAPI\"",
      "  description = \"This is my API for demonstration purposes\"",
      "}",
      "",
      "resource \"aws_api_gateway_resource\" \"MyDemoResource\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  parent_id   = \"${aws_api_gateway_rest_api.MyDemoAPI.root_resource_id}\"",
      "  path_part   = \"mydemoresource\"",
      "}",
      "",
      "resource \"aws_api_gateway_method\" \"MyDemoMethod\" {",
      "  rest_api_id   = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  resource_id   = \"${aws_api_gateway_resource.MyDemoResource.id}\"",
      "  http_method   = \"GET\"",
      "  authorization = \"NONE\"",
      "}",
      "",
      "resource \"aws_api_gateway_integration\" \"MyDemoIntegration\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  resource_id = \"${aws_api_gateway_resource.MyDemoResource.id}\"",
      "  http_method = \"${aws_api_gateway_method.MyDemoMethod.http_method}\"",
      "  type        = \"MOCK\"",
      "}",
      "",
      "resource \"aws_api_gateway_method_response\" \"200\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  resource_id = \"${aws_api_gateway_resource.MyDemoResource.id}\"",
      "  http_method = \"${aws_api_gateway_method.MyDemoMethod.http_method}\"",
      "  status_code = \"200\"",
      "}",
      "",
      "resource \"aws_api_gateway_integration_response\" \"MyDemoIntegrationResponse\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  resource_id = \"${aws_api_gateway_resource.MyDemoResource.id}\"",
      "  http_method = \"${aws_api_gateway_method.MyDemoMethod.http_method}\"",
      "  status_code = \"${aws_api_gateway_method_response.200.status_code}\"",
      "",
      "  # Transforms the backend JSON response to XML",
      "  response_templates {",
      "    \"application/xml\" = <<EOF",
      "#set($inputRoot = $input.path('$'))",
      "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "<message>",
      "    $inputRoot.body",
      "</message>",
      "EOF",
      "  }",
      "}"
    ]
  },
  "aws-resource-api_gateway_method": {
    "description": "Defines api_gateway_method",
    "prefix": "tf-aws-resource-api_gateway_method",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"MyDemoAPI\" {",
      "  name        = \"MyDemoAPI\"",
      "  description = \"This is my API for demonstration purposes\"",
      "}",
      "",
      "resource \"aws_api_gateway_resource\" \"MyDemoResource\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  parent_id   = \"${aws_api_gateway_rest_api.MyDemoAPI.root_resource_id}\"",
      "  path_part   = \"mydemoresource\"",
      "}",
      "",
      "resource \"aws_api_gateway_method\" \"MyDemoMethod\" {",
      "  rest_api_id   = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  resource_id   = \"${aws_api_gateway_resource.MyDemoResource.id}\"",
      "  http_method   = \"GET\"",
      "  authorization = \"NONE\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_method_response": {
    "description": "Defines api_gateway_method_response",
    "prefix": "tf-aws-resource-api_gateway_method_response",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"MyDemoAPI\" {",
      "  name        = \"MyDemoAPI\"",
      "  description = \"This is my API for demonstration purposes\"",
      "}",
      "",
      "resource \"aws_api_gateway_resource\" \"MyDemoResource\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  parent_id   = \"${aws_api_gateway_rest_api.MyDemoAPI.root_resource_id}\"",
      "  path_part   = \"mydemoresource\"",
      "}",
      "",
      "resource \"aws_api_gateway_method\" \"MyDemoMethod\" {",
      "  rest_api_id   = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  resource_id   = \"${aws_api_gateway_resource.MyDemoResource.id}\"",
      "  http_method   = \"GET\"",
      "  authorization = \"NONE\"",
      "}",
      "",
      "resource \"aws_api_gateway_integration\" \"MyDemoIntegration\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  resource_id = \"${aws_api_gateway_resource.MyDemoResource.id}\"",
      "  http_method = \"${aws_api_gateway_method.MyDemoMethod.http_method}\"",
      "  type        = \"MOCK\"",
      "}",
      "",
      "resource \"aws_api_gateway_method_response\" \"200\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  resource_id = \"${aws_api_gateway_resource.MyDemoResource.id}\"",
      "  http_method = \"${aws_api_gateway_method.MyDemoMethod.http_method}\"",
      "  status_code = \"200\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_method_settings": {
    "description": "Defines api_gateway_method_settings",
    "prefix": "tf-aws-resource-api_gateway_method_settings",
    "body": [
      "resource \"aws_api_gateway_method_settings\" \"s\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.test.id}\"",
      "  stage_name  = \"${aws_api_gateway_stage.test.stage_name}\"",
      "  method_path = \"${aws_api_gateway_resource.test.path_part}/${aws_api_gateway_method.test.http_method}\"",
      "",
      "  settings {",
      "    metrics_enabled = true",
      "    logging_level   = \"INFO\"",
      "  }",
      "}",
      "",
      "resource \"aws_api_gateway_rest_api\" \"test\" {",
      "  name = \"MyDemoAPI\"",
      "  description = \"This is my API for demonstration purposes\"",
      "}",
      "",
      "resource \"aws_api_gateway_deployment\" \"test\" {",
      "  depends_on = [\"aws_api_gateway_integration.test\"]",
      "  rest_api_id = \"${aws_api_gateway_rest_api.test.id}\"",
      "  stage_name = \"dev\"",
      "}",
      "",
      "resource \"aws_api_gateway_stage\" \"test\" {",
      "  stage_name = \"prod\"",
      "  rest_api_id = \"${aws_api_gateway_rest_api.test.id}\"",
      "  deployment_id = \"${aws_api_gateway_deployment.test.id}\"",
      "}",
      "",
      "resource \"aws_api_gateway_resource\" \"test\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.test.id}\"",
      "  parent_id   = \"${aws_api_gateway_rest_api.test.root_resource_id}\"",
      "  path_part   = \"mytestresource\"",
      "}",
      "",
      "resource \"aws_api_gateway_method\" \"test\" {",
      "  rest_api_id   = \"${aws_api_gateway_rest_api.test.id}\"",
      "  resource_id   = \"${aws_api_gateway_resource.test.id}\"",
      "  http_method   = \"GET\"",
      "  authorization = \"NONE\"",
      "}",
      "",
      "resource \"aws_api_gateway_integration\" \"test\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.test.id}\"",
      "  resource_id = \"${aws_api_gateway_resource.test.id}\"",
      "  http_method = \"${aws_api_gateway_method.test.http_method}\"",
      "  type        = \"MOCK\"",
      "",
      "  request_templates {",
      "    \"application/xml\" = <<EOF",
      "{",
      "   \"body\" : $input.json('$')",
      "}",
      "EOF",
      "  }",
      "}"
    ]
  },
  "aws-resource-api_gateway_model": {
    "description": "Defines api_gateway_model",
    "prefix": "tf-aws-resource-api_gateway_model",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"MyDemoAPI\" {",
      "  name        = \"MyDemoAPI\"",
      "  description = \"This is my API for demonstration purposes\"",
      "}",
      "",
      "resource \"aws_api_gateway_model\" \"MyDemoModel\" {",
      "  rest_api_id  = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  name         = \"user\"",
      "  description  = \"a JSON schema\"",
      "  content_type = \"application/json\"",
      "",
      "  schema = <<EOF",
      "{",
      "  \"type\": \"object\"",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-api_gateway_resource": {
    "description": "Defines api_gateway_resource",
    "prefix": "tf-aws-resource-api_gateway_resource",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"MyDemoAPI\" {",
      "  name        = \"MyDemoAPI\"",
      "  description = \"This is my API for demonstration purposes\"",
      "}",
      "",
      "resource \"aws_api_gateway_resource\" \"MyDemoResource\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.MyDemoAPI.id}\"",
      "  parent_id   = \"${aws_api_gateway_rest_api.MyDemoAPI.root_resource_id}\"",
      "  path_part   = \"mydemoresource\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_rest_api": {
    "description": "Defines api_gateway_rest_api",
    "prefix": "tf-aws-resource-api_gateway_rest_api",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"MyDemoAPI\" {",
      "  name        = \"MyDemoAPI\"",
      "  description = \"This is my API for demonstration purposes\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_stage": {
    "description": "Defines api_gateway_stage",
    "prefix": "tf-aws-resource-api_gateway_stage",
    "body": [
      "resource \"aws_api_gateway_stage\" \"test\" {",
      "  stage_name = \"prod\"",
      "  rest_api_id = \"${aws_api_gateway_rest_api.test.id}\"",
      "  deployment_id = \"${aws_api_gateway_deployment.test.id}\"",
      "}",
      "",
      "resource \"aws_api_gateway_rest_api\" \"test\" {",
      "  name = \"MyDemoAPI\"",
      "  description = \"This is my API for demonstration purposes\"",
      "}",
      "",
      "resource \"aws_api_gateway_deployment\" \"test\" {",
      "  depends_on = [\"aws_api_gateway_integration.test\"]",
      "  rest_api_id = \"${aws_api_gateway_rest_api.test.id}\"",
      "  stage_name = \"dev\"",
      "}",
      "",
      "resource \"aws_api_gateway_resource\" \"test\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.test.id}\"",
      "  parent_id   = \"${aws_api_gateway_rest_api.test.root_resource_id}\"",
      "  path_part   = \"mytestresource\"",
      "}",
      "",
      "resource \"aws_api_gateway_method\" \"test\" {",
      "  rest_api_id   = \"${aws_api_gateway_rest_api.test.id}\"",
      "  resource_id   = \"${aws_api_gateway_resource.test.id}\"",
      "  http_method   = \"GET\"",
      "  authorization = \"NONE\"",
      "}",
      "",
      "resource \"aws_api_gateway_method_settings\" \"s\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.test.id}\"",
      "  stage_name  = \"${aws_api_gateway_stage.test.stage_name}\"",
      "  method_path = \"${aws_api_gateway_resource.test.path_part}/${aws_api_gateway_method.test.http_method}\"",
      "",
      "  settings {",
      "    metrics_enabled = true",
      "    logging_level = \"INFO\"",
      "  }",
      "}",
      "",
      "resource \"aws_api_gateway_integration\" \"test\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.test.id}\"",
      "  resource_id = \"${aws_api_gateway_resource.test.id}\"",
      "  http_method = \"${aws_api_gateway_method.test.http_method}\"",
      "  type        = \"MOCK\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_usage_plan": {
    "description": "Defines api_gateway_usage_plan",
    "prefix": "tf-aws-resource-api_gateway_usage_plan",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"myapi\" {",
      "  name = \"MyDemoAPI\"",
      "}",
      "",
      "...",
      "",
      "resource \"aws_api_gateway_deployment\" \"dev\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.myapi.id}\"",
      "  stage_name = \"dev\"",
      "}",
      "",
      "resource \"aws_api_gateway_deployment\" \"prod\" {",
      "  rest_api_id = \"${aws_api_gateway_rest_api.myapi.id}\"",
      "  stage_name = \"prod\"",
      "}",
      "",
      "resource \"aws_api_gateway_usage_plan\" \"MyUsagePlan\" {",
      "  name         = \"my-usage-plan\"",
      "  description  = \"my description\"",
      "  product_code = \"MYCODE\"",
      "",
      "  api_stages {",
      "    api_id = \"${aws_api_gateway_rest_api.myapi.id}\"",
      "    stage  = \"${aws_api_gateway_deployment.dev.stage_name}\"",
      "  }",
      "",
      "  api_stages {",
      "    api_id = \"${aws_api_gateway_rest_api.myapi.id}\"",
      "    stage  = \"${aws_api_gateway_deployment.prod.stage_name}\"",
      "  }",
      "",
      "  quota_settings {",
      "    limit  = 20",
      "    offset = 2",
      "    period = \"WEEK\"",
      "  }",
      "",
      "  throttle_settings {",
      "    burst_limit = 5",
      "    rate_limit  = 10",
      "  }",
      "}"
    ]
  },
  "aws-resource-api_gateway_usage_plan_key": {
    "description": "Defines api_gateway_usage_plan_key",
    "prefix": "tf-aws-resource-api_gateway_usage_plan_key",
    "body": [
      "resource \"aws_api_gateway_rest_api\" \"test\" {",
      "  name = \"MyDemoAPI\"",
      "}",
      "",
      "...",
      "",
      "resource \"aws_api_gateway_usage_plan\" \"myusageplan\" {",
      "  name = \"my_usage_plan\"",
      "}",
      "",
      "resource \"aws_api_gateway_api_key\" \"mykey\" {",
      "  name = \"my_key\"",
      "",
      "  stage_key {",
      "    rest_api_id = \"${aws_api_gateway_rest_api.test.id}\"",
      "    stage_name  = \"${aws_api_gateway_deployment.foo.stage_name}\"",
      "  }",
      "}",
      "",
      "resource \"aws_api_gateway_usage_plan_key\" \"main\" {",
      "  key_id        = \"${aws_api_gateway_api_key.mykey.id}\"",
      "  key_type      = \"API_KEY\"",
      "  usage_plan_id = \"${aws_api_gateway_usage_plan.myusageplan.id}\"",
      "}"
    ]
  },
  "aws-resource-api_gateway_vpc_link": {
    "description": "Defines api_gateway_vpc_link",
    "prefix": "tf-aws-resource-api_gateway_vpc_link",
    "body": [
      "resource \"aws_lb\" \"example\" {",
      "  name = \"example\"",
      "  internal = true",
      "  load_balancer_type = \"network\"",
      "",
      "  subnet_mapping {",
      "    subnet_id = \"12345\"",
      "  }",
      "}",
      "",
      "resource \"aws_api_gateway_vpc_link\" \"example\" {",
      "  name = \"example\"",
      "  description = \"example description\"",
      "  target_arns = [\"${aws_lb.example.arn}\"]",
      "}"
    ]
  },
  "aws-resource-app_cookie_stickiness_policy": {
    "description": "Defines app_cookie_stickiness_policy",
    "prefix": "tf-aws-resource-app_cookie_stickiness_policy",
    "body": [
      "resource \"aws_elb\" \"lb\" {",
      "  name               = \"test-lb\"",
      "  availability_zones = [\"us-east-1a\"]",
      "",
      "  listener {",
      "    instance_port     = 8000",
      "    instance_protocol = \"http\"",
      "    lb_port           = 80",
      "    lb_protocol       = \"http\"",
      "  }",
      "}",
      "",
      "resource \"aws_app_cookie_stickiness_policy\" \"foo\" {",
      "  name          = \"foo_policy\"",
      "  load_balancer = \"${aws_elb.lb.name}\"",
      "  lb_port       = 80",
      "  cookie_name   = \"MyAppCookie\"",
      "}"
    ]
  },
  "aws-resource-appautoscaling_policy": {
    "description": "Defines appautoscaling_policy",
    "prefix": "tf-aws-resource-appautoscaling_policy",
    "body": [
      "resource \"aws_appautoscaling_target\" \"dynamodb_table_read_target\" {",
      "  max_capacity       = 100",
      "  min_capacity       = 5",
      "  resource_id        = \"table/tableName\"",
      "  role_arn           = \"${data.aws_iam_role.DynamoDBAutoscaleRole.arn}\"",
      "  scalable_dimension = \"dynamodb:table:ReadCapacityUnits\"",
      "  service_namespace  = \"dynamodb\"",
      "}",
      "",
      "resource \"aws_appautoscaling_policy\" \"dynamodb_table_read_policy\" {",
      "  name               = \"DynamoDBReadCapacityUtilization:${aws_appautoscaling_target.dynamodb_table_read_target.resource_id}\"",
      "  policy_type        = \"TargetTrackingScaling\"",
      "  resource_id        = \"${aws_appautoscaling_target.dynamodb_table_read_target.resource_id}\"",
      "  scalable_dimension = \"${aws_appautoscaling_target.dynamodb_table_read_target.scalable_dimension}\"",
      "  service_namespace  = \"${aws_appautoscaling_target.dynamodb_table_read_target.service_namespace}\"",
      "",
      "  target_tracking_scaling_policy_configuration {",
      "    predefined_metric_specification {",
      "      predefined_metric_type = \"DynamoDBReadCapacityUtilization\"",
      "    }",
      "",
      "    target_value = 70",
      "  }",
      "}"
    ]
  },
  "aws-resource-appautoscaling_scheduled_action": {
    "description": "Defines appautoscaling_scheduled_action",
    "prefix": "tf-aws-resource-appautoscaling_scheduled_action",
    "body": [
      "resource \"aws_appautoscaling_target\" \"dynamodb\" {",
      "  max_capacity       = 100",
      "  min_capacity       = 5",
      "  resource_id        = \"table/tableName\"",
      "  role_arn           = \"${data.aws_iam_role.DynamoDBAutoscaleRole.arn}\"",
      "  scalable_dimension = \"dynamodb:table:ReadCapacityUnits\"",
      "  service_namespace  = \"dynamodb\"",
      "}",
      "",
      "resource \"aws_appautoscaling_scheduled_action\" \"dynamodb\" {",
      "  name = \"dynamodb\"",
      "  service_namespace = \"${aws_appautoscaling_target.dynamodb.service_namespace}\"",
      "  resource_id = \"${aws_appautoscaling_target.dynamodb.resource_id}\"",
      "  scalable_dimension = \"${aws_appautoscaling_target.dynamodb.scalable_dimension}\"",
      "  schedule = \"at(2006-01-02T15:04:05)\"",
      "",
      "  scalable_target_action {",
      "    min_capacity = 1",
      "    max_capacity = 200",
      "  }",
      "}"
    ]
  },
  "aws-resource-appautoscaling_target": {
    "description": "Defines appautoscaling_target",
    "prefix": "tf-aws-resource-appautoscaling_target",
    "body": [
      "resource \"aws_appautoscaling_target\" \"dynamodb_table_read_target\" {",
      "  max_capacity       = 100",
      "  min_capacity       = 5",
      "  resource_id        = \"table/${aws_dynamodb_table.example.name}\"",
      "  role_arn           = \"${data.aws_iam_role.DynamoDBAutoscaleRole.arn}\"",
      "  scalable_dimension = \"dynamodb:table:ReadCapacityUnits\"",
      "  service_namespace  = \"dynamodb\"",
      "}"
    ]
  },
  "aws-resource-appsync_datasource": {
    "description": "Defines appsync_datasource",
    "prefix": "tf-aws-resource-appsync_datasource",
    "body": [
      "resource \"aws_dynamodb_table\" \"example\" {",
      "  name = \"example\"",
      "  read_capacity  = 1",
      "  write_capacity = 1",
      "  hash_key = \"UserId\"",
      "  attribute {",
      "    name = \"UserId\"",
      "    type = \"S\"",
      "  }",
      "}",
      "",
      "resource \"aws_iam_role\" \"example\" {",
      "  name = \"example\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"appsync.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"example\" {",
      "  name = \"example\"",
      "  role = \"${aws_iam_role.example.id}\"",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"dynamodb:*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": [",
      "        \"${aws_dynamodb_table.example.arn}\"",
      "      ]",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_appsync_graphql_api\" \"example\" {",
      "  authentication_type = \"API_KEY\"",
      "  name = \"tf_appsync_example\"",
      "}",
      "",
      "resource \"aws_appsync_datasource\" \"example\" {",
      "  api_id = \"${aws_appsync_graphql_api.example.id}\"",
      "  name = \"tf_appsync_example\"",
      "  type = \"AMAZON_DYNAMODB\"",
      "  dynamodb_config {",
      "    region = \"us-west-2\"",
      "    table_name = \"${aws_dynamodb_table.example.name}\"",
      "  }",
      "  service_role_arn = \"${aws_iam_role.example.arn}\"",
      "}"
    ]
  },
  "aws-resource-appsync_graphql_api": {
    "description": "Defines appsync_graphql_api",
    "prefix": "tf-aws-resource-appsync_graphql_api",
    "body": [
      "resource \"aws_appsync_graphql_api\" \"example\" {",
      "  authentication_type = \"API_KEY\"",
      "  name = \"example\"",
      "}"
    ]
  },
  "aws-resource-athena_database": {
    "description": "Defines athena_database",
    "prefix": "tf-aws-resource-athena_database",
    "body": [
      "resource \"aws_s3_bucket\" \"hoge\" {",
      "  bucket = \"hoge\"",
      "}",
      "",
      "resource \"aws_athena_database\" \"hoge\" {",
      "  name = \"database_name\"",
      "  bucket = \"${aws_s3_bucket.hoge.bucket}\"",
      "}"
    ]
  },
  "aws-resource-athena_named_query": {
    "description": "Defines athena_named_query",
    "prefix": "tf-aws-resource-athena_named_query",
    "body": [
      "resource \"aws_s3_bucket\" \"hoge\" {",
      "  bucket = \"tf-test\"",
      "}",
      "",
      "resource \"aws_athena_database\" \"hoge\" {",
      "  name = \"users\"",
      "  bucket = \"${aws_s3_bucket.hoge.bucket}\"",
      "}",
      "",
      "resource \"aws_athena_named_query\" \"foo\" {",
      "  name = \"bar\"",
      "  database = \"${aws_athena_database.hoge.name}\"",
      "  query = \"SELECT * FROM ${aws_athena_database.hoge.name} limit 10;\"",
      "}"
    ]
  },
  "aws-resource-autoscaling_attachment": {
    "description": "Defines autoscaling_attachment",
    "prefix": "tf-aws-resource-autoscaling_attachment",
    "body": [
      "# Create a new load balancer attachment",
      "resource \"aws_autoscaling_attachment\" \"asg_attachment_bar\" {",
      "  autoscaling_group_name = \"${aws_autoscaling_group.asg.id}\"",
      "  elb                    = \"${aws_elb.bar.id}\"",
      "}"
    ]
  },
  "aws-resource-autoscaling_group": {
    "description": "Defines autoscaling_group",
    "prefix": "tf-aws-resource-autoscaling_group",
    "body": [
      "resource \"aws_placement_group\" \"test\" {",
      "  name     = \"test\"",
      "  strategy = \"cluster\"",
      "}",
      "",
      "resource \"aws_autoscaling_group\" \"bar\" {",
      "  name                      = \"foobar3-terraform-test\"",
      "  max_size                  = 5",
      "  min_size                  = 2",
      "  health_check_grace_period = 300",
      "  health_check_type         = \"ELB\"",
      "  desired_capacity          = 4",
      "  force_delete              = true",
      "  placement_group           = \"${aws_placement_group.test.id}\"",
      "  launch_configuration      = \"${aws_launch_configuration.foobar.name}\"",
      "  vpc_zone_identifier       = [\"${aws_subnet.example1.id}\", \"${aws_subnet.example2.id}\"]",
      "",
      "  initial_lifecycle_hook {",
      "    name                 = \"foobar\"",
      "    default_result       = \"CONTINUE\"",
      "    heartbeat_timeout    = 2000",
      "    lifecycle_transition = \"autoscaling:EC2_INSTANCE_LAUNCHING\"",
      "",
      "    notification_metadata = <<EOF",
      "{",
      "  \"foo\": \"bar\"",
      "}",
      "EOF",
      "",
      "    notification_target_arn = \"arn:aws:sqs:us-east-1:444455556666:queue1*\"",
      "    role_arn                = \"arn:aws:iam::123456789012:role/S3Access\"",
      "  }",
      "",
      "  tag {",
      "    key                 = \"foo\"",
      "    value               = \"bar\"",
      "    propagate_at_launch = true",
      "  }",
      "",
      "  timeouts {",
      "    delete = \"15m\"",
      "  }",
      "",
      "  tag {",
      "    key                 = \"lorem\"",
      "    value               = \"ipsum\"",
      "    propagate_at_launch = false",
      "  }",
      "}"
    ]
  },
  "aws-resource-autoscaling_lifecycle_hooks": {
    "description": "Defines autoscaling_lifecycle_hooks",
    "prefix": "tf-aws-resource-autoscaling_lifecycle_hooks",
    "body": [
      "resource \"aws_autoscaling_group\" \"foobar\" {",
      "  availability_zones   = [\"us-west-2a\"]",
      "  name                 = \"terraform-test-foobar5\"",
      "  health_check_type    = \"EC2\"",
      "  termination_policies = [\"OldestInstance\"]",
      "",
      "  tag {",
      "    key                 = \"Foo\"",
      "    value               = \"foo-bar\"",
      "    propagate_at_launch = true",
      "  }",
      "}",
      "",
      "resource \"aws_autoscaling_lifecycle_hook\" \"foobar\" {",
      "  name                   = \"foobar\"",
      "  autoscaling_group_name = \"${aws_autoscaling_group.foobar.name}\"",
      "  default_result         = \"CONTINUE\"",
      "  heartbeat_timeout      = 2000",
      "  lifecycle_transition   = \"autoscaling:EC2_INSTANCE_LAUNCHING\"",
      "",
      "  notification_metadata = <<EOF",
      "{",
      "  \"foo\": \"bar\"",
      "}",
      "EOF",
      "",
      "  notification_target_arn = \"arn:aws:sqs:us-east-1:444455556666:queue1*\"",
      "  role_arn                = \"arn:aws:iam::123456789012:role/S3Access\"",
      "}"
    ]
  },
  "aws-resource-autoscaling_notification": {
    "description": "Defines autoscaling_notification",
    "prefix": "tf-aws-resource-autoscaling_notification",
    "body": [
      "resource \"aws_autoscaling_notification\" \"example_notifications\" {",
      "  group_names = [",
      "    \"${aws_autoscaling_group.bar.name}\",",
      "    \"${aws_autoscaling_group.foo.name}\",",
      "  ]",
      "",
      "  notifications = [",
      "    \"autoscaling:EC2_INSTANCE_LAUNCH\",",
      "    \"autoscaling:EC2_INSTANCE_TERMINATE\",",
      "    \"autoscaling:EC2_INSTANCE_LAUNCH_ERROR\",",
      "  ]",
      "",
      "  topic_arn = \"${aws_sns_topic.example.arn}\"",
      "}",
      "",
      "resource \"aws_sns_topic\" \"example\" {",
      "  name = \"example-topic\"",
      "",
      "  # arn is an exported attribute",
      "}",
      "",
      "resource \"aws_autoscaling_group\" \"bar\" {",
      "  name = \"foobar1-terraform-test\"",
      "",
      "  # ...",
      "}",
      "",
      "resource \"aws_autoscaling_group\" \"foo\" {",
      "  name = \"barfoo-terraform-test\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "aws-resource-autoscaling_policy": {
    "description": "Defines autoscaling_policy",
    "prefix": "tf-aws-resource-autoscaling_policy",
    "body": [
      "resource \"aws_autoscaling_policy\" \"bat\" {",
      "  name                   = \"foobar3-terraform-test\"",
      "  scaling_adjustment     = 4",
      "  adjustment_type        = \"ChangeInCapacity\"",
      "  cooldown               = 300",
      "  autoscaling_group_name = \"${aws_autoscaling_group.bar.name}\"",
      "}",
      "",
      "resource \"aws_autoscaling_group\" \"bar\" {",
      "  availability_zones        = [\"us-east-1a\"]",
      "  name                      = \"foobar3-terraform-test\"",
      "  max_size                  = 5",
      "  min_size                  = 2",
      "  health_check_grace_period = 300",
      "  health_check_type         = \"ELB\"",
      "  force_delete              = true",
      "  launch_configuration      = \"${aws_launch_configuration.foo.name}\"",
      "}"
    ]
  },
  "aws-resource-autoscaling_schedule": {
    "description": "Defines autoscaling_schedule",
    "prefix": "tf-aws-resource-autoscaling_schedule",
    "body": [
      "resource \"aws_autoscaling_group\" \"foobar\" {",
      "  availability_zones        = [\"us-west-2a\"]",
      "  name                      = \"terraform-test-foobar5\"",
      "  max_size                  = 1",
      "  min_size                  = 1",
      "  health_check_grace_period = 300",
      "  health_check_type         = \"ELB\"",
      "  force_delete              = true",
      "  termination_policies      = [\"OldestInstance\"]",
      "}",
      "",
      "resource \"aws_autoscaling_schedule\" \"foobar\" {",
      "  scheduled_action_name  = \"foobar\"",
      "  min_size               = 0",
      "  max_size               = 1",
      "  desired_capacity       = 0",
      "  start_time             = \"2016-12-11T18:00:00Z\"",
      "  end_time               = \"2016-12-12T06:00:00Z\"",
      "  autoscaling_group_name = \"${aws_autoscaling_group.foobar.name}\"",
      "}"
    ]
  },
  "aws-resource-batch_compute_environment": {
    "description": "Defines batch_compute_environment",
    "prefix": "tf-aws-resource-batch_compute_environment",
    "body": [
      "resource \"aws_iam_role\" \"ecs_instance_role\" {",
      "  name = \"ecs_instance_role\"",
      "  assume_role_policy = <<EOF",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": [",
      "\t{",
      "\t    \"Action\": \"sts:AssumeRole\",",
      "\t    \"Effect\": \"Allow\",",
      "\t    \"Principal\": {",
      "\t\t\"Service\": \"ec2.amazonaws.com\"",
      "\t    }",
      "\t}",
      "    ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"ecs_instance_role\" {",
      "  role       = \"${aws_iam_role.ecs_instance_role.name}\"",
      "  policy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role\"",
      "}",
      "",
      "resource \"aws_iam_instance_profile\" \"ecs_instance_role\" {",
      "  name  = \"ecs_instance_role\"",
      "  role = \"${aws_iam_role.ecs_instance_role.name}\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"aws_batch_service_role\" {",
      "  name = \"aws_batch_service_role\"",
      "  assume_role_policy = <<EOF",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": [",
      "\t{",
      "\t    \"Action\": \"sts:AssumeRole\",",
      "\t    \"Effect\": \"Allow\",",
      "\t    \"Principal\": {",
      "\t\t\"Service\": \"batch.amazonaws.com\"",
      "\t    }",
      "\t}",
      "    ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"aws_batch_service_role\" {",
      "  role       = \"${aws_iam_role.aws_batch_service_role.name}\"",
      "  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole\"",
      "}",
      "",
      "resource \"aws_security_group\" \"sample\" {",
      "  name = \"aws_batch_compute_environment_security_group\"",
      "}",
      "",
      "resource \"aws_vpc\" \"sample\" {",
      "  cidr_block = \"10.1.0.0/16\"",
      "}",
      "",
      "resource \"aws_subnet\" \"sample\" {",
      "  vpc_id = \"${aws_vpc.sample.id}\"",
      "  cidr_block = \"10.1.1.0/24\"",
      "}",
      "",
      "resource \"aws_batch_compute_environment\" \"sample\" {",
      "  compute_environment_name = \"sample\"",
      "  compute_resources {",
      "    instance_role = \"${aws_iam_instance_profile.ecs_instance_role.arn}\"",
      "    instance_type = [",
      "      \"c4.large\",",
      "    ]",
      "    max_vcpus = 16",
      "    min_vcpus = 0",
      "    security_group_ids = [",
      "      \"${aws_security_group.sample.id}\"",
      "    ]",
      "    subnets = [",
      "      \"${aws_subnet.sample.id}\"",
      "    ]",
      "    type = \"EC2\"",
      "  }",
      "  service_role = \"${aws_iam_role.aws_batch_service_role.arn}\"",
      "  type = \"MANAGED\"",
      "  depends_on = [\"aws_iam_role_policy_attachment.aws_batch_service_role\"]",
      "}"
    ]
  },
  "aws-resource-batch_job_definition": {
    "description": "Defines batch_job_definition",
    "prefix": "tf-aws-resource-batch_job_definition",
    "body": [
      "resource \"aws_batch_job_definition\" \"test\" {",
      "\tname = \"tf_test_batch_job_definition\"",
      "\ttype = \"container\"",
      "\tcontainer_properties = <<CONTAINER_PROPERTIES",
      "{",
      "\t\"command\": [\"ls\", \"-la\"],",
      "\t\"image\": \"busybox\",",
      "\t\"memory\": 1024,",
      "\t\"vcpus\": 1,",
      "\t\"volumes\": [",
      "      {",
      "        \"host\": {",
      "          \"sourcePath\": \"/tmp\"",
      "        },",
      "        \"name\": \"tmp\"",
      "      }",
      "    ],",
      "\t\"environment\": [",
      "\t\t{\"name\": \"VARNAME\", \"value\": \"VARVAL\"}",
      "\t],",
      "\t\"mountPoints\": [",
      "\t\t{",
      "          \"sourceVolume\": \"tmp\",",
      "          \"containerPath\": \"/tmp\",",
      "          \"readOnly\": false",
      "        }",
      "\t],",
      "    \"ulimits\": [",
      "      {",
      "        \"hardLimit\": 1024,",
      "        \"name\": \"nofile\",",
      "        \"softLimit\": 1024",
      "      }",
      "    ]",
      "}",
      "CONTAINER_PROPERTIES",
      "}"
    ]
  },
  "aws-resource-batch_job_queue": {
    "description": "Defines batch_job_queue",
    "prefix": "tf-aws-resource-batch_job_queue",
    "body": [
      "resource \"aws_batch_job_queue\" \"test_queue\" {",
      "  name = \"tf-test-batch-job-queue\"",
      "  state = \"ENABLED\"",
      "  priority = 1",
      "  compute_environments = [\"${aws_batch_compute_environment.test_environment_1.arn}\", \"${aws_batch_compute_environment.test_environment_2.arn}\"]",
      "}"
    ]
  },
  "aws-resource-budgets_budget": {
    "description": "Defines budgets_budget",
    "prefix": "tf-aws-resource-budgets_budget",
    "body": [
      "resource \"aws_budgets_budget\" \"ec2\" {",
      "  name                  = \"budget-ec2-monthly\"",
      "  budget_type           = \"COST\"",
      "  limit_amount          = \"1200\"",
      "  limit_unit            = \"USD\"",
      "  time_period_end       = \"2087-06-15_00:00\"",
      "  time_period_start     = \"2017-07-01_00:00\"",
      "  time_unit             = \"MONTHLY\"",
      "",
      "  cost_filters {",
      "    service = \"ec2\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-cloud9_environment_ec2": {
    "description": "Defines cloud9_environment_ec2",
    "prefix": "tf-aws-resource-cloud9_environment_ec2",
    "body": [
      "resource \"aws_cloud9_environment_ec2\" \"example\" {",
      "  instance_type = \"t2.micro\"",
      "  name = \"example-env\"",
      "}"
    ]
  },
  "aws-resource-cloudformation_stack": {
    "description": "Defines cloudformation_stack",
    "prefix": "tf-aws-resource-cloudformation_stack",
    "body": [
      "resource \"aws_cloudformation_stack\" \"network\" {",
      "  name = \"networking-stack\"",
      "",
      "  parameters {",
      "    VPCCidr = \"10.0.0.0/16\"",
      "  }",
      "",
      "  template_body = <<STACK",
      "{",
      "  \"Parameters\" : {",
      "    \"VPCCidr\" : {",
      "      \"Type\" : \"String\",",
      "      \"Default\" : \"10.0.0.0/16\",",
      "      \"Description\" : \"Enter the CIDR block for the VPC. Default is 10.0.0.0/16.\"",
      "    }",
      "  },",
      "  \"Resources\" : {",
      "    \"my-vpc\": {",
      "      \"Type\" : \"AWS::EC2::VPC\",",
      "      \"Properties\" : {",
      "        \"CidrBlock\" : { \"Ref\" : \"VPCCidr\" },",
      "        \"Tags\" : [",
      "          {\"Key\": \"Name\", \"Value\": \"Primary_CF_VPC\"}",
      "        ]",
      "      }",
      "    }",
      "  }",
      "}",
      "STACK",
      "}"
    ]
  },
  "aws-resource-cloudfront_distribution": {
    "description": "Defines cloudfront_distribution",
    "prefix": "tf-aws-resource-cloudfront_distribution",
    "body": [
      "resource \"aws_s3_bucket\" \"b\" {",
      "  bucket = \"mybucket\"",
      "  acl    = \"private\"",
      "",
      "  tags {",
      "    Name = \"My bucket\"",
      "  }",
      "}",
      "",
      "resource \"aws_cloudfront_distribution\" \"s3_distribution\" {",
      "  origin {",
      "    domain_name = \"${aws_s3_bucket.b.bucket_domain_name}\"",
      "    origin_id   = \"myS3Origin\"",
      "",
      "    s3_origin_config {",
      "      origin_access_identity = \"origin-access-identity/cloudfront/ABCDEFG1234567\"",
      "    }",
      "  }",
      "",
      "  enabled             = true",
      "  is_ipv6_enabled     = true",
      "  comment             = \"Some comment\"",
      "  default_root_object = \"index.html\"",
      "",
      "  logging_config {",
      "    include_cookies = false",
      "    bucket          = \"mylogs.s3.amazonaws.com\"",
      "    prefix          = \"myprefix\"",
      "  }",
      "",
      "  aliases = [\"mysite.example.com\", \"yoursite.example.com\"]",
      "",
      "  default_cache_behavior {",
      "    allowed_methods  = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]",
      "    cached_methods   = [\"GET\", \"HEAD\"]",
      "    target_origin_id = \"myS3Origin\"",
      "",
      "    forwarded_values {",
      "      query_string = false",
      "",
      "      cookies {",
      "        forward = \"none\"",
      "      }",
      "    }",
      "",
      "    viewer_protocol_policy = \"allow-all\"",
      "    min_ttl                = 0",
      "    default_ttl            = 3600",
      "    max_ttl                = 86400",
      "  }",
      "",
      "  # Cache behavior with precedence 0",
      "  ordered_cache_behavior {",
      "    path_pattern     = \"/content/immutable/*\"",
      "    allowed_methods  = [\"GET\", \"HEAD\", \"OPTIONS\"]",
      "    cached_methods   = [\"GET\", \"HEAD\", \"OPTIONS\"]",
      "    target_origin_id = \"myS3Origin\"",
      "",
      "    forwarded_values {",
      "      query_string = false",
      "      headers = [\"Origin\"]",
      "      cookies {",
      "        forward = \"none\"",
      "      }",
      "    }",
      "",
      "    min_ttl                = 0",
      "    default_ttl            = 86400",
      "    max_ttl                = 31536000",
      "    compress               = true",
      "    viewer_protocol_policy = \"redirect-to-https\"",
      "  }",
      "",
      "  # Cache behavior with precedence 1",
      "  ordered_cache_behavior {",
      "    path_pattern     = \"/content/*\"",
      "    allowed_methods  = [\"GET\", \"HEAD\", \"OPTIONS\"]",
      "    cached_methods   = [\"GET\", \"HEAD\"]",
      "    target_origin_id = \"myS3Origin\"",
      "",
      "    forwarded_values {",
      "      query_string = false",
      "      cookies {",
      "        forward = \"none\"",
      "      }",
      "    }",
      "",
      "    min_ttl                = 0",
      "    default_ttl            = 3600",
      "    max_ttl                = 86400",
      "    compress               = true",
      "    viewer_protocol_policy = \"redirect-to-https\"",
      "  }",
      "",
      "  price_class = \"PriceClass_200\"",
      "",
      "  restrictions {",
      "    geo_restriction {",
      "      restriction_type = \"whitelist\"",
      "      locations        = [\"US\", \"CA\", \"GB\", \"DE\"]",
      "    }",
      "  }",
      "",
      "  tags {",
      "    Environment = \"production\"",
      "  }",
      "",
      "  viewer_certificate {",
      "    cloudfront_default_certificate = true",
      "  }",
      "}"
    ]
  },
  "aws-resource-cloudfront_origin_access_identity": {
    "description": "Defines cloudfront_origin_access_identity",
    "prefix": "tf-aws-resource-cloudfront_origin_access_identity",
    "body": [
      "resource \"aws_cloudfront_origin_access_identity\" \"origin_access_identity\" {",
      "  comment = \"Some comment\"",
      "}"
    ]
  },
  "aws-resource-cloudtrail": {
    "description": "Defines cloudtrail",
    "prefix": "tf-aws-resource-cloudtrail",
    "body": [
      "resource \"aws_cloudtrail\" \"foobar\" {",
      "  name                          = \"tf-trail-foobar\"",
      "  s3_bucket_name                = \"${aws_s3_bucket.foo.id}\"",
      "  s3_key_prefix                 = \"prefix\"",
      "  include_global_service_events = false",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"foo\" {",
      "  bucket        = \"tf-test-trail\"",
      "  force_destroy = true",
      "",
      "  policy = <<POLICY",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": [",
      "        {",
      "            \"Sid\": \"AWSCloudTrailAclCheck\",",
      "            \"Effect\": \"Allow\",",
      "            \"Principal\": {",
      "              \"Service\": \"cloudtrail.amazonaws.com\"",
      "            },",
      "            \"Action\": \"s3:GetBucketAcl\",",
      "            \"Resource\": \"arn:aws:s3:::tf-test-trail\"",
      "        },",
      "        {",
      "            \"Sid\": \"AWSCloudTrailWrite\",",
      "            \"Effect\": \"Allow\",",
      "            \"Principal\": {",
      "              \"Service\": \"cloudtrail.amazonaws.com\"",
      "            },",
      "            \"Action\": \"s3:PutObject\",",
      "            \"Resource\": \"arn:aws:s3:::tf-test-trail/*\",",
      "            \"Condition\": {",
      "                \"StringEquals\": {",
      "                    \"s3:x-amz-acl\": \"bucket-owner-full-control\"",
      "                }",
      "            }",
      "        }",
      "    ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-cloudwatch_dashboard": {
    "description": "Defines cloudwatch_dashboard",
    "prefix": "tf-aws-resource-cloudwatch_dashboard",
    "body": [
      "resource \"aws_cloudwatch_dashboard\" \"main\" {",
      "   dashboard_name = \"my-dashboard\"",
      "   dashboard_body = <<EOF",
      " {",
      "   \"widgets\": [",
      "       {",
      "          \"type\":\"metric\",",
      "          \"x\":0,",
      "          \"y\":0,",
      "          \"width\":12,",
      "          \"height\":6,",
      "          \"properties\":{",
      "             \"metrics\":[",
      "                [",
      "                   \"AWS/EC2\",",
      "                   \"CPUUtilization\",",
      "                   \"InstanceId\",",
      "                   \"i-012345\"",
      "                ]",
      "             ],",
      "             \"period\":300,",
      "             \"stat\":\"Average\",",
      "             \"region\":\"us-east-1\",",
      "             \"title\":\"EC2 Instance CPU\"",
      "          }",
      "       },",
      "       {",
      "          \"type\":\"text\",",
      "          \"x\":0,",
      "          \"y\":7,",
      "          \"width\":3,",
      "          \"height\":3,",
      "          \"properties\":{",
      "             \"markdown\":\"Hello world\"",
      "          }",
      "       }",
      "   ]",
      " }",
      " EOF",
      "}"
    ]
  },
  "aws-resource-cloudwatch_event_permission": {
    "description": "Defines cloudwatch_event_permission",
    "prefix": "tf-aws-resource-cloudwatch_event_permission",
    "body": [
      "resource \"aws_cloudwatch_event_permission\" \"DevAccountAccess\" {",
      "  principal    = \"123456789012\"",
      "  statement_id = \"DevAccountAccess\"",
      "}"
    ]
  },
  "aws-resource-cloudwatch_event_rule": {
    "description": "Defines cloudwatch_event_rule",
    "prefix": "tf-aws-resource-cloudwatch_event_rule",
    "body": [
      "resource \"aws_cloudwatch_event_rule\" \"console\" {",
      "  name        = \"capture-aws-sign-in\"",
      "  description = \"Capture each AWS Console Sign In\"",
      "",
      "  event_pattern = <<PATTERN",
      "{",
      "  \"detail-type\": [",
      "    \"AWS Console Sign In via CloudTrail\"",
      "  ]",
      "}",
      "PATTERN",
      "}",
      "",
      "resource \"aws_cloudwatch_event_target\" \"sns\" {",
      "  rule      = \"${aws_cloudwatch_event_rule.console.name}\"",
      "  target_id = \"SendToSNS\"",
      "  arn       = \"${aws_sns_topic.aws_logins.arn}\"",
      "}",
      "",
      "resource \"aws_sns_topic\" \"aws_logins\" {",
      "  name = \"aws-console-logins\"",
      "}"
    ]
  },
  "aws-resource-cloudwatch_event_target": {
    "description": "Defines cloudwatch_event_target",
    "prefix": "tf-aws-resource-cloudwatch_event_target",
    "body": [
      "resource \"aws_cloudwatch_event_target\" \"yada\" {",
      "  target_id = \"Yada\"",
      "  rule      = \"${aws_cloudwatch_event_rule.console.name}\"",
      "  arn       = \"${aws_kinesis_stream.test_stream.arn}\"",
      "",
      "  run_command_targets {",
      "    key = \"tag:Name\"",
      "    values = [\"FooBar\"]",
      "  }",
      "",
      "  run_command_targets {",
      "    key = \"InstanceIds\"",
      "    values = [\"i-162058cd308bffec2\"]",
      "  }",
      "}",
      "",
      "resource \"aws_cloudwatch_event_rule\" \"console\" {",
      "  name        = \"capture-ec2-scaling-events\"",
      "  description = \"Capture all EC2 scaling events\"",
      "",
      "  event_pattern = <<PATTERN",
      "{",
      "  \"source\": [",
      "    \"aws.autoscaling\"",
      "  ],",
      "  \"detail-type\": [",
      "    \"EC2 Instance Launch Successful\",",
      "    \"EC2 Instance Terminate Successful\",",
      "    \"EC2 Instance Launch Unsuccessful\",",
      "    \"EC2 Instance Terminate Unsuccessful\"",
      "  ]",
      "}",
      "PATTERN",
      "}",
      "",
      "resource \"aws_kinesis_stream\" \"test_stream\" {",
      "  name        = \"terraform-kinesis-test\"",
      "  shard_count = 1",
      "}"
    ]
  },
  "aws-resource-cloudwatch_log_destination": {
    "description": "Defines cloudwatch_log_destination",
    "prefix": "tf-aws-resource-cloudwatch_log_destination",
    "body": [
      "resource \"aws_cloudwatch_log_destination\" \"test_destination\" {",
      "  name       = \"test_destination\"",
      "  role_arn   = \"${aws_iam_role.iam_for_cloudwatch.arn}\"",
      "  target_arn = \"${aws_kinesis_stream.kinesis_for_cloudwatch.arn}\"",
      "}"
    ]
  },
  "aws-resource-cloudwatch_log_destination_policy": {
    "description": "Defines cloudwatch_log_destination_policy",
    "prefix": "tf-aws-resource-cloudwatch_log_destination_policy",
    "body": [
      "resource \"aws_cloudwatch_log_destination\" \"test_destination\" {",
      "  name       = \"test_destination\"",
      "  role_arn   = \"${aws_iam_role.iam_for_cloudwatch.arn}\"",
      "  target_arn = \"${aws_kinesis_stream.kinesis_for_cloudwatch.arn}\"",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"test_destination_policy\" {",
      "  statement {",
      "    effect = \"Allow\"",
      "",
      "    principals = {",
      "      type = \"AWS\"",
      "",
      "      identifiers = [",
      "        \"123456789012\",",
      "      ]",
      "    }",
      "",
      "    actions = [",
      "      \"logs:PutSubscriptionFilter\",",
      "    ]",
      "",
      "    resources = [",
      "      \"${aws_cloudwatch_log_destination.test_destination.arn}\",",
      "    ]",
      "  }",
      "}",
      "",
      "resource \"aws_cloudwatch_log_destination_policy\" \"test_destination_policy\" {",
      "  destination_name = \"${aws_cloudwatch_log_destination.test_destination.name}\"",
      "  access_policy    = \"${data.aws_iam_policy_document.test_destination_policy.json}\"",
      "}"
    ]
  },
  "aws-resource-cloudwatch_log_group": {
    "description": "Defines cloudwatch_log_group",
    "prefix": "tf-aws-resource-cloudwatch_log_group",
    "body": [
      "resource \"aws_cloudwatch_log_group\" \"yada\" {",
      "  name = \"Yada\"",
      "",
      "  tags {",
      "    Environment = \"production\"",
      "    Application = \"serviceA\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-cloudwatch_log_metric_filter": {
    "description": "Defines cloudwatch_log_metric_filter",
    "prefix": "tf-aws-resource-cloudwatch_log_metric_filter",
    "body": [
      "resource \"aws_cloudwatch_log_metric_filter\" \"yada\" {",
      "  name           = \"MyAppAccessCount\"",
      "  pattern        = \"\"",
      "  log_group_name = \"${aws_cloudwatch_log_group.dada.name}\"",
      "",
      "  metric_transformation {",
      "    name      = \"EventCount\"",
      "    namespace = \"YourNamespace\"",
      "    value     = \"1\"",
      "  }",
      "}",
      "",
      "resource \"aws_cloudwatch_log_group\" \"dada\" {",
      "  name = \"MyApp/access.log\"",
      "}"
    ]
  },
  "aws-resource-cloudwatch_log_resource_policy": {
    "description": "Defines cloudwatch_log_resource_policy",
    "prefix": "tf-aws-resource-cloudwatch_log_resource_policy",
    "body": [
      "data \"aws_iam_policy_document\" \"route53-query-logging-policy\" {",
      "  statement {",
      "    actions = [",
      "      \"logs:CreateLogStream\",",
      "      \"logs:PutLogEvents\",",
      "    ]",
      "",
      "    resources = [\"arn:aws:logs:*:*:log-group:/aws/route53/*\"]",
      "",
      "    principals {",
      "      identifiers = [\"route53.amazonaws.com\"]",
      "      type        = \"Service\"",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_cloudwatch_log_resource_policy\" \"route53-query-logging-policy\" {",
      "  policy_document = \"${data.aws_iam_policy_document.route53-query-logging-policy.json}\"",
      "  policy_name     = \"route53-query-logging-policy\"",
      "}"
    ]
  },
  "aws-resource-cloudwatch_log_stream": {
    "description": "Defines cloudwatch_log_stream",
    "prefix": "tf-aws-resource-cloudwatch_log_stream",
    "body": [
      "resource \"aws_cloudwatch_log_group\" \"yada\" {",
      "  name = \"Yada\"",
      "}",
      "",
      "resource \"aws_cloudwatch_log_stream\" \"foo\" {",
      "  name           = \"SampleLogStream1234\"",
      "  log_group_name = \"${aws_cloudwatch_log_group.yada.name}\"",
      "}"
    ]
  },
  "aws-resource-cloudwatch_log_subscription_filter": {
    "description": "Defines cloudwatch_log_subscription_filter",
    "prefix": "tf-aws-resource-cloudwatch_log_subscription_filter",
    "body": [
      "resource \"aws_cloudwatch_log_subscription_filter\" \"test_lambdafunction_logfilter\" {",
      "  name            = \"test_lambdafunction_logfilter\"",
      "  role_arn        = \"${aws_iam_role.iam_for_lambda.arn}\"",
      "  log_group_name  = \"/aws/lambda/example_lambda_name\"",
      "  filter_pattern  = \"logtype test\"",
      "  destination_arn = \"${aws_kinesis_stream.test_logstream.arn}\"",
      "  distribution    = \"Random\"",
      "}"
    ]
  },
  "aws-resource-cloudwatch_metric_alarm": {
    "description": "Defines cloudwatch_metric_alarm",
    "prefix": "tf-aws-resource-cloudwatch_metric_alarm",
    "body": [
      "resource \"aws_cloudwatch_metric_alarm\" \"foobar\" {",
      "  alarm_name                = \"terraform-test-foobar5\"",
      "  comparison_operator       = \"GreaterThanOrEqualToThreshold\"",
      "  evaluation_periods        = \"2\"",
      "  metric_name               = \"CPUUtilization\"",
      "  namespace                 = \"AWS/EC2\"",
      "  period                    = \"120\"",
      "  statistic                 = \"Average\"",
      "  threshold                 = \"80\"",
      "  alarm_description         = \"This metric monitors ec2 cpu utilization\"",
      "  insufficient_data_actions = []",
      "}"
    ]
  },
  "aws-resource-codebuild_project": {
    "description": "Defines codebuild_project",
    "prefix": "tf-aws-resource-codebuild_project",
    "body": [
      "resource \"aws_s3_bucket\" \"foo\" {",
      "  bucket = \"test-bucket\"",
      "  acl    = \"private\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"codebuild_role\" {",
      "  name = \"codebuild-role-\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"Service\": \"codebuild.amazonaws.com\"",
      "      },",
      "      \"Action\": \"sts:AssumeRole\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_policy\" \"codebuild_policy\" {",
      "  name        = \"codebuild-policy\"",
      "  path        = \"/service-role/\"",
      "  description = \"Policy used in trust relationship with CodeBuild\"",
      "",
      "  policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": [",
      "        \"*\"",
      "      ],",
      "      \"Action\": [",
      "        \"logs:CreateLogGroup\",",
      "        \"logs:CreateLogStream\",",
      "        \"logs:PutLogEvents\"",
      "      ]",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}",
      "",
      "resource \"aws_iam_policy_attachment\" \"codebuild_policy_attachment\" {",
      "  name       = \"codebuild-policy-attachment\"",
      "  policy_arn = \"${aws_iam_policy.codebuild_policy.arn}\"",
      "  roles      = [\"${aws_iam_role.codebuild_role.id}\"]",
      "}",
      "",
      "resource \"aws_codebuild_project\" \"foo\" {",
      "  name         = \"test-project\"",
      "  description  = \"test_codebuild_project\"",
      "  build_timeout      = \"5\"",
      "  service_role = \"${aws_iam_role.codebuild_role.arn}\"",
      "",
      "  artifacts {",
      "    type = \"NO_ARTIFACTS\"",
      "  }",
      "",
      "  cache {",
      "    type     = \"S3\"",
      "    location = \"${aws_s3_bucket.foo.bucket}\"",
      "  }",
      "",
      "  environment {",
      "    compute_type = \"BUILD_GENERAL1_SMALL\"",
      "    image        = \"aws/codebuild/nodejs:6.3.1\"",
      "    type         = \"LINUX_CONTAINER\"",
      "",
      "    environment_variable {",
      "      \"name\"  = \"SOME_KEY1\"",
      "      \"value\" = \"SOME_VALUE1\"",
      "    }",
      "",
      "    environment_variable {",
      "      \"name\"  = \"SOME_KEY2\"",
      "      \"value\" = \"SOME_VALUE2\"",
      "    }",
      "  }",
      "",
      "  source {",
      "    type     = \"GITHUB\"",
      "    location = \"https://github.com/mitchellh/packer.git\"",
      "  }",
      "",
      "  vpc_config {",
      "    vpc_id = \"vpc-725fca\"",
      "",
      "    subnets = [",
      "      \"subnet-ba35d2e0\",",
      "      \"subnet-ab129af1\",",
      "    ]",
      "",
      "    security_group_ids = [",
      "      \"sg-f9f27d91\",",
      "      \"sg-e4f48g23\",",
      "    ]",
      "  }",
      "",
      "  tags {",
      "    \"Environment\" = \"Test\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-codecommit_repository": {
    "description": "Defines codecommit_repository",
    "prefix": "tf-aws-resource-codecommit_repository",
    "body": [
      "resource \"aws_codecommit_repository\" \"test\" {",
      "  repository_name = \"MyTestRepository\"",
      "  description     = \"This is the Sample App Repository\"",
      "}"
    ]
  },
  "aws-resource-codecommit_trigger": {
    "description": "Defines codecommit_trigger",
    "prefix": "tf-aws-resource-codecommit_trigger",
    "body": [
      "resource \"aws_codecommit_trigger\" \"test\" {",
      "  depends_on      = [\"aws_codecommit_repository.test\"]",
      "  repository_name = \"my_test_repository\"",
      "",
      "  trigger {",
      "    name            = \"noname\"",
      "    events          = [\"all\"]",
      "    destination_arn = \"${aws_sns_topic.test.arn}\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-codedeploy_app": {
    "description": "Defines codedeploy_app",
    "prefix": "tf-aws-resource-codedeploy_app",
    "body": [
      "resource \"aws_codedeploy_app\" \"foo\" {",
      "  name = \"foo\"",
      "}"
    ]
  },
  "aws-resource-codedeploy_deployment_config": {
    "description": "Defines codedeploy_deployment_config",
    "prefix": "tf-aws-resource-codedeploy_deployment_config",
    "body": [
      "resource \"aws_codedeploy_deployment_config\" \"foo\" {",
      "  deployment_config_name = \"test-deployment-config\"",
      "",
      "  minimum_healthy_hosts {",
      "    type  = \"HOST_COUNT\"",
      "    value = 2",
      "  }",
      "}",
      "",
      "resource \"aws_codedeploy_deployment_group\" \"foo\" {",
      "  app_name               = \"${aws_codedeploy_app.foo_app.name}\"",
      "  deployment_group_name  = \"bar\"",
      "  service_role_arn       = \"${aws_iam_role.foo_role.arn}\"",
      "  deployment_config_name = \"${aws_codedeploy_deployment_config.foo.id}\"",
      "",
      "  ec2_tag_filter {",
      "    key   = \"filterkey\"",
      "    type  = \"KEY_AND_VALUE\"",
      "    value = \"filtervalue\"",
      "  }",
      "",
      "  trigger_configuration {",
      "    trigger_events     = [\"DeploymentFailure\"]",
      "    trigger_name       = \"foo-trigger\"",
      "    trigger_target_arn = \"foo-topic-arn\"",
      "  }",
      "",
      "  auto_rollback_configuration {",
      "    enabled = true",
      "    events  = [\"DEPLOYMENT_FAILURE\"]",
      "  }",
      "",
      "  alarm_configuration {",
      "    alarms  = [\"my-alarm-name\"]",
      "    enabled = true",
      "  }",
      "}"
    ]
  },
  "aws-resource-codedeploy_deployment_group": {
    "description": "Defines codedeploy_deployment_group",
    "prefix": "tf-aws-resource-codedeploy_deployment_group",
    "body": [
      "resource \"aws_iam_role\" \"example\" {",
      "  name = \"example-role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Sid\": \"\",",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"Service\": \"codedeploy.amazonaws.com\"",
      "      },",
      "      \"Action\": \"sts:AssumeRole\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"example\" {",
      "  name = \"example-policy\"",
      "  role = \"${aws_iam_role.example.id}\"",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Action\": [",
      "        \"autoscaling:CompleteLifecycleAction\",",
      "        \"autoscaling:DeleteLifecycleHook\",",
      "        \"autoscaling:DescribeAutoScalingGroups\",",
      "        \"autoscaling:DescribeLifecycleHooks\",",
      "        \"autoscaling:PutLifecycleHook\",",
      "        \"autoscaling:RecordLifecycleActionHeartbeat\",",
      "        \"codedeploy:*\",",
      "        \"ec2:DescribeInstances\",",
      "        \"ec2:DescribeInstanceStatus\",",
      "        \"tag:GetTags\",",
      "        \"tag:GetResources\",",
      "        \"sns:Publish\"",
      "      ],",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_codedeploy_app\" \"example\" {",
      "  name = \"example-app\"",
      "}",
      "",
      "resource \"aws_sns_topic\" \"example\" {",
      "  name = \"example-topic\"",
      "}",
      "",
      "resource \"aws_codedeploy_deployment_group\" \"example\" {",
      "  app_name              = \"${aws_codedeploy_app.example.name}\"",
      "  deployment_group_name = \"example-group\"",
      "  service_role_arn      = \"${aws_iam_role.example.arn}\"",
      "",
      "  ec2_tag_set {",
      "    ec2_tag_filter {",
      "      key   = \"filterkey1\"",
      "      type  = \"KEY_AND_VALUE\"",
      "      value = \"filtervalue\"",
      "    }",
      "",
      "    ec2_tag_filter {",
      "      key   = \"filterkey2\"",
      "      type  = \"KEY_AND_VALUE\"",
      "      value = \"filtervalue\"",
      "    }",
      "  }",
      "",
      "  trigger_configuration {",
      "    trigger_events     = [\"DeploymentFailure\"]",
      "    trigger_name       = \"example-trigger\"",
      "    trigger_target_arn = \"${aws_sns_topic.example.arn}\"",
      "  }",
      "",
      "  auto_rollback_configuration {",
      "    enabled = true",
      "    events  = [\"DEPLOYMENT_FAILURE\"]",
      "  }",
      "",
      "  alarm_configuration {",
      "    alarms  = [\"my-alarm-name\"]",
      "    enabled = true",
      "  }",
      "}"
    ]
  },
  "aws-resource-codepipeline": {
    "description": "Defines codepipeline",
    "prefix": "tf-aws-resource-codepipeline",
    "body": [
      "resource \"aws_s3_bucket\" \"foo\" {",
      "  bucket = \"test-bucket\"",
      "  acl    = \"private\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"foo\" {",
      "  name = \"test-role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"Service\": \"codepipeline.amazonaws.com\"",
      "      },",
      "      \"Action\": \"sts:AssumeRole\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"codepipeline_policy\" {",
      "  name = \"codepipeline_policy\"",
      "  role = \"${aws_iam_role.codepipeline_role.id}\"",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\":\"Allow\",",
      "      \"Action\": [",
      "        \"s3:GetObject\",",
      "        \"s3:GetObjectVersion\",",
      "        \"s3:GetBucketVersioning\"",
      "      ],",
      "      \"Resource\": [",
      "        \"${aws_s3_bucket.foo.arn}\",",
      "        \"${aws_s3_bucket.foo.arn}/*\"",
      "      ]",
      "    },",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Action\": [",
      "        \"codebuild:BatchGetBuilds\",",
      "        \"codebuild:StartBuild\"",
      "      ],",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "data \"aws_kms_alias\" \"s3kmskey\" {",
      "  name = \"alias/myKmsKey\"",
      "}",
      "",
      "resource \"aws_codepipeline\" \"foo\" {",
      "  name     = \"tf-test-pipeline\"",
      "  role_arn = \"${aws_iam_role.foo.arn}\"",
      "",
      "  artifact_store {",
      "    location = \"${aws_s3_bucket.foo.bucket}\"",
      "    type     = \"S3\"",
      "    encryption_key {",
      "      id   = \"${data.aws_kms_alias.s3kmskey.arn}\"",
      "      type = \"KMS\"",
      "    }",
      "  }",
      "",
      "  stage {",
      "    name = \"Source\"",
      "",
      "    action {",
      "      name             = \"Source\"",
      "      category         = \"Source\"",
      "      owner            = \"ThirdParty\"",
      "      provider         = \"GitHub\"",
      "      version          = \"1\"",
      "      output_artifacts = [\"test\"]",
      "",
      "      configuration {",
      "        Owner      = \"my-organization\"",
      "        Repo       = \"test\"",
      "        Branch     = \"master\"",
      "      }",
      "    }",
      "  }",
      "",
      "  stage {",
      "    name = \"Build\"",
      "",
      "    action {",
      "      name            = \"Build\"",
      "      category        = \"Build\"",
      "      owner           = \"AWS\"",
      "      provider        = \"CodeBuild\"",
      "      input_artifacts = [\"test\"]",
      "      version         = \"1\"",
      "",
      "      configuration {",
      "        ProjectName = \"test\"",
      "      }",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-cognito_identity_pool": {
    "description": "Defines cognito_identity_pool",
    "prefix": "tf-aws-resource-cognito_identity_pool",
    "body": [
      "resource \"aws_iam_saml_provider\" \"default\" {",
      "  name                   = \"my-saml-provider\"",
      "  saml_metadata_document = \"${file(\"saml-metadata.xml\")}\"",
      "}",
      "",
      "resource \"aws_cognito_identity_pool\" \"main\" {",
      "  identity_pool_name               = \"identity pool\"",
      "  allow_unauthenticated_identities = false",
      "",
      "  cognito_identity_providers {",
      "    client_id               = \"6lhlkkfbfb4q5kpp90urffae\"",
      "    provider_name           = \"cognito-idp.us-east-1.amazonaws.com/us-east-1_Tv0493apJ\"",
      "    server_side_token_check = false",
      "  }",
      "",
      "  cognito_identity_providers {",
      "    client_id               = \"7kodkvfqfb4qfkp39eurffae\"",
      "    provider_name           = \"cognito-idp.us-east-1.amazonaws.com/eu-west-1_Zr231apJu\"",
      "    server_side_token_check = false",
      "  }",
      "",
      "  supported_login_providers {",
      "    \"graph.facebook.com\"  = \"7346241598935552\"",
      "    \"accounts.google.com\" = \"123456789012.apps.googleusercontent.com\"",
      "  }",
      "",
      "  saml_provider_arns           = [\"${aws_iam_saml_provider.default.arn}\"]",
      "  openid_connect_provider_arns = [\"arn:aws:iam::123456789012:oidc-provider/foo.example.com\"]",
      "}"
    ]
  },
  "aws-resource-cognito_identity_pool_roles_attachment": {
    "description": "Defines cognito_identity_pool_roles_attachment",
    "prefix": "tf-aws-resource-cognito_identity_pool_roles_attachment",
    "body": [
      "resource \"aws_cognito_identity_pool\" \"main\" {",
      "  identity_pool_name               = \"identity pool\"",
      "  allow_unauthenticated_identities = false",
      "",
      "  supported_login_providers {",
      "    \"graph.facebook.com\" = \"7346241598935555\"",
      "  }",
      "}",
      "",
      "resource \"aws_iam_role\" \"authenticated\" {",
      "  name = \"cognito_authenticated\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"Federated\": \"cognito-identity.amazonaws.com\"",
      "      },",
      "      \"Action\": \"sts:AssumeRoleWithWebIdentity\",",
      "      \"Condition\": {",
      "        \"StringEquals\": {",
      "          \"cognito-identity.amazonaws.com:aud\": \"${aws_cognito_identity_pool.main.id}\"",
      "        },",
      "        \"ForAnyValue:StringLike\": {",
      "          \"cognito-identity.amazonaws.com:amr\": \"authenticated\"",
      "        }",
      "      }",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"authenticated\" {",
      "  name = \"authenticated_policy\"",
      "  role = \"${aws_iam_role.authenticated.id}\"",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Action\": [",
      "        \"mobileanalytics:PutEvents\",",
      "        \"cognito-sync:*\",",
      "        \"cognito-identity:*\"",
      "      ],",
      "      \"Resource\": [",
      "        \"*\"",
      "      ]",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_cognito_identity_pool_roles_attachment\" \"main\" {",
      "  identity_pool_id = \"${aws_cognito_identity_pool.main.id}\"",
      "",
      "  role_mapping {",
      "    identity_provider         = \"graph.facebook.com\"",
      "    ambiguous_role_resolution = \"AuthenticatedRole\"",
      "    type                      = \"Rules\"",
      "",
      "    mapping_rule {",
      "      claim      = \"isAdmin\"",
      "      match_type = \"Equals\"",
      "      role_arn   = \"${aws_iam_role.authenticated.arn}\"",
      "      value      = \"paid\"",
      "    }",
      "  }",
      "",
      "  roles {",
      "    \"authenticated\" = \"${aws_iam_role.authenticated.arn}\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-cognito_user_group": {
    "description": "Defines cognito_user_group",
    "prefix": "tf-aws-resource-cognito_user_group",
    "body": [
      "resource \"aws_cognito_user_pool\" \"main\" {",
      "  name = \"identity pool\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"group_role\" {",
      "  name = \"user-group-role\"",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Sid\": \"\",",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"Federated\": \"cognito-identity.amazonaws.com\"",
      "      },",
      "      \"Action\": \"sts:AssumeRoleWithWebIdentity\",",
      "      \"Condition\": {",
      "        \"StringEquals\": {",
      "          \"cognito-identity.amazonaws.com:aud\": \"us-east-1:12345678-dead-beef-cafe-123456790ab\"",
      "        },",
      "        \"ForAnyValue:StringLike\": {",
      "          \"cognito-identity.amazonaws.com:amr\": \"authenticated\"",
      "        }",
      "      }",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_cognito_user_group\" \"main\" {",
      "  name         = \"user-group\"",
      "  user_pool_id = \"${aws_cognito_user_pool.main.id}\"",
      "  description  = \"Managed by Terraform\"",
      "  precedence   = 42",
      "  role_arn     = \"${aws_iam_role.group_role.arn}\"",
      "}"
    ]
  },
  "aws-resource-cognito_user_pool": {
    "description": "Defines cognito_user_pool",
    "prefix": "tf-aws-resource-cognito_user_pool",
    "body": [
      "resource \"aws_cognito_user_pool\" \"pool\" {",
      "  name = \"mypool\"",
      "}"
    ]
  },
  "aws-resource-cognito_user_pool_client": {
    "description": "Defines cognito_user_pool_client",
    "prefix": "tf-aws-resource-cognito_user_pool_client",
    "body": [
      "resource \"aws_cognito_user_pool\" \"pool\" {",
      "  name = \"pool\"",
      "}",
      "",
      "resource \"aws_cognito_user_pool_client\" \"client\" {",
      "  name = \"client\"",
      "",
      "  user_pool_id = \"${aws_cognito_user_pool.pool.id}\"",
      "}"
    ]
  },
  "aws-resource-cognito_user_pool_domain": {
    "description": "Defines cognito_user_pool_domain",
    "prefix": "tf-aws-resource-cognito_user_pool_domain",
    "body": [
      "resource \"aws_cognito_user_pool_domain\" \"main\" {",
      "  domain = \"example-domain\"",
      "  user_pool_id = \"${aws_cognito_user_pool.example.id}\"",
      "}",
      "",
      "resource \"aws_cognito_user_pool\" \"example\" {",
      "  name = \"example-pool\"",
      "}"
    ]
  },
  "aws-resource-config_config_rule": {
    "description": "Defines config_config_rule",
    "prefix": "tf-aws-resource-config_config_rule",
    "body": [
      "resource \"aws_config_config_rule\" \"r\" {",
      "  name = \"example\"",
      "",
      "  source {",
      "    owner             = \"AWS\"",
      "    source_identifier = \"S3_BUCKET_VERSIONING_ENABLED\"",
      "  }",
      "",
      "  depends_on = [\"aws_config_configuration_recorder.foo\"]",
      "}",
      "",
      "resource \"aws_config_configuration_recorder\" \"foo\" {",
      "  name     = \"example\"",
      "  role_arn = \"${aws_iam_role.r.arn}\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"r\" {",
      "  name = \"my-awsconfig-role\"",
      "",
      "  assume_role_policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"config.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"p\" {",
      "  name = \"my-awsconfig-policy\"",
      "  role = \"${aws_iam_role.r.id}\"",
      "",
      "  policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "  \t{",
      "  \t\t\"Action\": \"config:Put*\",",
      "  \t\t\"Effect\": \"Allow\",",
      "  \t\t\"Resource\": \"*\"",
      "",
      "  \t}",
      "  ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-config_configuration_recorder": {
    "description": "Defines config_configuration_recorder",
    "prefix": "tf-aws-resource-config_configuration_recorder",
    "body": [
      "resource \"aws_config_configuration_recorder\" \"foo\" {",
      "  name     = \"example\"",
      "  role_arn = \"${aws_iam_role.r.arn}\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"r\" {",
      "  name = \"awsconfig-example\"",
      "",
      "  assume_role_policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"config.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-config_configuration_recorder_status": {
    "description": "Defines config_configuration_recorder_status",
    "prefix": "tf-aws-resource-config_configuration_recorder_status",
    "body": [
      "resource \"aws_config_configuration_recorder_status\" \"foo\" {",
      "  name       = \"${aws_config_configuration_recorder.foo.name}\"",
      "  is_enabled = true",
      "  depends_on = [\"aws_config_delivery_channel.foo\"]",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"a\" {",
      "  role       = \"${aws_iam_role.r.name}\"",
      "  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSConfigRole\"",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"b\" {",
      "  bucket = \"awsconfig-example\"",
      "}",
      "",
      "resource \"aws_config_delivery_channel\" \"foo\" {",
      "  name           = \"example\"",
      "  s3_bucket_name = \"${aws_s3_bucket.b.bucket}\"",
      "}",
      "",
      "resource \"aws_config_configuration_recorder\" \"foo\" {",
      "  name     = \"example\"",
      "  role_arn = \"${aws_iam_role.r.arn}\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"r\" {",
      "  name = \"example-awsconfig\"",
      "",
      "  assume_role_policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"config.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-config_delivery_channel": {
    "description": "Defines config_delivery_channel",
    "prefix": "tf-aws-resource-config_delivery_channel",
    "body": [
      "resource \"aws_config_delivery_channel\" \"foo\" {",
      "  name           = \"example\"",
      "  s3_bucket_name = \"${aws_s3_bucket.b.bucket}\"",
      "  depends_on     = [\"aws_config_configuration_recorder.foo\"]",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"b\" {",
      "  bucket        = \"example-awsconfig\"",
      "  force_destroy = true",
      "}",
      "",
      "resource \"aws_config_configuration_recorder\" \"foo\" {",
      "  name     = \"example\"",
      "  role_arn = \"${aws_iam_role.r.arn}\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"r\" {",
      "  name = \"awsconfig-example\"",
      "",
      "  assume_role_policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"config.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"p\" {",
      "  name = \"awsconfig-example\"",
      "  role = \"${aws_iam_role.r.id}\"",
      "",
      "  policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"s3:*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": [",
      "        \"${aws_s3_bucket.b.arn}\",",
      "        \"${aws_s3_bucket.b.arn}/*\"",
      "      ]",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-customer_gateway": {
    "description": "Defines customer_gateway",
    "prefix": "tf-aws-resource-customer_gateway",
    "body": [
      "resource \"aws_customer_gateway\" \"main\" {",
      "  bgp_asn    = 65000",
      "  ip_address = \"172.83.124.10\"",
      "  type       = \"ipsec.1\"",
      "",
      "  tags {",
      "    Name = \"main-customer-gateway\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-dax_cluster": {
    "description": "Defines dax_cluster",
    "prefix": "tf-aws-resource-dax_cluster",
    "body": [
      "resource \"aws_dax_cluster\" \"bar\" {",
      "  cluster_id         = \"cluster-example\"",
      "  iam_role_arn       = \"${data.aws_iam_role.example.arn}\"",
      "  node_type          = \"dax.r3.large\"",
      "  replication_factor = 1",
      "}"
    ]
  },
  "aws-resource-dax_parameter_group": {
    "description": "Defines dax_parameter_group",
    "prefix": "tf-aws-resource-dax_parameter_group",
    "body": [
      "resource \"aws_dax_parameter_group\" \"example\" {",
      "  name = \"example\"",
      "  parameters {",
      "    name = \"query-ttl-millis\"",
      "    value = \"100000\"",
      "  }",
      "  parameters {",
      "    name = \"record-ttl-millis\"",
      "    value = \"100000\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-dax_subnet_group": {
    "description": "Defines dax_subnet_group",
    "prefix": "tf-aws-resource-dax_subnet_group",
    "body": [
      "resource \"aws_dax_subnet_group\" \"example\" {",
      "  name = \"example\"",
      "  subnet_ids = [\"${aws_subnet.example1.id}\", \"${aws_subnet.example2.id}\"]",
      "}"
    ]
  },
  "aws-resource-db_event_subscription": {
    "description": "Defines db_event_subscription",
    "prefix": "tf-aws-resource-db_event_subscription",
    "body": [
      "resource \"aws_db_instance\" \"default\" {",
      "  allocated_storage    = 10",
      "  engine               = \"mysql\"",
      "  engine_version       = \"5.6.17\"",
      "  instance_class       = \"db.t2.micro\"",
      "  name                 = \"mydb\"",
      "  username             = \"foo\"",
      "  password             = \"bar\"",
      "  db_subnet_group_name = \"my_database_subnet_group\"",
      "  parameter_group_name = \"default.mysql5.6\"",
      "}",
      "",
      "resource \"aws_sns_topic\" \"default\" {",
      "  name = \"rds-events\"",
      "}",
      "",
      "resource \"aws_db_event_subscription\" \"default\" {",
      "  name      = \"rds-event-sub\"",
      "  sns_topic = \"${aws_sns_topic.default.arn}\"",
      "",
      "  source_type = \"db-instance\"",
      "  source_ids  = [\"${aws_db_instance.default.id}\"]",
      "",
      "  event_categories = [",
      "    \"availability\",",
      "    \"deletion\",",
      "    \"failover\",",
      "    \"failure\",",
      "    \"low storage\",",
      "    \"maintenance\",",
      "    \"notification\",",
      "    \"read replica\",",
      "    \"recovery\",",
      "    \"restoration\",",
      "  ]",
      "}"
    ]
  },
  "aws-resource-db_instance": {
    "description": "Defines db_instance",
    "prefix": "tf-aws-resource-db_instance",
    "body": [
      "resource \"aws_db_instance\" \"default\" {",
      "  allocated_storage    = 10",
      "  storage_type         = \"gp2\"",
      "  engine               = \"mysql\"",
      "  engine_version       = \"5.7\"",
      "  instance_class       = \"db.t2.micro\"",
      "  name                 = \"mydb\"",
      "  username             = \"foo\"",
      "  password             = \"foobarbaz\"",
      "  parameter_group_name = \"default.mysql5.7\"",
      "}"
    ]
  },
  "aws-resource-db_option_group": {
    "description": "Defines db_option_group",
    "prefix": "tf-aws-resource-db_option_group",
    "body": [
      "resource \"aws_db_option_group\" \"bar\" {",
      "  name                     = \"option-group-test-terraform\"",
      "  option_group_description = \"Terraform Option Group\"",
      "  engine_name              = \"sqlserver-ee\"",
      "  major_engine_version     = \"11.00\"",
      "",
      "  option {",
      "    option_name = \"Timezone\"",
      "",
      "    option_settings {",
      "      name  = \"TIME_ZONE\"",
      "      value = \"UTC\"",
      "    }",
      "  }",
      "",
      "  option {",
      "    option_name = \"TDE\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-db_parameter_group": {
    "description": "Defines db_parameter_group",
    "prefix": "tf-aws-resource-db_parameter_group",
    "body": [
      "resource \"aws_db_parameter_group\" \"default\" {",
      "  name   = \"rds-pg\"",
      "  family = \"mysql5.6\"",
      "",
      "  parameter {",
      "    name  = \"character_set_server\"",
      "    value = \"utf8\"",
      "  }",
      "",
      "  parameter {",
      "    name  = \"character_set_client\"",
      "    value = \"utf8\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-db_security_group": {
    "description": "Defines db_security_group",
    "prefix": "tf-aws-resource-db_security_group",
    "body": [
      "resource \"aws_db_security_group\" \"default\" {",
      "  name = \"rds_sg\"",
      "",
      "  ingress {",
      "    cidr = \"10.0.0.0/24\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-db_snapshot": {
    "description": "Defines db_snapshot",
    "prefix": "tf-aws-resource-db_snapshot",
    "body": [
      "resource \"aws_db_instance\" \"bar\" {",
      "\tallocated_storage = 10",
      "\tengine = \"MySQL\"",
      "\tengine_version = \"5.6.21\"",
      "\tinstance_class = \"db.t2.micro\"",
      "\tname = \"baz\"",
      "\tpassword = \"barbarbarbar\"",
      "\tusername = \"foo\"",
      "",
      "    maintenance_window = \"Fri:09:00-Fri:09:30\"",
      "\tbackup_retention_period = 0",
      "\tparameter_group_name = \"default.mysql5.6\"",
      "}",
      "",
      "resource \"aws_db_snapshot\" \"test\" {",
      "\tdb_instance_identifier = \"${aws_db_instance.bar.id}\"",
      "\tdb_snapshot_identifier = \"testsnapshot1234\"",
      "}"
    ]
  },
  "aws-resource-db_subnet_group": {
    "description": "Defines db_subnet_group",
    "prefix": "tf-aws-resource-db_subnet_group",
    "body": [
      "resource \"aws_db_subnet_group\" \"default\" {",
      "  name       = \"main\"",
      "  subnet_ids = [\"${aws_subnet.frontend.id}\", \"${aws_subnet.backend.id}\"]",
      "",
      "  tags {",
      "    Name = \"My DB subnet group\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-default_network_acl": {
    "description": "Defines default_network_acl",
    "prefix": "tf-aws-resource-default_network_acl",
    "body": [
      "resource \"aws_vpc\" \"mainvpc\" {",
      "  cidr_block = \"10.1.0.0/16\"",
      "}",
      "",
      "resource \"aws_default_network_acl\" \"default\" {",
      "  default_network_acl_id = \"${aws_vpc.mainvpc.default_network_acl_id}\"",
      "",
      "  ingress {",
      "    protocol   = -1",
      "    rule_no    = 100",
      "    action     = \"allow\"",
      "    cidr_block = \"0.0.0.0/0\"",
      "    from_port  = 0",
      "    to_port    = 0",
      "  }",
      "",
      "  egress {",
      "    protocol   = -1",
      "    rule_no    = 100",
      "    action     = \"allow\"",
      "    cidr_block = \"0.0.0.0/0\"",
      "    from_port  = 0",
      "    to_port    = 0",
      "  }",
      "}"
    ]
  },
  "aws-resource-default_route_table": {
    "description": "Defines default_route_table",
    "prefix": "tf-aws-resource-default_route_table",
    "body": [
      "resource \"aws_default_route_table\" \"r\" {",
      "  default_route_table_id = \"${aws_vpc.foo.default_route_table_id}\"",
      "",
      "  route {",
      "    # ...",
      "  }",
      "",
      "  tags {",
      "    Name = \"default table\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-default_security_group": {
    "description": "Defines default_security_group",
    "prefix": "tf-aws-resource-default_security_group",
    "body": [
      "resource \"aws_vpc\" \"mainvpc\" {",
      "  cidr_block = \"10.1.0.0/16\"",
      "}",
      "",
      "resource \"aws_default_security_group\" \"default\" {",
      "  vpc_id = \"${aws_vpc.mainvpc.id}\"",
      "",
      "  ingress {",
      "    protocol  = -1",
      "    self      = true",
      "    from_port = 0",
      "    to_port   = 0",
      "  }",
      "",
      "  egress {",
      "    from_port   = 0",
      "    to_port     = 0",
      "    protocol    = \"-1\"",
      "    cidr_blocks = [\"0.0.0.0/0\"]",
      "  }",
      "}"
    ]
  },
  "aws-resource-default_subnet": {
    "description": "Defines default_subnet",
    "prefix": "tf-aws-resource-default_subnet",
    "body": [
      "resource \"aws_default_subnet\" \"default_az1\" {",
      "  availability_zone = \"us-west-2a\"",
      "",
      "\ttags {",
      "\t\tName = \"Default subnet for us-west-2a\"",
      "\t}",
      "}"
    ]
  },
  "aws-resource-default_vpc": {
    "description": "Defines default_vpc",
    "prefix": "tf-aws-resource-default_vpc",
    "body": [
      "resource \"aws_default_vpc\" \"default\" {",
      "\ttags {",
      "\t\tName = \"Default VPC\"",
      "\t}",
      "}"
    ]
  },
  "aws-resource-default_vpc_dhcp_options": {
    "description": "Defines default_vpc_dhcp_options",
    "prefix": "tf-aws-resource-default_vpc_dhcp_options",
    "body": [
      "resource \"aws_default_vpc_dhcp_options\" \"default\" {",
      "\ttags {",
      "\t\tName = \"Default DHCP Option Set\"",
      "\t}",
      "}"
    ]
  },
  "aws-resource-devicefarm_project": {
    "description": "Defines devicefarm_project",
    "prefix": "tf-aws-resource-devicefarm_project",
    "body": [
      "resource \"aws_devicefarm_project\" \"awesome_devices\" {",
      "    name = \"my-device-farm\"",
      "}"
    ]
  },
  "aws-resource-directory_service_conditional_forwarder": {
    "description": "Defines directory_service_conditional_forwarder",
    "prefix": "tf-aws-resource-directory_service_conditional_forwarder",
    "body": [
      "resource \"aws_directory_service_conditional_forwarder\" \"example\" {",
      "  directory_id = \"${aws_directory_service_directory.ad.id}\"",
      "  remote_domain_name  = \"example.com\"",
      "",
      "  dns_ips = [",
      "    \"8.8.8.8\",",
      "    \"8.8.4.4\",",
      "  ]",
      "}"
    ]
  },
  "aws-resource-directory_service_directory": {
    "description": "Defines directory_service_directory",
    "prefix": "tf-aws-resource-directory_service_directory",
    "body": [
      "resource \"aws_directory_service_directory\" \"bar\" {",
      "  name     = \"corp.notexample.com\"",
      "  password = \"SuperSecretPassw0rd\"",
      "  size     = \"Small\"",
      "",
      "  vpc_settings {",
      "    vpc_id     = \"${aws_vpc.main.id}\"",
      "    subnet_ids = [\"${aws_subnet.foo.id}\", \"${aws_subnet.bar.id}\"]",
      "  }",
      "",
      "  tags {",
      "    Project = \"foo\"",
      "  }",
      "}",
      "",
      "resource \"aws_vpc\" \"main\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_subnet\" \"foo\" {",
      "  vpc_id            = \"${aws_vpc.main.id}\"",
      "  availability_zone = \"us-west-2a\"",
      "  cidr_block        = \"10.0.1.0/24\"",
      "}",
      "",
      "resource \"aws_subnet\" \"bar\" {",
      "  vpc_id            = \"${aws_vpc.main.id}\"",
      "  availability_zone = \"us-west-2b\"",
      "  cidr_block        = \"10.0.2.0/24\"",
      "}"
    ]
  },
  "aws-resource-dms_certificate": {
    "description": "Defines dms_certificate",
    "prefix": "tf-aws-resource-dms_certificate",
    "body": [
      "# Create a new certificate",
      "resource \"aws_dms_certificate\" \"test\" {",
      "  certificate_id  = \"test-dms-certificate-tf\"",
      "  certificate_pem = \"...\"",
      "}"
    ]
  },
  "aws-resource-dms_endpoint": {
    "description": "Defines dms_endpoint",
    "prefix": "tf-aws-resource-dms_endpoint",
    "body": [
      "# Create a new endpoint",
      "resource \"aws_dms_endpoint\" \"test\" {",
      "  certificate_arn             = \"arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012\"",
      "  database_name               = \"test\"",
      "  endpoint_id                 = \"test-dms-endpoint-tf\"",
      "  endpoint_type               = \"source\"",
      "  engine_name                 = \"aurora\"",
      "  extra_connection_attributes = \"\"",
      "  kms_key_arn                 = \"arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012\"",
      "  password                    = \"test\"",
      "  port                        = 3306",
      "  server_name                 = \"test\"",
      "  ssl_mode                    = \"none\"",
      "",
      "  tags {",
      "    Name = \"test\"",
      "  }",
      "",
      "  username = \"test\"",
      "}"
    ]
  },
  "aws-resource-dms_replication_instance": {
    "description": "Defines dms_replication_instance",
    "prefix": "tf-aws-resource-dms_replication_instance",
    "body": [
      "# Create a new replication instance",
      "resource \"aws_dms_replication_instance\" \"test\" {",
      "  allocated_storage            = 20",
      "  apply_immediately            = true",
      "  auto_minor_version_upgrade   = true",
      "  availability_zone            = \"us-west-2c\"",
      "  engine_version               = \"1.9.0\"",
      "  kms_key_arn                  = \"arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012\"",
      "  multi_az                     = false",
      "  preferred_maintenance_window = \"sun:10:30-sun:14:30\"",
      "  publicly_accessible          = true",
      "  replication_instance_class   = \"dms.t2.micro\"",
      "  replication_instance_id      = \"test-dms-replication-instance-tf\"",
      "  replication_subnet_group_id  = \"${aws_dms_replication_subnet_group.test-dms-replication-subnet-group-tf}\"",
      "",
      "  tags {",
      "    Name = \"test\"",
      "  }",
      "",
      "  vpc_security_group_ids = [",
      "    \"sg-12345678\",",
      "  ]",
      "}"
    ]
  },
  "aws-resource-dms_replication_subnet_group": {
    "description": "Defines dms_replication_subnet_group",
    "prefix": "tf-aws-resource-dms_replication_subnet_group",
    "body": [
      "# Create a new replication subnet group",
      "resource \"aws_dms_replication_subnet_group\" \"test\" {",
      "  replication_subnet_group_description = \"Test replication subnet group\"",
      "  replication_subnet_group_id          = \"test-dms-replication-subnet-group-tf\"",
      "",
      "  subnet_ids = [",
      "    \"subnet-12345678\",",
      "  ]",
      "}"
    ]
  },
  "aws-resource-dms_replication_task": {
    "description": "Defines dms_replication_task",
    "prefix": "tf-aws-resource-dms_replication_task",
    "body": [
      "# Create a new replication task",
      "resource \"aws_dms_replication_task\" \"test\" {",
      "  cdc_start_time            = 1484346880",
      "  migration_type            = \"full-load\"",
      "  replication_instance_arn  = \"${aws_dms_replication_instance.test-dms-replication-instance-tf.replication_instance_arn}\"",
      "  replication_task_id       = \"test-dms-replication-task-tf\"",
      "  replication_task_settings = \"...\"",
      "  source_endpoint_arn       = \"${aws_dms_endpoint.test-dms-source-endpoint-tf.endpoint_arn}\"",
      "  table_mappings            = \"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"%\\\",\\\"table-name\\\":\\\"%\\\"},\\\"rule-action\\\":\\\"include\\\"}]}\"",
      "",
      "  tags {",
      "    Name = \"test\"",
      "  }",
      "",
      "  target_endpoint_arn = \"${aws_dms_endpoint.test-dms-target-endpoint-tf.endpoint_arn}\"",
      "}"
    ]
  },
  "aws-resource-dx_connection": {
    "description": "Defines dx_connection",
    "prefix": "tf-aws-resource-dx_connection",
    "body": [
      "resource \"aws_dx_connection\" \"hoge\" {",
      "  name = \"tf-dx-connection\"",
      "  bandwidth = \"1Gbps\"",
      "  location = \"EqDC2\"",
      "}"
    ]
  },
  "aws-resource-dx_connection_association": {
    "description": "Defines dx_connection_association",
    "prefix": "tf-aws-resource-dx_connection_association",
    "body": [
      "resource \"aws_dx_connection\" \"example\" {",
      "  name = \"example\"",
      "  bandwidth = \"1Gbps\"",
      "  location = \"EqSe2\"",
      "}",
      "",
      "resource \"aws_dx_lag\" \"example\" {",
      "  name = \"example\"",
      "  connections_bandwidth = \"1Gbps\"",
      "  location = \"EqSe2\"",
      "  number_of_connections = 1",
      "}",
      "",
      "resource \"aws_dx_connection_association\" \"example\" {",
      "  connection_id = \"${aws_dx_connection.example.id}\"",
      "  lag_id = \"${aws_dx_lag.example.id}\"",
      "}"
    ]
  },
  "aws-resource-dx_lag": {
    "description": "Defines dx_lag",
    "prefix": "tf-aws-resource-dx_lag",
    "body": [
      "resource \"aws_dx_lag\" \"hoge\" {",
      "  name = \"tf-dx-lag\"",
      "  connections_bandwidth = \"1Gbps\"",
      "  location = \"EqDC2\"",
      "  number_of_connections = 2",
      "  force_destroy = true",
      "}"
    ]
  },
  "aws-resource-dynamodb_global_table": {
    "description": "Defines dynamodb_global_table",
    "prefix": "tf-aws-resource-dynamodb_global_table",
    "body": [
      "provider \"aws\" {",
      "  alias  = \"us-east-1\"",
      "  region = \"us-east-1\"",
      "}",
      "",
      "provider \"aws\" {",
      "  alias  = \"us-west-2\"",
      "  region = \"us-west-2\"",
      "}",
      "",
      "resource \"aws_dynamodb_table\" \"us-east-1\" {",
      "  provider = \"aws.us-east-1\"",
      "",
      "  hash_key         = \"myAttribute\"",
      "  name             = \"myTable\"",
      "  stream_enabled   = true",
      "  stream_view_type = \"NEW_AND_OLD_IMAGES\"",
      "  read_capacity    = 1",
      "  write_capacity   = 1",
      "",
      "  attribute {",
      "    name = \"myAttribute\"",
      "    type = \"S\"",
      "  }",
      "}",
      "",
      "resource \"aws_dynamodb_table\" \"us-west-2\" {",
      "  provider = \"aws.us-west-2\"",
      "",
      "  hash_key         = \"myAttribute\"",
      "  name             = \"myTable\"",
      "  stream_enabled   = true",
      "  stream_view_type = \"NEW_AND_OLD_IMAGES\"",
      "  read_capacity    = 1",
      "  write_capacity   = 1",
      "",
      "  attribute {",
      "    name = \"myAttribute\"",
      "    type = \"S\"",
      "  }",
      "}",
      "",
      "resource \"aws_dynamodb_global_table\" \"myTable\" {",
      "  depends_on = [\"aws_dynamodb_table.us-east-1\", \"aws_dynamodb_table.us-west-2\"]",
      "  provider   = \"aws.us-east-1\"",
      "",
      "  name = \"myTable\"",
      "",
      "  replica {",
      "    region_name = \"us-east-1\"",
      "  }",
      "",
      "  replica {",
      "    region_name = \"us-west-2\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-dynamodb_table": {
    "description": "Defines dynamodb_table",
    "prefix": "tf-aws-resource-dynamodb_table",
    "body": [
      "resource \"aws_dynamodb_table\" \"basic-dynamodb-table\" {",
      "  name           = \"GameScores\"",
      "  read_capacity  = 20",
      "  write_capacity = 20",
      "  hash_key       = \"UserId\"",
      "  range_key      = \"GameTitle\"",
      "",
      "  attribute {",
      "    name = \"UserId\"",
      "    type = \"S\"",
      "  }",
      "",
      "  attribute {",
      "    name = \"GameTitle\"",
      "    type = \"S\"",
      "  }",
      "",
      "  attribute {",
      "    name = \"TopScore\"",
      "    type = \"N\"",
      "  }",
      "",
      "  ttl {",
      "    attribute_name = \"TimeToExist\"",
      "    enabled = false",
      "  }",
      "",
      "  global_secondary_index {",
      "    name               = \"GameTitleIndex\"",
      "    hash_key           = \"GameTitle\"",
      "    range_key          = \"TopScore\"",
      "    write_capacity     = 10",
      "    read_capacity      = 10",
      "    projection_type    = \"INCLUDE\"",
      "    non_key_attributes = [\"UserId\"]",
      "  }",
      "",
      "  tags {",
      "    Name        = \"dynamodb-table-1\"",
      "    Environment = \"production\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-dynamodb_table_item": {
    "description": "Defines dynamodb_table_item",
    "prefix": "tf-aws-resource-dynamodb_table_item",
    "body": [
      "resource \"aws_dynamodb_table_item\" \"example\" {",
      "  table_name = \"${aws_dynamodb_table.example.name}\"",
      "  hash_key = \"${aws_dynamodb_table.example.hash_key}\"",
      "  item = <<ITEM",
      "{",
      "  \"exampleHashKey\": {\"S\": \"something\"},",
      "  \"one\": {\"N\": \"11111\"},",
      "  \"two\": {\"N\": \"22222\"},",
      "  \"three\": {\"N\": \"33333\"},",
      "  \"four\": {\"N\": \"44444\"}",
      "}",
      "ITEM",
      "}",
      "",
      "resource \"aws_dynamodb_table\" \"example\" {",
      "  name = \"example-name\"",
      "  read_capacity = 10",
      "  write_capacity = 10",
      "  hash_key = \"exampleHashKey\"",
      "",
      "  attribute {",
      "    name = \"exampleHashKey\"",
      "    type = \"S\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ebs_snapshot": {
    "description": "Defines ebs_snapshot",
    "prefix": "tf-aws-resource-ebs_snapshot",
    "body": [
      "resource \"aws_ebs_volume\" \"example\" {",
      "    availability_zone = \"us-west-2a\"",
      "    size = 40",
      "    tags {",
      "        Name = \"HelloWorld\"",
      "    }",
      "}",
      "",
      "resource \"aws_ebs_snapshot\" \"example_snapshot\" {",
      "  volume_id = \"${aws_ebs_volume.example.id}\"",
      "",
      "  tags {",
      "    Name = \"HelloWorld_snap\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ebs_volume": {
    "description": "Defines ebs_volume",
    "prefix": "tf-aws-resource-ebs_volume",
    "body": [
      "resource \"aws_ebs_volume\" \"example\" {",
      "    availability_zone = \"us-west-2a\"",
      "    size = 40",
      "    tags {",
      "        Name = \"HelloWorld\"",
      "    }",
      "}"
    ]
  },
  "aws-resource-ecr_lifecycle_policy": {
    "description": "Defines ecr_lifecycle_policy",
    "prefix": "tf-aws-resource-ecr_lifecycle_policy",
    "body": [
      "resource \"aws_ecr_repository\" \"foo\" {",
      "  name = \"bar\"",
      "}",
      "",
      "resource \"aws_ecr_lifecycle_policy\" \"foopolicy\" {",
      "  repository = \"${aws_ecr_repository.foo.name}\"",
      "",
      "  policy = <<EOF",
      "{",
      "    \"rules\": [",
      "        {",
      "            \"rulePriority\": 1,",
      "            \"description\": \"Expire images older than 14 days\",",
      "            \"selection\": {",
      "                \"tagStatus\": \"untagged\",",
      "                \"countType\": \"sinceImagePushed\",",
      "                \"countUnit\": \"days\",",
      "                \"countNumber\": 14",
      "            },",
      "            \"action\": {",
      "                \"type\": \"expire\"",
      "            }",
      "        }",
      "    ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-ecr_repository": {
    "description": "Defines ecr_repository",
    "prefix": "tf-aws-resource-ecr_repository",
    "body": [
      "resource \"aws_ecr_repository\" \"foo\" {",
      "  name = \"bar\"",
      "}"
    ]
  },
  "aws-resource-ecr_repository_policy": {
    "description": "Defines ecr_repository_policy",
    "prefix": "tf-aws-resource-ecr_repository_policy",
    "body": [
      "resource \"aws_ecr_repository\" \"foo\" {",
      "  name = \"bar\"",
      "}",
      "",
      "resource \"aws_ecr_repository_policy\" \"foopolicy\" {",
      "  repository = \"${aws_ecr_repository.foo.name}\"",
      "",
      "  policy = <<EOF",
      "{",
      "    \"Version\": \"2008-10-17\",",
      "    \"Statement\": [",
      "        {",
      "            \"Sid\": \"new policy\",",
      "            \"Effect\": \"Allow\",",
      "            \"Principal\": \"*\",",
      "            \"Action\": [",
      "                \"ecr:GetDownloadUrlForLayer\",",
      "                \"ecr:BatchGetImage\",",
      "                \"ecr:BatchCheckLayerAvailability\",",
      "                \"ecr:PutImage\",",
      "                \"ecr:InitiateLayerUpload\",",
      "                \"ecr:UploadLayerPart\",",
      "                \"ecr:CompleteLayerUpload\",",
      "                \"ecr:DescribeRepositories\",",
      "                \"ecr:GetRepositoryPolicy\",",
      "                \"ecr:ListImages\",",
      "                \"ecr:DeleteRepository\",",
      "                \"ecr:BatchDeleteImage\",",
      "                \"ecr:SetRepositoryPolicy\",",
      "                \"ecr:DeleteRepositoryPolicy\"",
      "            ]",
      "        }",
      "    ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-ecs_cluster": {
    "description": "Defines ecs_cluster",
    "prefix": "tf-aws-resource-ecs_cluster",
    "body": [
      "resource \"aws_ecs_cluster\" \"foo\" {",
      "  name = \"white-hart\"",
      "}"
    ]
  },
  "aws-resource-ecs_service": {
    "description": "Defines ecs_service",
    "prefix": "tf-aws-resource-ecs_service",
    "body": [
      "resource \"aws_ecs_service\" \"mongo\" {",
      "  name            = \"mongodb\"",
      "  cluster         = \"${aws_ecs_cluster.foo.id}\"",
      "  task_definition = \"${aws_ecs_task_definition.mongo.arn}\"",
      "  desired_count   = 3",
      "  iam_role        = \"${aws_iam_role.foo.arn}\"",
      "  depends_on      = [\"aws_iam_role_policy.foo\"]",
      "",
      "  ordered_placement_strategy {",
      "    type  = \"binpack\"",
      "    field = \"cpu\"",
      "  }",
      "",
      "  load_balancer {",
      "    target_group_arn = \"${aws_lb_target_group.foo.arn}\"",
      "    container_name   = \"mongo\"",
      "    container_port   = 8080",
      "  }",
      "",
      "  placement_constraints {",
      "    type       = \"memberOf\"",
      "    expression = \"attribute:ecs.availability-zone in [us-west-2a, us-west-2b]\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ecs_task_definition": {
    "description": "Defines ecs_task_definition",
    "prefix": "tf-aws-resource-ecs_task_definition",
    "body": [
      "resource \"aws_ecs_task_definition\" \"service\" {",
      "  family                = \"service\"",
      "  container_definitions = \"${file(\"task-definitions/service.json\")}\"",
      "",
      "  volume {",
      "    name      = \"service-storage\"",
      "    host_path = \"/ecs/service-storage\"",
      "  }",
      "",
      "  placement_constraints {",
      "    type       = \"memberOf\"",
      "    expression = \"attribute:ecs.availability-zone in [us-west-2a, us-west-2b]\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-efs_file_system": {
    "description": "Defines efs_file_system",
    "prefix": "tf-aws-resource-efs_file_system",
    "body": [
      "resource \"aws_efs_file_system\" \"foo\" {",
      "  creation_token = \"my-product\"",
      "",
      "  tags {",
      "    Name = \"MyProduct\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-efs_mount_target": {
    "description": "Defines efs_mount_target",
    "prefix": "tf-aws-resource-efs_mount_target",
    "body": [
      "resource \"aws_efs_mount_target\" \"alpha\" {",
      "  file_system_id = \"${aws_efs_file_system.foo.id}\"",
      "  subnet_id      = \"${aws_subnet.alpha.id}\"",
      "}",
      "",
      "resource \"aws_vpc\" \"foo\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_subnet\" \"alpha\" {",
      "  vpc_id            = \"${aws_vpc.foo.id}\"",
      "  availability_zone = \"us-west-2a\"",
      "  cidr_block        = \"10.0.1.0/24\"",
      "}"
    ]
  },
  "aws-resource-egress_only_internet_gateway": {
    "description": "Defines egress_only_internet_gateway",
    "prefix": "tf-aws-resource-egress_only_internet_gateway",
    "body": [
      "resource \"aws_vpc\" \"foo\" {",
      "\tcidr_block = \"10.1.0.0/16\"",
      "\tassign_generated_ipv6_cidr_block = true",
      "}",
      "",
      "resource \"aws_egress_only_internet_gateway\" \"foo\" {",
      "  vpc_id = \"${aws_vpc.foo.id}\"",
      "}"
    ]
  },
  "aws-resource-eip": {
    "description": "Defines eip",
    "prefix": "tf-aws-resource-eip",
    "body": [
      "resource \"aws_eip\" \"lb\" {",
      "  instance = \"${aws_instance.web.id}\"",
      "  vpc      = true",
      "}"
    ]
  },
  "aws-resource-eip_association": {
    "description": "Defines eip_association",
    "prefix": "tf-aws-resource-eip_association",
    "body": [
      "resource \"aws_eip_association\" \"eip_assoc\" {",
      "  instance_id   = \"${aws_instance.web.id}\"",
      "  allocation_id = \"${aws_eip.example.id}\"",
      "}",
      "",
      "resource \"aws_instance\" \"web\" {",
      "  ami               = \"ami-21f78e11\"",
      "  availability_zone = \"us-west-2a\"",
      "  instance_type     = \"t1.micro\"",
      "",
      "  tags {",
      "    Name = \"HelloWorld\"",
      "  }",
      "}",
      "",
      "resource \"aws_eip\" \"example\" {",
      "  vpc = true",
      "}"
    ]
  },
  "aws-resource-elastic_beanstalk_application": {
    "description": "Defines elastic_beanstalk_application",
    "prefix": "tf-aws-resource-elastic_beanstalk_application",
    "body": [
      "resource \"aws_elastic_beanstalk_application\" \"tftest\" {",
      "  name        = \"tf-test-name\"",
      "  description = \"tf-test-desc\"",
      "",
      "  appversion_lifecycle {",
      "    service_role          = \"${aws_iam_role.beanstalk_service.arn}\"",
      "    max_count             = 128",
      "    delete_source_from_s3 = true",
      "  }",
      "}"
    ]
  },
  "aws-resource-elastic_beanstalk_application_version": {
    "description": "Defines elastic_beanstalk_application_version",
    "prefix": "tf-aws-resource-elastic_beanstalk_application_version",
    "body": [
      "resource \"aws_s3_bucket\" \"default\" {",
      "  bucket = \"tftest.applicationversion.bucket\"",
      "}",
      "",
      "resource \"aws_s3_bucket_object\" \"default\" {",
      "  bucket = \"${aws_s3_bucket.default.id}\"",
      "  key    = \"beanstalk/go-v1.zip\"",
      "  source = \"go-v1.zip\"",
      "}",
      "",
      "resource \"aws_elastic_beanstalk_application\" \"default\" {",
      "  name        = \"tf-test-name\"",
      "  description = \"tf-test-desc\"",
      "}",
      "",
      "resource \"aws_elastic_beanstalk_application_version\" \"default\" {",
      "  name        = \"tf-test-version-label\"",
      "  application = \"tf-test-name\"",
      "  description = \"application version created by terraform\"",
      "  bucket      = \"${aws_s3_bucket.default.id}\"",
      "  key         = \"${aws_s3_bucket_object.default.id}\"",
      "}"
    ]
  },
  "aws-resource-elastic_beanstalk_configuration_template": {
    "description": "Defines elastic_beanstalk_configuration_template",
    "prefix": "tf-aws-resource-elastic_beanstalk_configuration_template",
    "body": [
      "resource \"aws_elastic_beanstalk_application\" \"tftest\" {",
      "  name        = \"tf-test-name\"",
      "  description = \"tf-test-desc\"",
      "}",
      "",
      "resource \"aws_elastic_beanstalk_configuration_template\" \"tf_template\" {",
      "  name                = \"tf-test-template-config\"",
      "  application         = \"${aws_elastic_beanstalk_application.tftest.name}\"",
      "  solution_stack_name = \"64bit Amazon Linux 2015.09 v2.0.8 running Go 1.4\"",
      "}"
    ]
  },
  "aws-resource-elastic_beanstalk_environment": {
    "description": "Defines elastic_beanstalk_environment",
    "prefix": "tf-aws-resource-elastic_beanstalk_environment",
    "body": [
      "resource \"aws_elastic_beanstalk_application\" \"tftest\" {",
      "  name        = \"tf-test-name\"",
      "  description = \"tf-test-desc\"",
      "}",
      "",
      "resource \"aws_elastic_beanstalk_environment\" \"tfenvtest\" {",
      "  name                = \"tf-test-name\"",
      "  application         = \"${aws_elastic_beanstalk_application.tftest.name}\"",
      "  solution_stack_name = \"64bit Amazon Linux 2015.03 v2.0.3 running Go 1.4\"",
      "}"
    ]
  },
  "aws-resource-elastic_transcoder_pipeline": {
    "description": "Defines elastic_transcoder_pipeline",
    "prefix": "tf-aws-resource-elastic_transcoder_pipeline",
    "body": [
      "resource \"aws_elastictranscoder_pipeline\" \"bar\" {",
      "  input_bucket = \"${aws_s3_bucket.input_bucket.bucket}\"",
      "  name         = \"aws_elastictranscoder_pipeline_tf_test_\"",
      "  role         = \"${aws_iam_role.test_role.arn}\"",
      "",
      "  content_config = {",
      "    bucket        = \"${aws_s3_bucket.content_bucket.bucket}\"",
      "    storage_class = \"Standard\"",
      "  }",
      "",
      "  thumbnail_config = {",
      "    bucket        = \"${aws_s3_bucket.thumb_bucket.bucket}\"",
      "    storage_class = \"Standard\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-elastic_transcoder_preset": {
    "description": "Defines elastic_transcoder_preset",
    "prefix": "tf-aws-resource-elastic_transcoder_preset",
    "body": [
      "resource \"aws_elastictranscoder_preset\" \"bar\" {",
      "  container   = \"mp4\"",
      "  description = \"Sample Preset\"",
      "  name        = \"sample_preset\"",
      "",
      "  audio = {",
      "    audio_packing_mode = \"SingleTrack\"",
      "    bit_rate           = 96",
      "    channels           = 2",
      "    codec              = \"AAC\"",
      "    sample_rate        = 44100",
      "  }",
      "",
      "  audio_codec_options = {",
      "    profile = \"AAC-LC\"",
      "  }",
      "",
      "  video = {",
      "    bit_rate             = \"1600\"",
      "    codec                = \"H.264\"",
      "    display_aspect_ratio = \"16:9\"",
      "    fixed_gop            = \"false\"",
      "    frame_rate           = \"auto\"",
      "    max_frame_rate       = \"60\"",
      "    keyframes_max_dist   = 240",
      "    max_height           = \"auto\"",
      "    max_width            = \"auto\"",
      "    padding_policy       = \"Pad\"",
      "    sizing_policy        = \"Fit\"",
      "  }",
      "",
      "  video_codec_options = {",
      "    Profile                  = \"main\"",
      "    Level                    = \"2.2\"",
      "    MaxReferenceFrames       = 3",
      "    InterlaceMode            = \"Progressive\"",
      "    ColorSpaceConversionMode = \"None\"",
      "  }",
      "",
      "  video_watermarks = {",
      "    id                = \"Terraform Test\"",
      "    max_width         = \"20%\"",
      "    max_height        = \"20%\"",
      "    sizing_policy     = \"ShrinkToFit\"",
      "    horizontal_align  = \"Right\"",
      "    horizontal_offset = \"10px\"",
      "    vertical_align    = \"Bottom\"",
      "    vertical_offset   = \"10px\"",
      "    opacity           = \"55.5\"",
      "    target            = \"Content\"",
      "  }",
      "",
      "  thumbnails = {",
      "    format         = \"png\"",
      "    interval       = 120",
      "    max_width      = \"auto\"",
      "    max_height     = \"auto\"",
      "    padding_policy = \"Pad\"",
      "    sizing_policy  = \"Fit\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-elasticache_cluster": {
    "description": "Defines elasticache_cluster",
    "prefix": "tf-aws-resource-elasticache_cluster",
    "body": [
      "resource \"aws_elasticache_cluster\" \"example\" {",
      "  cluster_id           = \"cluster-example\"",
      "  engine               = \"memcached\"",
      "  node_type            = \"cache.m3.medium\"",
      "  num_cache_nodes      = 2",
      "  parameter_group_name = \"default.memcached1.4\"",
      "  port                 = 11211",
      "}"
    ]
  },
  "aws-resource-elasticache_parameter_group": {
    "description": "Defines elasticache_parameter_group",
    "prefix": "tf-aws-resource-elasticache_parameter_group",
    "body": [
      "resource \"aws_elasticache_parameter_group\" \"default\" {",
      "  name   = \"cache-params\"",
      "  family = \"redis2.8\"",
      "",
      "  parameter {",
      "    name  = \"activerehashing\"",
      "    value = \"yes\"",
      "  }",
      "",
      "  parameter {",
      "    name  = \"min-slaves-to-write\"",
      "    value = \"2\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-elasticache_replication_group": {
    "description": "Defines elasticache_replication_group",
    "prefix": "tf-aws-resource-elasticache_replication_group",
    "body": [
      "resource \"aws_elasticache_replication_group\" \"example\" {",
      "  automatic_failover_enabled    = true",
      "  availability_zones            = [\"us-west-2a\", \"us-west-2b\"]",
      "  replication_group_id          = \"tf-rep-group-1\"",
      "  replication_group_description = \"test description\"",
      "  node_type                     = \"cache.m3.medium\"",
      "  number_cache_clusters         = 2",
      "  parameter_group_name          = \"default.redis3.2\"",
      "  port                          = 6379",
      "}"
    ]
  },
  "aws-resource-elasticache_security_group": {
    "description": "Defines elasticache_security_group",
    "prefix": "tf-aws-resource-elasticache_security_group",
    "body": [
      "resource \"aws_security_group\" \"bar\" {",
      "  name = \"security-group\"",
      "}",
      "",
      "resource \"aws_elasticache_security_group\" \"bar\" {",
      "  name                 = \"elasticache-security-group\"",
      "  security_group_names = [\"${aws_security_group.bar.name}\"]",
      "}"
    ]
  },
  "aws-resource-elasticache_subnet_group": {
    "description": "Defines elasticache_subnet_group",
    "prefix": "tf-aws-resource-elasticache_subnet_group",
    "body": [
      "resource \"aws_vpc\" \"foo\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "",
      "  tags {",
      "    Name = \"tf-test\"",
      "  }",
      "}",
      "",
      "resource \"aws_subnet\" \"foo\" {",
      "  vpc_id            = \"${aws_vpc.foo.id}\"",
      "  cidr_block        = \"10.0.0.0/24\"",
      "  availability_zone = \"us-west-2a\"",
      "",
      "  tags {",
      "    Name = \"tf-test\"",
      "  }",
      "}",
      "",
      "resource \"aws_elasticache_subnet_group\" \"bar\" {",
      "  name       = \"tf-test-cache-subnet\"",
      "  subnet_ids = [\"${aws_subnet.foo.id}\"]",
      "}"
    ]
  },
  "aws-resource-elasticsearch_domain": {
    "description": "Defines elasticsearch_domain",
    "prefix": "tf-aws-resource-elasticsearch_domain",
    "body": [
      "resource \"aws_elasticsearch_domain\" \"es\" {",
      "  domain_name           = \"tf-test\"",
      "  elasticsearch_version = \"1.5\"",
      "  cluster_config {",
      "    instance_type = \"r3.large.elasticsearch\"",
      "  }",
      "",
      "  advanced_options {",
      "    \"rest.action.multi.allow_explicit_index\" = \"true\"",
      "  }",
      "",
      "  access_policies = <<CONFIG",
      "{",
      "\t\"Version\": \"2012-10-17\",",
      "\t\"Statement\": [",
      "\t\t{",
      "\t\t\t\"Action\": \"es:*\",",
      "\t\t\t\"Principal\": \"*\",",
      "\t\t\t\"Effect\": \"Allow\",",
      "\t\t\t\"Condition\": {",
      "\t\t\t\t\"IpAddress\": {\"aws:SourceIp\": [\"66.193.100.22/32\"]}",
      "\t\t\t}",
      "\t\t}",
      "\t]",
      "}",
      "CONFIG",
      "",
      "  snapshot_options {",
      "    automated_snapshot_start_hour = 23",
      "  }",
      "",
      "  tags {",
      "    Domain = \"TestDomain\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-elasticsearch_domain_policy": {
    "description": "Defines elasticsearch_domain_policy",
    "prefix": "tf-aws-resource-elasticsearch_domain_policy",
    "body": [
      "resource \"aws_elasticsearch_domain\" \"example\" {",
      "  domain_name           = \"tf-test\"",
      "  elasticsearch_version = \"2.3\"",
      "}",
      "",
      "resource \"aws_elasticsearch_domain_policy\" \"main\" {",
      "  domain_name = \"${aws_elasticsearch_domain.example.domain_name}\"",
      "",
      "  access_policies = <<POLICIES",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": [",
      "        {",
      "            \"Action\": \"es:*\",",
      "            \"Principal\": \"*\",",
      "            \"Effect\": \"Allow\",",
      "            \"Condition\": {",
      "                \"IpAddress\": {\"aws:SourceIp\": \"127.0.0.1/32\"}",
      "            },",
      "            \"Resource\": \"${aws_elasticsearch_domain.example.arn}\"",
      "        }",
      "    ]",
      "}",
      "POLICIES",
      "}"
    ]
  },
  "aws-resource-elb": {
    "description": "Defines elb",
    "prefix": "tf-aws-resource-elb",
    "body": [
      "# Create a new load balancer",
      "resource \"aws_elb\" \"bar\" {",
      "  name               = \"foobar-terraform-elb\"",
      "  availability_zones = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]",
      "",
      "  access_logs {",
      "    bucket        = \"foo\"",
      "    bucket_prefix = \"bar\"",
      "    interval      = 60",
      "  }",
      "",
      "  listener {",
      "    instance_port     = 8000",
      "    instance_protocol = \"http\"",
      "    lb_port           = 80",
      "    lb_protocol       = \"http\"",
      "  }",
      "",
      "  listener {",
      "    instance_port      = 8000",
      "    instance_protocol  = \"http\"",
      "    lb_port            = 443",
      "    lb_protocol        = \"https\"",
      "    ssl_certificate_id = \"arn:aws:iam::123456789012:server-certificate/certName\"",
      "  }",
      "",
      "  health_check {",
      "    healthy_threshold   = 2",
      "    unhealthy_threshold = 2",
      "    timeout             = 3",
      "    target              = \"HTTP:8000/\"",
      "    interval            = 30",
      "  }",
      "",
      "  instances                   = [\"${aws_instance.foo.id}\"]",
      "  cross_zone_load_balancing   = true",
      "  idle_timeout                = 400",
      "  connection_draining         = true",
      "  connection_draining_timeout = 400",
      "",
      "  tags {",
      "    Name = \"foobar-terraform-elb\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-elb_attachment": {
    "description": "Defines elb_attachment",
    "prefix": "tf-aws-resource-elb_attachment",
    "body": [
      "# Create a new load balancer attachment",
      "resource \"aws_elb_attachment\" \"baz\" {",
      "  elb      = \"${aws_elb.bar.id}\"",
      "  instance = \"${aws_instance.foo.id}\"",
      "}"
    ]
  },
  "aws-resource-emr_cluster": {
    "description": "Defines emr_cluster",
    "prefix": "tf-aws-resource-emr_cluster",
    "body": [
      "resource \"aws_emr_cluster\" \"emr-test-cluster\" {",
      "  name          = \"emr-test-arn\"",
      "  release_label = \"emr-4.6.0\"",
      "  applications  = [\"Spark\"]",
      "",
      "  termination_protection = false",
      "  keep_job_flow_alive_when_no_steps = true",
      "",
      "  ec2_attributes {",
      "    subnet_id                         = \"${aws_subnet.main.id}\"",
      "    emr_managed_master_security_group = \"${aws_security_group.sg.id}\"",
      "    emr_managed_slave_security_group  = \"${aws_security_group.sg.id}\"",
      "    instance_profile                  = \"${aws_iam_instance_profile.emr_profile.arn}\"",
      "  }",
      "  ",
      "  instance_group {",
      "      instance_role = \"CORE\"",
      "      instance_type = \"c4.large\"",
      "      instance_count = \"1\"",
      "      ebs_config {",
      "        size = \"40\"",
      "        type = \"gp2\"",
      "        volumes_per_instance = 1",
      "      }",
      "      bid_price = \"0.30\"",
      "      autoscaling_policy = <<EOF",
      "{",
      "\"Constraints\": {",
      "  \"MinCapacity\": 1,",
      "  \"MaxCapacity\": 2",
      "},",
      "\"Rules\": [",
      "  {",
      "    \"Name\": \"ScaleOutMemoryPercentage\",",
      "    \"Description\": \"Scale out if YARNMemoryAvailablePercentage is less than 15\",",
      "    \"Action\": {",
      "      \"SimpleScalingPolicyConfiguration\": {",
      "        \"AdjustmentType\": \"CHANGE_IN_CAPACITY\",",
      "        \"ScalingAdjustment\": 1,",
      "        \"CoolDown\": 300",
      "      }",
      "    },",
      "    \"Trigger\": {",
      "      \"CloudWatchAlarmDefinition\": {",
      "        \"ComparisonOperator\": \"LESS_THAN\",",
      "        \"EvaluationPeriods\": 1,",
      "        \"MetricName\": \"YARNMemoryAvailablePercentage\",",
      "        \"Namespace\": \"AWS/ElasticMapReduce\",",
      "        \"Period\": 300,",
      "        \"Statistic\": \"AVERAGE\",",
      "        \"Threshold\": 15.0,",
      "        \"Unit\": \"PERCENT\"",
      "      }",
      "    }",
      "  }",
      "]",
      "}",
      "EOF",
      "}",
      "  ebs_root_volume_size     = 100",
      "",
      "  master_instance_type = \"m3.xlarge\"",
      "  core_instance_type   = \"m3.xlarge\"",
      "  core_instance_count  = 1",
      "",
      "  tags {",
      "    role     = \"rolename\"",
      "    env      = \"env\"",
      "  }",
      "",
      "  bootstrap_action {",
      "    path = \"s3://elasticmapreduce/bootstrap-actions/run-if\"",
      "    name = \"runif\"",
      "    args = [\"instance.isMaster=true\", \"echo running on master node\"]",
      "  }",
      "",
      "  configurations = \"test-fixtures/emr_configurations.json\"",
      "",
      "  service_role = \"${aws_iam_role.iam_emr_service_role.arn}\"",
      "}"
    ]
  },
  "aws-resource-emr_instance_group": {
    "description": "Defines emr_instance_group",
    "prefix": "tf-aws-resource-emr_instance_group",
    "body": [
      "resource \"aws_emr_instance_group\" \"task\" {",
      "  cluster_id     = \"${aws_emr_cluster.tf-test-cluster.id}\"",
      "  instance_count = 1",
      "  instance_type  = \"m3.xlarge\"",
      "  name           = \"my little instance group\"",
      "}"
    ]
  },
  "aws-resource-emr_security_configuration": {
    "description": "Defines emr_security_configuration",
    "prefix": "tf-aws-resource-emr_security_configuration",
    "body": [
      "resource \"aws_emr_security_configuration\" \"foo\" {",
      "  name = \"emrsc_other\"",
      "",
      "  configuration = <<EOF",
      "{",
      "  \"EncryptionConfiguration\": {",
      "    \"AtRestEncryptionConfiguration\": {",
      "      \"S3EncryptionConfiguration\": {",
      "        \"EncryptionMode\": \"SSE-S3\"",
      "      },",
      "      \"LocalDiskEncryptionConfiguration\": {",
      "        \"EncryptionKeyProviderType\": \"AwsKms\",",
      "        \"AwsKmsKey\": \"arn:aws:kms:us-west-2:187416307283:alias/tf_emr_test_key\"",
      "      }",
      "    },",
      "    \"EnableInTransitEncryption\": false,",
      "    \"EnableAtRestEncryption\": true",
      "  }",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-flow_log": {
    "description": "Defines flow_log",
    "prefix": "tf-aws-resource-flow_log",
    "body": [
      "resource \"aws_flow_log\" \"test_flow_log\" {",
      "  log_group_name = \"${aws_cloudwatch_log_group.test_log_group.name}\"",
      "  iam_role_arn   = \"${aws_iam_role.test_role.arn}\"",
      "  vpc_id         = \"${aws_vpc.default.id}\"",
      "  traffic_type   = \"ALL\"",
      "}",
      "",
      "resource \"aws_cloudwatch_log_group\" \"test_log_group\" {",
      "  name = \"test_log_group\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"test_role\" {",
      "  name = \"test_role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Sid\": \"\",",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"Service\": \"vpc-flow-logs.amazonaws.com\"",
      "      },",
      "      \"Action\": \"sts:AssumeRole\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"test_policy\" {",
      "  name = \"test_policy\"",
      "  role = \"${aws_iam_role.test_role.id}\"",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"logs:CreateLogGroup\",",
      "        \"logs:CreateLogStream\",",
      "        \"logs:PutLogEvents\",",
      "        \"logs:DescribeLogGroups\",",
      "        \"logs:DescribeLogStreams\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-gamelift_alias": {
    "description": "Defines gamelift_alias",
    "prefix": "tf-aws-resource-gamelift_alias",
    "body": [
      "resource \"aws_gamelift_alias\" \"example\" {",
      "  name = \"example-alias\"",
      "  description = \"Example Description\"",
      "  routing_strategy {",
      "    message = \"Example Message\"",
      "    type = \"TERMINAL\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-gamelift_build": {
    "description": "Defines gamelift_build",
    "prefix": "tf-aws-resource-gamelift_build",
    "body": [
      "resource \"aws_gamelift_build\" \"test\" {",
      "  name = \"example-build\"",
      "  operating_system = \"WINDOWS_2012\"",
      "  storage_location {",
      "    bucket = \"${aws_s3_bucket.test.bucket}\"",
      "    key = \"${aws_s3_bucket_object.test.key}\"",
      "    role_arn = \"${aws_iam_role.test.arn}\"",
      "  }",
      "  depends_on = [\"aws_iam_role_policy.test\"]",
      "}"
    ]
  },
  "aws-resource-gamelift_fleet": {
    "description": "Defines gamelift_fleet",
    "prefix": "tf-aws-resource-gamelift_fleet",
    "body": [
      "resource \"aws_gamelift_fleet\" \"example\" {",
      "  build_id = \"${aws_gamelift_build.example.id}\"",
      "  ec2_instance_type = \"t2.micro\"",
      "  name = \"example-fleet-name\"",
      "  runtime_configuration {",
      "    server_process {",
      "      concurrent_executions = 1",
      "      launch_path = \"C:\\\\game\\\\GomokuServer.exe\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-glacier_vault": {
    "description": "Defines glacier_vault",
    "prefix": "tf-aws-resource-glacier_vault",
    "body": [
      "resource \"aws_sns_topic\" \"aws_sns_topic\" {",
      "  name = \"glacier-sns-topic\"",
      "}",
      "",
      "resource \"aws_glacier_vault\" \"my_archive\" {",
      "  name = \"MyArchive\"",
      "",
      "  notification {",
      "    sns_topic = \"${aws_sns_topic.aws_sns_topic.arn}\"",
      "    events    = [\"ArchiveRetrievalCompleted\", \"InventoryRetrievalCompleted\"]",
      "  }",
      "",
      "  access_policy = <<EOF",
      "{",
      "    \"Version\":\"2012-10-17\",",
      "    \"Statement\":[",
      "       {",
      "          \"Sid\": \"add-read-only-perm\",",
      "          \"Principal\": \"*\",",
      "          \"Effect\": \"Allow\",",
      "          \"Action\": [",
      "             \"glacier:InitiateJob\",",
      "             \"glacier:GetJobOutput\"",
      "          ],",
      "          \"Resource\": \"arn:aws:glacier:eu-west-1:432981146916:vaults/MyArchive\"",
      "       }",
      "    ]",
      "}",
      "EOF",
      "",
      "  tags {",
      "    Test = \"MyArchive\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-glue_catalog_database": {
    "description": "Defines glue_catalog_database",
    "prefix": "tf-aws-resource-glue_catalog_database",
    "body": [
      "resource \"aws_glue_catalog_database\" \"aws_glue_catalog_database\" {",
      "  name = \"MyCatalogDatabase\"",
      "}"
    ]
  },
  "aws-resource-glue_catalog_table": {
    "description": "Defines glue_catalog_table",
    "prefix": "tf-aws-resource-glue_catalog_table",
    "body": [
      "resource \"aws_glue_catalog_table\" \"aws_glue_catalog_table\" {",
      "  name = \"MyCatalogTable\"",
      "  database_name = \"MyCatalogDatabase\"",
      "}"
    ]
  },
  "aws-resource-glue_connection": {
    "description": "Defines glue_connection",
    "prefix": "tf-aws-resource-glue_connection",
    "body": [
      "resource \"aws_glue_connection\" \"example\" {",
      "  connection_properties = {",
      "    JDBC_CONNECTION_URL = \"jdbc:mysql://example.com/exampledatabase\"",
      "    PASSWORD            = \"examplepassword\"",
      "    USERNAME            = \"exampleusername\"",
      "  }",
      "",
      "  name = \"example\"",
      "}"
    ]
  },
  "aws-resource-glue_job": {
    "description": "Defines glue_job",
    "prefix": "tf-aws-resource-glue_job",
    "body": [
      "resource \"aws_glue_job\" \"example\" {",
      "  name     = \"example\"",
      "  role_arn = \"${aws_iam_role.example.arn}\"",
      "",
      "  command {",
      "    script_location = \"s3://${aws_s3_bucket.example.bucket}/example.py\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-guardduty_detector": {
    "description": "Defines guardduty_detector",
    "prefix": "tf-aws-resource-guardduty_detector",
    "body": [
      "resource \"aws_guardduty_detector\" \"MyDetector\" {",
      "  enable = true",
      "}"
    ]
  },
  "aws-resource-guardduty_ipset": {
    "description": "Defines guardduty_ipset",
    "prefix": "tf-aws-resource-guardduty_ipset",
    "body": [
      "resource \"aws_guardduty_detector\" \"master\" {",
      "  enable = true",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"bucket\" {",
      "  acl = \"private\"",
      "}",
      "",
      "resource \"aws_s3_bucket_object\" \"MyIPSet\" {",
      "  acl     = \"public-read\"",
      "  content = \"10.0.0.0/8\\n\"",
      "  bucket  = \"${aws_s3_bucket.bucket.id}\"",
      "  key     = \"MyIPSet\"",
      "}",
      "",
      "resource \"aws_guardduty_ipset\" \"MyIPSet\" {",
      "  activate    = true",
      "  detector_id = \"${aws_guardduty_detector.master.id}\"",
      "  format      = \"TXT\"",
      "  location    = \"https://s3.amazonaws.com/${aws_s3_bucket_object.MyIPSet.bucket}/${aws_s3_bucket_object.MyIPSet.key}\"",
      "  name        = \"MyIPSet\"",
      "}"
    ]
  },
  "aws-resource-guardduty_member": {
    "description": "Defines guardduty_member",
    "prefix": "tf-aws-resource-guardduty_member",
    "body": [
      "resource \"aws_guardduty_detector\" \"master\" {",
      "  enable = true",
      "}",
      "",
      "resource \"aws_guardduty_detector\" \"member\" {",
      "  provider = \"aws.dev\"",
      "",
      "  enable = true",
      "}",
      "",
      "resource \"aws_guardduty_member\" \"member\" {",
      "  account_id  = \"${aws_guardduty_detector.member.account_id}\"",
      "  detector_id = \"${aws_guardduty_detector.master.id}\"",
      "  email       = \"required@example.com\"",
      "}"
    ]
  },
  "aws-resource-guardduty_threatintelset": {
    "description": "Defines guardduty_threatintelset",
    "prefix": "tf-aws-resource-guardduty_threatintelset",
    "body": [
      "resource \"aws_guardduty_detector\" \"master\" {",
      "  enable = true",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"bucket\" {",
      "  acl = \"private\"",
      "}",
      "",
      "resource \"aws_s3_bucket_object\" \"MyThreatIntelSet\" {",
      "  acl     = \"public-read\"",
      "  content = \"10.0.0.0/8\\n\"",
      "  bucket  = \"${aws_s3_bucket.bucket.id}\"",
      "  key     = \"MyThreatIntelSet\"",
      "}",
      "",
      "resource \"aws_guardduty_threatintelset\" \"MyThreatIntelSet\" {",
      "  activate    = true",
      "  detector_id = \"${aws_guardduty_detector.master.id}\"",
      "  format      = \"TXT\"",
      "  location    = \"https://s3.amazonaws.com/${aws_s3_bucket_object.MyThreatIntelSet.bucket}/${aws_s3_bucket_object.MyThreatIntelSet.key}\"",
      "  name        = \"MyThreatIntelSet\"",
      "}"
    ]
  },
  "aws-resource-iam_access_key": {
    "description": "Defines iam_access_key",
    "prefix": "tf-aws-resource-iam_access_key",
    "body": [
      "resource \"aws_iam_access_key\" \"lb\" {",
      "  user    = \"${aws_iam_user.lb.name}\"",
      "  pgp_key = \"keybase:some_person_that_exists\"",
      "}",
      "",
      "resource \"aws_iam_user\" \"lb\" {",
      "  name = \"loadbalancer\"",
      "  path = \"/system/\"",
      "}",
      "",
      "resource \"aws_iam_user_policy\" \"lb_ro\" {",
      "  name = \"test\"",
      "  user = \"${aws_iam_user.lb.name}\"",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"ec2:Describe*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "output \"secret\" {",
      "  value = \"${aws_iam_access_key.lb.encrypted_secret}\"",
      "}"
    ]
  },
  "aws-resource-iam_account_alias": {
    "description": "Defines iam_account_alias",
    "prefix": "tf-aws-resource-iam_account_alias",
    "body": [
      "resource \"aws_iam_account_alias\" \"alias\" {",
      "  account_alias = \"my-account-alias\"",
      "}"
    ]
  },
  "aws-resource-iam_account_password_policy": {
    "description": "Defines iam_account_password_policy",
    "prefix": "tf-aws-resource-iam_account_password_policy",
    "body": [
      "resource \"aws_iam_account_password_policy\" \"strict\" {",
      "  minimum_password_length        = 8",
      "  require_lowercase_characters   = true",
      "  require_numbers                = true",
      "  require_uppercase_characters   = true",
      "  require_symbols                = true",
      "  allow_users_to_change_password = true",
      "}"
    ]
  },
  "aws-resource-iam_group": {
    "description": "Defines iam_group",
    "prefix": "tf-aws-resource-iam_group",
    "body": [
      "resource \"aws_iam_group\" \"developers\" {",
      "  name = \"developers\"",
      "  path = \"/users/\"",
      "}"
    ]
  },
  "aws-resource-iam_group_membership": {
    "description": "Defines iam_group_membership",
    "prefix": "tf-aws-resource-iam_group_membership",
    "body": [
      "resource \"aws_iam_group_membership\" \"team\" {",
      "  name = \"tf-testing-group-membership\"",
      "",
      "  users = [",
      "    \"${aws_iam_user.user_one.name}\",",
      "    \"${aws_iam_user.user_two.name}\",",
      "  ]",
      "",
      "  group = \"${aws_iam_group.group.name}\"",
      "}",
      "",
      "resource \"aws_iam_group\" \"group\" {",
      "  name = \"test-group\"",
      "}",
      "",
      "resource \"aws_iam_user\" \"user_one\" {",
      "  name = \"test-user\"",
      "}",
      "",
      "resource \"aws_iam_user\" \"user_two\" {",
      "  name = \"test-user-two\"",
      "}"
    ]
  },
  "aws-resource-iam_group_policy": {
    "description": "Defines iam_group_policy",
    "prefix": "tf-aws-resource-iam_group_policy",
    "body": [
      "resource \"aws_iam_group_policy\" \"my_developer_policy\" {",
      "  name  = \"my_developer_policy\"",
      "  group = \"${aws_iam_group.my_developers.id}\"",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"ec2:Describe*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_group\" \"my_developers\" {",
      "  name = \"developers\"",
      "  path = \"/users/\"",
      "}"
    ]
  },
  "aws-resource-iam_group_policy_attachment": {
    "description": "Defines iam_group_policy_attachment",
    "prefix": "tf-aws-resource-iam_group_policy_attachment",
    "body": [
      "resource \"aws_iam_group\" \"group\" {",
      "  name = \"test-group\"",
      "}",
      "",
      "resource \"aws_iam_policy\" \"policy\" {",
      "  name        = \"test-policy\"",
      "  description = \"A test policy\"",
      "  policy      = # omitted",
      "}",
      "",
      "resource \"aws_iam_group_policy_attachment\" \"test-attach\" {",
      "  group      = \"${aws_iam_group.group.name}\"",
      "  policy_arn = \"${aws_iam_policy.policy.arn}\"",
      "}"
    ]
  },
  "aws-resource-iam_instance_profile": {
    "description": "Defines iam_instance_profile",
    "prefix": "tf-aws-resource-iam_instance_profile",
    "body": [
      "resource \"aws_iam_instance_profile\" \"test_profile\" {",
      "  name = \"test_profile\"",
      "  role = \"${aws_iam_role.role.name}\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"role\" {",
      "  name = \"test_role\"",
      "  path = \"/\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": [",
      "        {",
      "            \"Action\": \"sts:AssumeRole\",",
      "            \"Principal\": {",
      "               \"Service\": \"ec2.amazonaws.com\"",
      "            },",
      "            \"Effect\": \"Allow\",",
      "            \"Sid\": \"\"",
      "        }",
      "    ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-iam_openid_connect_provider": {
    "description": "Defines iam_openid_connect_provider",
    "prefix": "tf-aws-resource-iam_openid_connect_provider",
    "body": [
      "resource \"aws_iam_openid_connect_provider\" \"default\" {",
      "    url = \"https://accounts.google.com\"",
      "    client_id_list = [",
      "     \"266362248691-342342xasdasdasda-apps.googleusercontent.com\"",
      "    ]",
      "    thumbprint_list = []",
      "}"
    ]
  },
  "aws-resource-iam_policy": {
    "description": "Defines iam_policy",
    "prefix": "tf-aws-resource-iam_policy",
    "body": [
      "resource \"aws_iam_policy\" \"policy\" {",
      "  name        = \"test_policy\"",
      "  path        = \"/\"",
      "  description = \"My test policy\"",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"ec2:Describe*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-iam_policy_attachment": {
    "description": "Defines iam_policy_attachment",
    "prefix": "tf-aws-resource-iam_policy_attachment",
    "body": [
      "resource \"aws_iam_user\" \"user\" {",
      "  name = \"test-user\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"role\" {",
      "  name = \"test-role\"",
      "}",
      "",
      "resource \"aws_iam_group\" \"group\" {",
      "  name = \"test-group\"",
      "}",
      "",
      "resource \"aws_iam_policy\" \"policy\" {",
      "  name        = \"test-policy\"",
      "  description = \"A test policy\"",
      "  policy      =  # omitted",
      "}",
      "",
      "resource \"aws_iam_policy_attachment\" \"test-attach\" {",
      "  name       = \"test-attachment\"",
      "  users      = [\"${aws_iam_user.user.name}\"]",
      "  roles      = [\"${aws_iam_role.role.name}\"]",
      "  groups     = [\"${aws_iam_group.group.name}\"]",
      "  policy_arn = \"${aws_iam_policy.policy.arn}\"",
      "}"
    ]
  },
  "aws-resource-iam_role": {
    "description": "Defines iam_role",
    "prefix": "tf-aws-resource-iam_role",
    "body": [
      "resource \"aws_iam_role\" \"test_role\" {",
      "  name = \"test_role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"ec2.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-iam_role_policy": {
    "description": "Defines iam_role_policy",
    "prefix": "tf-aws-resource-iam_role_policy",
    "body": [
      "resource \"aws_iam_role_policy\" \"test_policy\" {",
      "  name = \"test_policy\"",
      "  role = \"${aws_iam_role.test_role.id}\"",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"ec2:Describe*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role\" \"test_role\" {",
      "  name = \"test_role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"ec2.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-iam_role_policy_attachment": {
    "description": "Defines iam_role_policy_attachment",
    "prefix": "tf-aws-resource-iam_role_policy_attachment",
    "body": [
      "resource \"aws_iam_role\" \"role\" {",
      "    name = \"test-role\"",
      "    assume_role_policy = <<EOF",
      "    {",
      "      \"Version\": \"2012-10-17\",",
      "      \"Statement\": [",
      "        {",
      "          \"Action\": \"sts:AssumeRole\",",
      "          \"Principal\": {",
      "            \"Service\": \"ec2.amazonaws.com\"",
      "          },",
      "          \"Effect\": \"Allow\",",
      "          \"Sid\": \"\"",
      "        }",
      "      ]",
      "    }",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_policy\" \"policy\" {",
      "    name        = \"test-policy\"",
      "    description = \"A test policy\"",
      "    policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"ec2:Describe*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"test-attach\" {",
      "    role       = \"${aws_iam_role.role.name}\"",
      "    policy_arn = \"${aws_iam_policy.policy.arn}\"",
      "}"
    ]
  },
  "aws-resource-iam_saml_provider": {
    "description": "Defines iam_saml_provider",
    "prefix": "tf-aws-resource-iam_saml_provider",
    "body": [
      "resource \"aws_iam_saml_provider\" \"default\" {",
      "  name                   = \"myprovider\"",
      "  saml_metadata_document = \"${file(\"saml-metadata.xml\")}\"",
      "}"
    ]
  },
  "aws-resource-iam_server_certificate": {
    "description": "Defines iam_server_certificate",
    "prefix": "tf-aws-resource-iam_server_certificate",
    "body": [
      "resource \"aws_iam_server_certificate\" \"test_cert\" {",
      "  name             = \"some_test_cert\"",
      "  certificate_body = \"${file(\"self-ca-cert.pem\")}\"",
      "  private_key      = \"${file(\"test-key.pem\")}\"",
      "}"
    ]
  },
  "aws-resource-iam_service_linked_role": {
    "description": "Defines iam_service_linked_role",
    "prefix": "tf-aws-resource-iam_service_linked_role",
    "body": [
      "resource \"aws_iam_service_linked_role\" \"elasticbeanstalk\" {",
      "  aws_service_name = \"elasticbeanstalk.amazonaws.com\"",
      "}"
    ]
  },
  "aws-resource-iam_user": {
    "description": "Defines iam_user",
    "prefix": "tf-aws-resource-iam_user",
    "body": [
      "resource \"aws_iam_user\" \"lb\" {",
      "  name = \"loadbalancer\"",
      "  path = \"/system/\"",
      "}",
      "",
      "resource \"aws_iam_access_key\" \"lb\" {",
      "  user = \"${aws_iam_user.lb.name}\"",
      "}",
      "",
      "resource \"aws_iam_user_policy\" \"lb_ro\" {",
      "  name = \"test\"",
      "  user = \"${aws_iam_user.lb.name}\"",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"ec2:Describe*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-iam_user_group_membership": {
    "description": "Defines iam_user_group_membership",
    "prefix": "tf-aws-resource-iam_user_group_membership",
    "body": [
      "resource \"aws_iam_user_group_membership\" {",
      "  user = \"${aws_iam_user.user1.name}\"",
      "",
      "  groups = [",
      "    \"${aws_iam_group.group1.name}\",",
      "    \"${aws_iam_group.group2.name}\",",
      "  ]",
      "}",
      "",
      "resource \"aws_iam_user_group_membership\" {",
      "  user = \"${aws_iam_user.user1.name}\"",
      "",
      "  groups = [",
      "    \"${aws_iam_group.group3.name}\",",
      "  ]",
      "}",
      "",
      "resource \"aws_iam_user\" \"user1\" {",
      "  name = \"user1\"",
      "}",
      "",
      "resource \"aws_iam_group\" \"group1\" {",
      "  name = \"group1\"",
      "}",
      "",
      "resource \"aws_iam_group\" \"group2\" {",
      "  name = \"group2\"",
      "}",
      "",
      "resource \"aws_iam_group\" \"group3\" {",
      "  name = \"group3\"",
      "}"
    ]
  },
  "aws-resource-iam_user_login_profile": {
    "description": "Defines iam_user_login_profile",
    "prefix": "tf-aws-resource-iam_user_login_profile",
    "body": [
      "resource \"aws_iam_user\" \"u\" {",
      "  name          = \"auser\"",
      "  path          = \"/\"",
      "  force_destroy = true",
      "}",
      "",
      "resource \"aws_iam_user_login_profile\" \"u\" {",
      "  user    = \"${aws_iam_user.u.name}\"",
      "  pgp_key = \"keybase:some_person_that_exists\"",
      "}",
      "",
      "output \"password\" {",
      "  value = \"${aws_iam_user_login_profile.u.encrypted_password}\"",
      "}"
    ]
  },
  "aws-resource-iam_user_policy": {
    "description": "Defines iam_user_policy",
    "prefix": "tf-aws-resource-iam_user_policy",
    "body": [
      "resource \"aws_iam_user_policy\" \"lb_ro\" {",
      "  name = \"test\"",
      "  user = \"${aws_iam_user.lb.name}\"",
      "",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"ec2:Describe*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_user\" \"lb\" {",
      "  name = \"loadbalancer\"",
      "  path = \"/system/\"",
      "}",
      "",
      "resource \"aws_iam_access_key\" \"lb\" {",
      "  user = \"${aws_iam_user.lb.name}\"",
      "}"
    ]
  },
  "aws-resource-iam_user_policy_attachment": {
    "description": "Defines iam_user_policy_attachment",
    "prefix": "tf-aws-resource-iam_user_policy_attachment",
    "body": [
      "resource \"aws_iam_user\" \"user\" {",
      "    name = \"test-user\"",
      "}",
      "",
      "resource \"aws_iam_policy\" \"policy\" {",
      "    name        = \"test-policy\"",
      "    description = \"A test policy\"",
      "    policy      = # omitted",
      "}",
      "",
      "resource \"aws_iam_user_policy_attachment\" \"test-attach\" {",
      "    user       = \"${aws_iam_user.user.name}\"",
      "    policy_arn = \"${aws_iam_policy.policy.arn}\"",
      "}"
    ]
  },
  "aws-resource-iam_user_ssh_key": {
    "description": "Defines iam_user_ssh_key",
    "prefix": "tf-aws-resource-iam_user_ssh_key",
    "body": [
      "resource \"aws_iam_user\" \"user\" {",
      "  name = \"test-user\"",
      "  path = \"/\"",
      "}",
      "",
      "resource \"aws_iam_user_ssh_key\" \"user\" {",
      "  username   = \"${aws_iam_user.user.name}\"",
      "  encoding   = \"SSH\"",
      "  public_key = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD3F6tyPEFEzV0LX3X8BsXdMsQz1x2cEikKDEY0aIj41qgxMCP/iteneqXSIFZBp5vizPvaoIR3Um9xK7PGoW8giupGn+EPuxIA4cDM4vzOqOkiMPhz5XK0whEjkVzTo4+S0puvDZuwIsdiW9mxhJc7tgBNL0cYlWSYVkz4G/fslNfRPW5mYAM49f4fhtxPb5ok4Q2Lg9dPKVHO/Bgeu5woMc7RY0p1ej6D4CKFE6lymSDJpW0YHX/wqE9+cfEauh7xZcG0q9t2ta6F6fmX0agvpFyZo8aFbXeUBr7osSCJNgvavWbM/06niWrOvYX2xwWdhXmXSrbX8ZbabVohBK41 mytest@mydomain.com\"",
      "}"
    ]
  },
  "aws-resource-inspector_assessment_target": {
    "description": "Defines inspector_assessment_target",
    "prefix": "tf-aws-resource-inspector_assessment_target",
    "body": [
      "resource \"aws_inspector_resource_group\" \"bar\" {",
      "  tags {",
      "    Name = \"foo\"",
      "    Env  = \"bar\"",
      "  }",
      "}",
      "",
      "resource \"aws_inspector_assessment_target\" \"foo\" {",
      "  name               = \"assessment target\"",
      "  resource_group_arn = \"${aws_inspector_resource_group.bar.arn}\"",
      "}"
    ]
  },
  "aws-resource-inspector_assessment_template": {
    "description": "Defines inspector_assessment_template",
    "prefix": "tf-aws-resource-inspector_assessment_template",
    "body": [
      "resource \"aws_inspector_assessment_template\" \"foo\" {",
      "  name       = \"bar template\"",
      "  target_arn = \"${aws_inspector_assessment_target.foo.arn}\"",
      "  duration   = 3600",
      "",
      "  rules_package_arns = [",
      "    \"arn:aws:inspector:us-west-2:758058086616:rulespackage/0-9hgA516p\",",
      "    \"arn:aws:inspector:us-west-2:758058086616:rulespackage/0-H5hpSawc\",",
      "    \"arn:aws:inspector:us-west-2:758058086616:rulespackage/0-JJOtZiqQ\",",
      "    \"arn:aws:inspector:us-west-2:758058086616:rulespackage/0-vg5GGHSD\",",
      "  ]",
      "}"
    ]
  },
  "aws-resource-inspector_resource_group": {
    "description": "Defines inspector_resource_group",
    "prefix": "tf-aws-resource-inspector_resource_group",
    "body": [
      "resource \"aws_inspector_resource_group\" \"bar\" {",
      "  tags {",
      "    Name = \"foo\"",
      "    Env  = \"bar\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-instance": {
    "description": "Defines instance",
    "prefix": "tf-aws-resource-instance",
    "body": [
      "# Create a new instance of the latest Ubuntu 14.04 on an",
      "# t2.micro node with an AWS Tag naming it \"HelloWorld\"",
      "provider \"aws\" {",
      "  region = \"us-west-2\"",
      "}",
      "",
      "data \"aws_ami\" \"ubuntu\" {",
      "  most_recent = true",
      "",
      "  filter {",
      "    name   = \"name\"",
      "    values = [\"ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"virtualization-type\"",
      "    values = [\"hvm\"]",
      "  }",
      "",
      "  owners = [\"099720109477\"] # Canonical",
      "}",
      "",
      "resource \"aws_instance\" \"web\" {",
      "  ami           = \"${data.aws_ami.ubuntu.id}\"",
      "  instance_type = \"t2.micro\"",
      "",
      "  tags {",
      "    Name = \"HelloWorld\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-internet_gateway": {
    "description": "Defines internet_gateway",
    "prefix": "tf-aws-resource-internet_gateway",
    "body": [
      "resource \"aws_internet_gateway\" \"gw\" {",
      "  vpc_id = \"${aws_vpc.main.id}\"",
      "",
      "  tags {",
      "    Name = \"main\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-iot_certificate": {
    "description": "Defines iot_certificate",
    "prefix": "tf-aws-resource-iot_certificate",
    "body": [
      "resource \"aws_iot_certificate\" \"cert\" {",
      "  csr = \"${file(\"/my/csr.pem\")}\"",
      "  active = true",
      "}"
    ]
  },
  "aws-resource-iot_policy": {
    "description": "Defines iot_policy",
    "prefix": "tf-aws-resource-iot_policy",
    "body": [
      "resource \"aws_iot_policy\" \"pubsub\" {",
      "  name        = \"PubSubToAnyTopic\"",
      "  policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": [",
      "        \"iot:*\"",
      "      ],",
      "      \"Effect\": \"Allow\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-iot_thing": {
    "description": "Defines iot_thing",
    "prefix": "tf-aws-resource-iot_thing",
    "body": [
      "resource \"aws_iot_thing\" \"example\" {",
      "  name = \"example\"",
      "  attributes {",
      "  \tFirst = \"examplevalue\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-iot_thing_type": {
    "description": "Defines iot_thing_type",
    "prefix": "tf-aws-resource-iot_thing_type",
    "body": [
      "resource \"aws_iot_thing_type\" \"foo\" {",
      "  name = \"my_iot_thing\"",
      "}"
    ]
  },
  "aws-resource-iot_topic_rule": {
    "description": "Defines iot_topic_rule",
    "prefix": "tf-aws-resource-iot_topic_rule",
    "body": [
      "resource \"aws_iot_topic_rule\" \"rule\" {",
      "  name = \"MyRule\"",
      "  description = \"Example rule\"",
      "  enabled = true",
      "  sql = \"SELECT * FROM 'topic/test'\"",
      "  sql_version = \"2015-10-08\"",
      "",
      "  sns {",
      "    message_format = \"RAW\"",
      "    role_arn = \"${aws_iam_role.role.arn}\"",
      "    target_arn = \"${aws_sns_topic.mytopic.arn}\"",
      "  }",
      "}",
      "",
      "resource \"aws_sns_topic\" \"mytopic\" {",
      "  name = \"mytopic\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"role\" {",
      "    name = \"myrole\"",
      "    assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {",
      "        \"Service\": \"iot.amazonaws.com\"",
      "      },",
      "      \"Action\": \"sts:AssumeRole\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy\" \"iam_policy_for_lambda\" {",
      "    name = \"mypolicy\"",
      "    role = \"${aws_iam_role.role.id}\"",
      "    policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "        \"Effect\": \"Allow\",",
      "        \"Action\": [",
      "            \"sns:Publish\"",
      "        ],",
      "        \"Resource\": \"${aws_sns_topic.mytopic.arn}\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-key_pair": {
    "description": "Defines key_pair",
    "prefix": "tf-aws-resource-key_pair",
    "body": [
      "resource \"aws_key_pair\" \"deployer\" {",
      "  key_name   = \"deployer-key\"",
      "  public_key = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD3F6tyPEFEzV0LX3X8BsXdMsQz1x2cEikKDEY0aIj41qgxMCP/iteneqXSIFZBp5vizPvaoIR3Um9xK7PGoW8giupGn+EPuxIA4cDM4vzOqOkiMPhz5XK0whEjkVzTo4+S0puvDZuwIsdiW9mxhJc7tgBNL0cYlWSYVkz4G/fslNfRPW5mYAM49f4fhtxPb5ok4Q2Lg9dPKVHO/Bgeu5woMc7RY0p1ej6D4CKFE6lymSDJpW0YHX/wqE9+cfEauh7xZcG0q9t2ta6F6fmX0agvpFyZo8aFbXeUBr7osSCJNgvavWbM/06niWrOvYX2xwWdhXmXSrbX8ZbabVohBK41 email@example.com\"",
      "}"
    ]
  },
  "aws-resource-kinesis_firehose_delivery_stream": {
    "description": "Defines kinesis_firehose_delivery_stream",
    "prefix": "tf-aws-resource-kinesis_firehose_delivery_stream",
    "body": [
      "resource \"aws_kinesis_firehose_delivery_stream\" \"extended_s3_stream\" {",
      "  name        = \"terraform-kinesis-firehose-extended-s3-test-stream\"",
      "  destination = \"extended_s3\"",
      "",
      "  extended_s3_configuration {",
      "    role_arn   = \"${aws_iam_role.firehose_role.arn}\"",
      "    bucket_arn = \"${aws_s3_bucket.bucket.arn}\"",
      "    processing_configuration = [",
      "      {",
      "        enabled = \"true\"",
      "        processors = [",
      "          {",
      "            type = \"Lambda\"",
      "            parameters = [",
      "              {",
      "                parameter_name = \"LambdaArn\"",
      "                parameter_value = \"${aws_lambda_function.lambda_processor.arn}:$LATEST\"",
      "              }",
      "            ]",
      "          }",
      "        ]",
      "      }",
      "    ]",
      "  }",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"bucket\" {",
      "  bucket = \"tf-test-bucket\"",
      "  acl    = \"private\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"firehose_role\" {",
      "  name = \"firehose_test_role\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"firehose.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role\" \"lambda_iam\" {",
      "  name = \"lambda_iam\"",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"lambda.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_lambda_function\" \"lambda_processor\" {",
      "  filename = \"lambda.zip\"",
      "  function_name = \"firehose_lambda_processor\"",
      "  role = \"${aws_iam_role.lambda_iam.arn}\"",
      "  handler = \"exports.handler\"",
      "  runtime = \"nodejs4.3\"",
      "}"
    ]
  },
  "aws-resource-kinesis_stream": {
    "description": "Defines kinesis_stream",
    "prefix": "tf-aws-resource-kinesis_stream",
    "body": [
      "resource \"aws_kinesis_stream\" \"test_stream\" {",
      "  name             = \"terraform-kinesis-test\"",
      "  shard_count      = 1",
      "  retention_period = 48",
      "",
      "  shard_level_metrics = [",
      "    \"IncomingBytes\",",
      "    \"OutgoingBytes\",",
      "  ]",
      "",
      "  tags {",
      "    Environment = \"test\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-kms_alias": {
    "description": "Defines kms_alias",
    "prefix": "tf-aws-resource-kms_alias",
    "body": [
      "resource \"aws_kms_key\" \"a\" {}",
      "",
      "resource \"aws_kms_alias\" \"a\" {",
      "  name          = \"alias/my-key-alias\"",
      "  target_key_id = \"${aws_kms_key.a.key_id}\"",
      "}"
    ]
  },
  "aws-resource-kms_grant": {
    "description": "Defines kms_grant",
    "prefix": "tf-aws-resource-kms_grant",
    "body": [
      "resource \"aws_kms_key\" \"a\" {}",
      "",
      "resource \"aws_iam_role\" \"a\" {",
      "name = \"iam-role-for-grant\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"lambda.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_kms_grant\" \"a\" {",
      "  name              = \"my-grant\"",
      "  key_id            = \"${aws_kms_key.a.key_id}\"",
      "  grantee_principal = \"${aws_iam_role.a.arn}\"",
      "  operations        = [ \"Encrypt\", \"Decrypt\", \"GenerateDataKey\" ]",
      "  constraints {",
      "    encryption_context_equals {",
      "      Department = \"Finance\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-kms_key": {
    "description": "Defines kms_key",
    "prefix": "tf-aws-resource-kms_key",
    "body": [
      "resource \"aws_kms_key\" \"a\" {",
      "  description             = \"KMS key 1\"",
      "  deletion_window_in_days = 10",
      "}"
    ]
  },
  "aws-resource-lambda_alias": {
    "description": "Defines lambda_alias",
    "prefix": "tf-aws-resource-lambda_alias",
    "body": [
      "resource \"aws_lambda_alias\" \"test_alias\" {",
      "  name             = \"testalias\"",
      "  description      = \"a sample description\"",
      "  function_name    = \"${aws_lambda_function.lambda_function_test.arn}\"",
      "  function_version = \"$LATEST\"",
      "}"
    ]
  },
  "aws-resource-lambda_event_source_mapping": {
    "description": "Defines lambda_event_source_mapping",
    "prefix": "tf-aws-resource-lambda_event_source_mapping",
    "body": [
      "resource \"aws_lambda_event_source_mapping\" \"event_source_mapping\" {",
      "  batch_size        = 100",
      "  event_source_arn  = \"arn:aws:kinesis:REGION:123456789012:stream/stream_name\"",
      "  enabled           = true",
      "  function_name     = \"arn:aws:lambda:REGION:123456789012:function:function_name\"",
      "  starting_position = \"TRIM_HORIZON|LATEST\"",
      "}"
    ]
  },
  "aws-resource-lambda_function": {
    "description": "Defines lambda_function",
    "prefix": "tf-aws-resource-lambda_function",
    "body": [
      "resource \"aws_iam_role\" \"iam_for_lambda\" {",
      "  name = \"iam_for_lambda\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"lambda.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}",
      "",
      "resource \"aws_lambda_function\" \"test_lambda\" {",
      "  filename         = \"lambda_function_payload.zip\"",
      "  function_name    = \"lambda_function_name\"",
      "  role             = \"${aws_iam_role.iam_for_lambda.arn}\"",
      "  handler          = \"exports.test\"",
      "  source_code_hash = \"${base64sha256(file(\"lambda_function_payload.zip\"))}\"",
      "  runtime          = \"nodejs4.3\"",
      "",
      "  environment {",
      "    variables = {",
      "      foo = \"bar\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-lambda_permission": {
    "description": "Defines lambda_permission",
    "prefix": "tf-aws-resource-lambda_permission",
    "body": [
      "resource \"aws_lambda_permission\" \"allow_cloudwatch\" {",
      "  statement_id   = \"AllowExecutionFromCloudWatch\"",
      "  action         = \"lambda:InvokeFunction\"",
      "  function_name  = \"${aws_lambda_function.test_lambda.function_name}\"",
      "  principal      = \"events.amazonaws.com\"",
      "  source_arn     = \"arn:aws:events:eu-west-1:111122223333:rule/RunDaily\"",
      "  qualifier      = \"${aws_lambda_alias.test_alias.name}\"",
      "}",
      "",
      "resource \"aws_lambda_alias\" \"test_alias\" {",
      "  name             = \"testalias\"",
      "  description      = \"a sample description\"",
      "  function_name    = \"${aws_lambda_function.test_lambda.function_name}\"",
      "  function_version = \"$LATEST\"",
      "}",
      "",
      "resource \"aws_lambda_function\" \"test_lambda\" {",
      "  filename      = \"lambdatest.zip\"",
      "  function_name = \"lambda_function_name\"",
      "  role          = \"${aws_iam_role.iam_for_lambda.arn}\"",
      "  handler       = \"exports.handler\"",
      "  runtime       = \"nodejs6.10\"",
      "}",
      "",
      "resource \"aws_iam_role\" \"iam_for_lambda\" {",
      "  name = \"iam_for_lambda\"",
      "",
      "  assume_role_policy = <<EOF",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Action\": \"sts:AssumeRole\",",
      "      \"Principal\": {",
      "        \"Service\": \"lambda.amazonaws.com\"",
      "      },",
      "      \"Effect\": \"Allow\",",
      "      \"Sid\": \"\"",
      "    }",
      "  ]",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-launch_configuration": {
    "description": "Defines launch_configuration",
    "prefix": "tf-aws-resource-launch_configuration",
    "body": [
      "data \"aws_ami\" \"ubuntu\" {",
      "  most_recent = true",
      "",
      "  filter {",
      "    name   = \"name\"",
      "    values = [\"ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*\"]",
      "  }",
      "",
      "  filter {",
      "    name   = \"virtualization-type\"",
      "    values = [\"hvm\"]",
      "  }",
      "",
      "  owners = [\"099720109477\"] # Canonical",
      "}",
      "",
      "resource \"aws_launch_configuration\" \"as_conf\" {",
      "  name          = \"web_config\"",
      "  image_id      = \"${data.aws_ami.ubuntu.id}\"",
      "  instance_type = \"t2.micro\"",
      "}"
    ]
  },
  "aws-resource-launch_template": {
    "description": "Defines launch_template",
    "prefix": "tf-aws-resource-launch_template",
    "body": [
      "resource \"aws_launch_template\" \"foo\" {",
      "  name = \"foo\"",
      "",
      "  block_device_mappings {",
      "    device_name = \"/dev/sda1\"",
      "    ebs {",
      "      volume_size = 20",
      "    }",
      "  }",
      "",
      "  credit_specification {",
      "    cpu_credits = \"standard\"",
      "  }",
      "",
      "  disable_api_termination = true",
      "",
      "  ebs_optimized = true",
      "",
      "  elastic_gpu_specifications {",
      "    type = \"test\"",
      "  }",
      "",
      "  iam_instance_profile {",
      "    name = \"test\"",
      "  }",
      "",
      "  image_id = \"ami-test\"",
      "",
      "  instance_initiated_shutdown_behavior = \"terminate\"",
      "",
      "  instance_market_options {",
      "    market_type = \"spot\"",
      "  }",
      "",
      "  instance_type = \"t2.micro\"",
      "",
      "  kernel_id = \"test\"",
      "",
      "  key_name = \"test\"",
      "",
      "  monitoring {",
      "    enabled = true",
      "  }",
      "",
      "  network_interfaces {",
      "    associate_public_ip_address = true",
      "  }",
      "",
      "  placement {",
      "    availability_zone = \"us-west-2a\"",
      "  }",
      "",
      "  ram_disk_id = \"test\"",
      "",
      "  vpc_security_group_ids = [\"sg-12345678\"]",
      "",
      "  tag_specifications {",
      "    resource_type = \"instance\"",
      "    tags {",
      "      Name = \"test\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-lb": {
    "description": "Defines lb",
    "prefix": "tf-aws-resource-lb",
    "body": [
      "resource \"aws_lb\" \"test\" {",
      "  name               = \"test-lb-tf\"",
      "  internal           = false",
      "  load_balancer_type = \"application\"",
      "  security_groups    = [\"${aws_security_group.lb_sg.id}\"]",
      "  subnets            = [\"${aws_subnet.public.*.id}\"]",
      "",
      "  enable_deletion_protection = true",
      "",
      "  access_logs {",
      "    bucket  = \"${aws_s3_bucket.lb_logs.bucket}\"",
      "    prefix  = \"test-lb\"",
      "    enabled = true",
      "  }",
      "",
      "  tags {",
      "    Environment = \"production\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-lb_cookie_stickiness_policy": {
    "description": "Defines lb_cookie_stickiness_policy",
    "prefix": "tf-aws-resource-lb_cookie_stickiness_policy",
    "body": [
      "resource \"aws_elb\" \"lb\" {",
      "  name               = \"test-lb\"",
      "  availability_zones = [\"us-east-1a\"]",
      "",
      "  listener {",
      "    instance_port     = 8000",
      "    instance_protocol = \"http\"",
      "    lb_port           = 80",
      "    lb_protocol       = \"http\"",
      "  }",
      "}",
      "",
      "resource \"aws_lb_cookie_stickiness_policy\" \"foo\" {",
      "  name                     = \"foo-policy\"",
      "  load_balancer            = \"${aws_elb.lb.id}\"",
      "  lb_port                  = 80",
      "  cookie_expiration_period = 600",
      "}"
    ]
  },
  "aws-resource-lb_listener": {
    "description": "Defines lb_listener",
    "prefix": "tf-aws-resource-lb_listener",
    "body": [
      "# Create a new load balancer",
      "resource \"aws_lb\" \"front_end\" {",
      "  # ...",
      "}",
      "",
      "resource \"aws_lb_target_group\" \"front_end\" {",
      "  # ...",
      "}",
      "",
      "resource \"aws_lb_listener\" \"front_end\" {",
      "  load_balancer_arn = \"${aws_lb.front_end.arn}\"",
      "  port              = \"443\"",
      "  protocol          = \"HTTPS\"",
      "  ssl_policy        = \"ELBSecurityPolicy-2015-05\"",
      "  certificate_arn   = \"arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4\"",
      "",
      "  default_action {",
      "    target_group_arn = \"${aws_lb_target_group.front_end.arn}\"",
      "    type             = \"forward\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-lb_listener_certificate": {
    "description": "Defines lb_listener_certificate",
    "prefix": "tf-aws-resource-lb_listener_certificate",
    "body": [
      "resource \"aws_acm_certificate\" \"example\" {",
      "  # ...",
      "}",
      "",
      "resource \"aws_lb\" \"front_end\" {",
      "  # ...",
      "}",
      "",
      "resource \"aws_lb_listener\" \"front_end\" {",
      "  # ...",
      "}",
      "",
      "resource \"aws_lb_listener_certificate\" \"example\" {",
      "  listener_arn    = \"${aws_lb_listener.front_end.arn}\"",
      "  certificate_arn = \"${aws_acm_certificate.example.arn}\"",
      "}"
    ]
  },
  "aws-resource-lb_listener_rule": {
    "description": "Defines lb_listener_rule",
    "prefix": "tf-aws-resource-lb_listener_rule",
    "body": [
      "# Create a new load balancer",
      "resource \"aws_lb\" \"front_end\" {",
      "  # ...",
      "}",
      "",
      "resource \"aws_lb_listener\" \"front_end\" {",
      "  # Other parameters",
      "}",
      "",
      "resource \"aws_lb_listener_rule\" \"static\" {",
      "  listener_arn = \"${aws_lb_listener.front_end.arn}\"",
      "  priority     = 100",
      "",
      "  action {",
      "    type             = \"forward\"",
      "    target_group_arn = \"${aws_lb_target_group.static.arn}\"",
      "  }",
      "",
      "  condition {",
      "    field  = \"path-pattern\"",
      "    values = [\"/static/*\"]",
      "  }",
      "}",
      "",
      "resource \"aws_lb_listener_rule\" \"host_based_routing\" {",
      "  listener_arn = \"${aws_lb_listener.front_end.arn}\"",
      "  priority     = 99",
      "",
      "  action {",
      "    type             = \"forward\"",
      "    target_group_arn = \"${aws_lb_target_group.static.arn}\"",
      "  }",
      "",
      "  condition {",
      "    field  = \"host-header\"",
      "    values = [\"my-service.*.terraform.io\"]",
      "  }",
      "}",
      ""
    ]
  },
  "aws-resource-lb_ssl_negotiation_policy": {
    "description": "Defines lb_ssl_negotiation_policy",
    "prefix": "tf-aws-resource-lb_ssl_negotiation_policy",
    "body": [
      "resource \"aws_elb\" \"lb\" {",
      "  name               = \"test-lb\"",
      "  availability_zones = [\"us-east-1a\"]",
      "",
      "  listener {",
      "    instance_port      = 8000",
      "    instance_protocol  = \"https\"",
      "    lb_port            = 443",
      "    lb_protocol        = \"https\"",
      "    ssl_certificate_id = \"arn:aws:iam::123456789012:server-certificate/certName\"",
      "  }",
      "}",
      "",
      "resource \"aws_lb_ssl_negotiation_policy\" \"foo\" {",
      "  name          = \"foo-policy\"",
      "  load_balancer = \"${aws_elb.lb.id}\"",
      "  lb_port       = 443",
      "",
      "  attribute {",
      "    name  = \"Protocol-TLSv1\"",
      "    value = \"false\"",
      "  }",
      "",
      "  attribute {",
      "    name  = \"Protocol-TLSv1.1\"",
      "    value = \"false\"",
      "  }",
      "",
      "  attribute {",
      "    name  = \"Protocol-TLSv1.2\"",
      "    value = \"true\"",
      "  }",
      "",
      "  attribute {",
      "    name  = \"Server-Defined-Cipher-Order\"",
      "    value = \"true\"",
      "  }",
      "",
      "  attribute {",
      "    name  = \"ECDHE-RSA-AES128-GCM-SHA256\"",
      "    value = \"true\"",
      "  }",
      "",
      "  attribute {",
      "    name  = \"AES128-GCM-SHA256\"",
      "    value = \"true\"",
      "  }",
      "",
      "  attribute {",
      "    name  = \"EDH-RSA-DES-CBC3-SHA\"",
      "    value = \"false\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-lb_target_group": {
    "description": "Defines lb_target_group",
    "prefix": "tf-aws-resource-lb_target_group",
    "body": [
      "resource \"aws_lb_target_group\" \"test\" {",
      "  name     = \"tf-example-lb-tg\"",
      "  port     = 80",
      "  protocol = \"HTTP\"",
      "  vpc_id   = \"${aws_vpc.main.id}\"",
      "}",
      "",
      "resource \"aws_vpc\" \"main\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}"
    ]
  },
  "aws-resource-lb_target_group_attachment": {
    "description": "Defines lb_target_group_attachment",
    "prefix": "tf-aws-resource-lb_target_group_attachment",
    "body": [
      "resource \"aws_lb_target_group_attachment\" \"test\" {",
      "  target_group_arn = \"${aws_lb_target_group.test.arn}\"",
      "  target_id        = \"${aws_instance.test.id}\"",
      "  port             = 80",
      "}",
      "",
      "resource \"aws_lb_target_group\" \"test\" {",
      "  // Other arguments",
      "}",
      "",
      "resource \"aws_instance\" \"test\" {",
      "  // Other arguments",
      "}"
    ]
  },
  "aws-resource-lightsail_domain": {
    "description": "Defines lightsail_domain",
    "prefix": "tf-aws-resource-lightsail_domain",
    "body": [
      "resource \"aws_lightsail_domain\" \"domain_test\" {",
      "  domain_name = \"mydomain.com\"",
      "}"
    ]
  },
  "aws-resource-lightsail_instance": {
    "description": "Defines lightsail_instance",
    "prefix": "tf-aws-resource-lightsail_instance",
    "body": [
      "# Create a new GitLab Lightsail Instance",
      "resource \"aws_lightsail_instance\" \"gitlab_test\" {",
      "  name              = \"custom gitlab\"",
      "  availability_zone = \"us-east-1b\"",
      "  blueprint_id      = \"string\"",
      "  bundle_id         = \"string\"",
      "  key_pair_name     = \"some_key_name\"",
      "}"
    ]
  },
  "aws-resource-lightsail_key_pair": {
    "description": "Defines lightsail_key_pair",
    "prefix": "tf-aws-resource-lightsail_key_pair",
    "body": [
      "# Create a new Lightsail Key Pair",
      "resource \"aws_lightsail_key_pair\" \"lg_key_pair\" {",
      "  name = \"lg_key_pair\"",
      "}"
    ]
  },
  "aws-resource-lightsail_static_ip": {
    "description": "Defines lightsail_static_ip",
    "prefix": "tf-aws-resource-lightsail_static_ip",
    "body": [
      "resource \"aws_lightsail_static_ip\" \"test\" {",
      "  name = \"example\"",
      "}"
    ]
  },
  "aws-resource-lightsail_static_ip_attachment": {
    "description": "Defines lightsail_static_ip_attachment",
    "prefix": "tf-aws-resource-lightsail_static_ip_attachment",
    "body": [
      "resource \"aws_lightsail_static_ip_attachment\" \"test\" {",
      "  static_ip_name = \"${aws_lightsail_static_ip.test.name}\"",
      "  instance_name = \"${aws_lightsail_instance.test.name}\"",
      "}",
      "",
      "resource \"aws_lightsail_static_ip\" \"test\" {",
      "  name = \"example\"",
      "}",
      "",
      "resource \"aws_lightsail_instance\" \"test\" {",
      "  name              = \"example\"",
      "  availability_zone = \"us-east-1b\"",
      "  blueprint_id      = \"string\"",
      "  bundle_id         = \"string\"",
      "  key_pair_name     = \"some_key_name\"",
      "}"
    ]
  },
  "aws-resource-load_balancer_backend_server_policy": {
    "description": "Defines load_balancer_backend_server_policy",
    "prefix": "tf-aws-resource-load_balancer_backend_server_policy",
    "body": [
      "resource \"aws_elb\" \"wu-tang\" {",
      "  name               = \"wu-tang\"",
      "  availability_zones = [\"us-east-1a\"]",
      "",
      "  listener {",
      "    instance_port      = 443",
      "    instance_protocol  = \"http\"",
      "    lb_port            = 443",
      "    lb_protocol        = \"https\"",
      "    ssl_certificate_id = \"arn:aws:iam::000000000000:server-certificate/wu-tang.net\"",
      "  }",
      "",
      "  tags {",
      "    Name = \"wu-tang\"",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_policy\" \"wu-tang-ca-pubkey-policy\" {",
      "  load_balancer_name = \"${aws_elb.wu-tang.name}\"",
      "  policy_name        = \"wu-tang-ca-pubkey-policy\"",
      "  policy_type_name   = \"PublicKeyPolicyType\"",
      "",
      "  policy_attribute = {",
      "    name  = \"PublicKey\"",
      "    value = \"${file(\"wu-tang-pubkey\")}\"",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_policy\" \"wu-tang-root-ca-backend-auth-policy\" {",
      "  load_balancer_name = \"${aws_elb.wu-tang.name}\"",
      "  policy_name        = \"wu-tang-root-ca-backend-auth-policy\"",
      "  policy_type_name   = \"BackendServerAuthenticationPolicyType\"",
      "",
      "  policy_attribute = {",
      "    name  = \"PublicKeyPolicyName\"",
      "    value = \"${aws_load_balancer_policy.wu-tang-root-ca-pubkey-policy.policy_name}\"",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_backend_server_policy\" \"wu-tang-backend-auth-policies-443\" {",
      "  load_balancer_name = \"${aws_elb.wu-tang.name}\"",
      "  instance_port      = 443",
      "",
      "  policy_names = [",
      "    \"${aws_load_balancer_policy.wu-tang-root-ca-backend-auth-policy.policy_name}\",",
      "  ]",
      "}"
    ]
  },
  "aws-resource-load_balancer_listener_policy": {
    "description": "Defines load_balancer_listener_policy",
    "prefix": "tf-aws-resource-load_balancer_listener_policy",
    "body": [
      "resource \"aws_elb\" \"wu-tang\" {",
      "  name               = \"wu-tang\"",
      "  availability_zones = [\"us-east-1a\"]",
      "",
      "  listener {",
      "    instance_port      = 443",
      "    instance_protocol  = \"http\"",
      "    lb_port            = 443",
      "    lb_protocol        = \"https\"",
      "    ssl_certificate_id = \"arn:aws:iam::000000000000:server-certificate/wu-tang.net\"",
      "  }",
      "",
      "  tags {",
      "    Name = \"wu-tang\"",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_policy\" \"wu-tang-ssl\" {",
      "  load_balancer_name = \"${aws_elb.wu-tang.name}\"",
      "  policy_name        = \"wu-tang-ssl\"",
      "  policy_type_name   = \"SSLNegotiationPolicyType\"",
      "",
      "  policy_attribute = {",
      "    name  = \"ECDHE-ECDSA-AES128-GCM-SHA256\"",
      "    value = \"true\"",
      "  }",
      "",
      "  policy_attribute = {",
      "    name  = \"Protocol-TLSv1.2\"",
      "    value = \"true\"",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_listener_policy\" \"wu-tang-listener-policies-443\" {",
      "  load_balancer_name = \"${aws_elb.wu-tang.name}\"",
      "  load_balancer_port = 443",
      "",
      "  policy_names = [",
      "    \"${aws_load_balancer_policy.wu-tang-ssl.policy_name}\",",
      "  ]",
      "}"
    ]
  },
  "aws-resource-load_balancer_policy": {
    "description": "Defines load_balancer_policy",
    "prefix": "tf-aws-resource-load_balancer_policy",
    "body": [
      "resource \"aws_elb\" \"wu-tang\" {",
      "  name               = \"wu-tang\"",
      "  availability_zones = [\"us-east-1a\"]",
      "",
      "  listener {",
      "    instance_port      = 443",
      "    instance_protocol  = \"http\"",
      "    lb_port            = 443",
      "    lb_protocol        = \"https\"",
      "    ssl_certificate_id = \"arn:aws:iam::000000000000:server-certificate/wu-tang.net\"",
      "  }",
      "",
      "  tags {",
      "    Name = \"wu-tang\"",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_policy\" \"wu-tang-ca-pubkey-policy\" {",
      "  load_balancer_name = \"${aws_elb.wu-tang.name}\"",
      "  policy_name        = \"wu-tang-ca-pubkey-policy\"",
      "  policy_type_name   = \"PublicKeyPolicyType\"",
      "",
      "  policy_attribute = {",
      "    name  = \"PublicKey\"",
      "    value = \"${file(\"wu-tang-pubkey\")}\"",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_policy\" \"wu-tang-root-ca-backend-auth-policy\" {",
      "  load_balancer_name = \"${aws_elb.wu-tang.name}\"",
      "  policy_name        = \"wu-tang-root-ca-backend-auth-policy\"",
      "  policy_type_name   = \"BackendServerAuthenticationPolicyType\"",
      "",
      "  policy_attribute = {",
      "    name  = \"PublicKeyPolicyName\"",
      "    value = \"${aws_load_balancer_policy.wu-tang-root-ca-pubkey-policy.policy_name}\"",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_policy\" \"wu-tang-ssl\" {",
      "  load_balancer_name = \"${aws_elb.wu-tang.name}\"",
      "  policy_name        = \"wu-tang-ssl\"",
      "  policy_type_name   = \"SSLNegotiationPolicyType\"",
      "",
      "  policy_attribute = {",
      "    name  = \"ECDHE-ECDSA-AES128-GCM-SHA256\"",
      "    value = \"true\"",
      "  }",
      "",
      "  policy_attribute = {",
      "    name  = \"Protocol-TLSv1.2\"",
      "    value = \"true\"",
      "  }",
      "}",
      "",
      "resource \"aws_load_balancer_backend_server_policy\" \"wu-tang-backend-auth-policies-443\" {",
      "  load_balancer_name = \"${aws_elb.wu-tang.name}\"",
      "  instance_port      = 443",
      "",
      "  policy_names = [",
      "    \"${aws_load_balancer_policy.wu-tang-root-ca-backend-auth-policy.policy_name}\",",
      "  ]",
      "}",
      "",
      "resource \"aws_load_balancer_listener_policy\" \"wu-tang-listener-policies-443\" {",
      "  load_balancer_name = \"${aws_elb.wu-tang.name}\"",
      "  load_balancer_port = 443",
      "",
      "  policy_names = [",
      "    \"${aws_load_balancer_policy.wu-tang-ssl.policy_name}\",",
      "  ]",
      "}"
    ]
  },
  "aws-resource-main_route_table_assoc": {
    "description": "Defines main_route_table_assoc",
    "prefix": "tf-aws-resource-main_route_table_assoc",
    "body": [
      "resource \"aws_main_route_table_association\" \"a\" {",
      "  vpc_id         = \"${aws_vpc.foo.id}\"",
      "  route_table_id = \"${aws_route_table.bar.id}\"",
      "}"
    ]
  },
  "aws-resource-media_store_container": {
    "description": "Defines media_store_container",
    "prefix": "tf-aws-resource-media_store_container",
    "body": [
      "resource \"aws_media_store_container\" \"example\" {",
      "  name = \"example\"",
      "}"
    ]
  },
  "aws-resource-mq_broker": {
    "description": "Defines mq_broker",
    "prefix": "tf-aws-resource-mq_broker",
    "body": [
      "resource \"aws_mq_broker\" \"example\" {",
      "  broker_name = \"example\"",
      "  configuration {",
      "    id = \"${aws_mq_configuration.test.id}\"",
      "    revision = \"${aws_mq_configuration.test.latest_revision}\"",
      "  }",
      "  engine_type = \"ActiveMQ\"",
      "  engine_version = \"5.15.0\"",
      "  host_instance_type = \"mq.t2.micro\"",
      "  security_groups = [\"${aws_security_group.test.id}\"]",
      "  user {",
      "    username = \"ExampleUser\"",
      "    password = \"MindTheGap\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-mq_configuration": {
    "description": "Defines mq_configuration",
    "prefix": "tf-aws-resource-mq_configuration",
    "body": [
      "resource \"aws_mq_configuration\" \"example\" {",
      "  description    = \"Example Configuration\"",
      "  name           = \"example\"",
      "  engine_type    = \"ActiveMQ\"",
      "  engine_version = \"5.15.0\"",
      "  data           = <<DATA",
      "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>",
      "<broker xmlns=\"http://activemq.apache.org/schema/core\">",
      "  <plugins>",
      "    <forcePersistencyModeBrokerPlugin persistenceFlag=\"true\"/>",
      "    <statisticsBrokerPlugin/>",
      "    <timeStampingBrokerPlugin ttlCeiling=\"86400000\" zeroExpirationOverride=\"86400000\"/>",
      "  </plugins>",
      "</broker>",
      "DATA",
      "}"
    ]
  },
  "aws-resource-nat_gateway": {
    "description": "Defines nat_gateway",
    "prefix": "tf-aws-resource-nat_gateway",
    "body": [
      "resource \"aws_nat_gateway\" \"gw\" {",
      "  allocation_id = \"${aws_eip.nat.id}\"",
      "  subnet_id     = \"${aws_subnet.public.id}\"",
      "}"
    ]
  },
  "aws-resource-network_acl": {
    "description": "Defines network_acl",
    "prefix": "tf-aws-resource-network_acl",
    "body": [
      "resource \"aws_network_acl\" \"main\" {",
      "  vpc_id = \"${aws_vpc.main.id}\"",
      "",
      "  egress {",
      "    protocol   = \"tcp\"",
      "    rule_no    = 200",
      "    action     = \"allow\"",
      "    cidr_block = \"10.3.0.0/18\"",
      "    from_port  = 443",
      "    to_port    = 443",
      "  }",
      "",
      "  ingress {",
      "    protocol   = \"tcp\"",
      "    rule_no    = 100",
      "    action     = \"allow\"",
      "    cidr_block = \"10.3.0.0/18\"",
      "    from_port  = 80",
      "    to_port    = 80",
      "  }",
      "",
      "  tags {",
      "    Name = \"main\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-network_acl_rule": {
    "description": "Defines network_acl_rule",
    "prefix": "tf-aws-resource-network_acl_rule",
    "body": [
      "resource \"aws_network_acl\" \"bar\" {",
      "  vpc_id = \"${aws_vpc.foo.id}\"",
      "}",
      "",
      "resource \"aws_network_acl_rule\" \"bar\" {",
      "  network_acl_id = \"${aws_network_acl.bar.id}\"",
      "  rule_number    = 200",
      "  egress         = false",
      "  protocol       = \"tcp\"",
      "  rule_action    = \"allow\"",
      "  cidr_block     = \"0.0.0.0/0\"",
      "  from_port      = 22",
      "  to_port        = 22",
      "}"
    ]
  },
  "aws-resource-network_interface": {
    "description": "Defines network_interface",
    "prefix": "tf-aws-resource-network_interface",
    "body": [
      "resource \"aws_network_interface\" \"test\" {",
      "  subnet_id       = \"${aws_subnet.public_a.id}\"",
      "  private_ips     = [\"10.0.0.50\"]",
      "  security_groups = [\"${aws_security_group.web.id}\"]",
      "",
      "  attachment {",
      "    instance     = \"${aws_instance.test.id}\"",
      "    device_index = 1",
      "  }",
      "}"
    ]
  },
  "aws-resource-network_interface_attachment": {
    "description": "Defines network_interface_attachment",
    "prefix": "tf-aws-resource-network_interface_attachment",
    "body": [
      "resource \"aws_network_interface_attachment\" \"test\" {",
      "    instance_id = \"${aws_instance.test.id}\"",
      "\tnetwork_interface_id = \"${aws_network_interface.test.id}\"",
      "\tdevice_index = 0",
      "}"
    ]
  },
  "aws-resource-network_interface_sg_attachment": {
    "description": "Defines network_interface_sg_attachment",
    "prefix": "tf-aws-resource-network_interface_sg_attachment",
    "body": [
      "data \"aws_ami\" \"ami\" {",
      "  most_recent = true",
      "",
      "  filter {",
      "    name   = \"name\"",
      "    values = [\"amzn-ami-hvm-*\"]",
      "  }",
      "",
      "  owners = [\"amazon\"]",
      "}",
      "",
      "resource \"aws_instance\" \"instance\" {",
      "  instance_type = \"t2.micro\"",
      "  ami           = \"${data.aws_ami.ami.id}\"",
      "",
      "  tags = {",
      "    \"type\" = \"terraform-test-instance\"",
      "  }",
      "}",
      "",
      "resource \"aws_security_group\" \"sg\" {",
      "  tags = {",
      "    \"type\" = \"terraform-test-security-group\"",
      "  }",
      "}",
      "",
      "resource \"aws_network_interface_sg_attachment\" \"sg_attachment\" {",
      "  security_group_id    = \"${aws_security_group.sg.id}\"",
      "  network_interface_id = \"${aws_instance.instance.primary_network_interface_id}\"",
      "}"
    ]
  },
  "aws-resource-opsworks_application": {
    "description": "Defines opsworks_application",
    "prefix": "tf-aws-resource-opsworks_application",
    "body": [
      "resource \"aws_opsworks_application\" \"foo-app\" {",
      "  name        = \"foobar application\"",
      "  short_name  = \"foobar\"",
      "  stack_id    = \"${aws_opsworks_stack.stack.id}\"",
      "  type        = \"rails\"",
      "  description = \"This is a Rails application\"",
      "",
      "  domains = [",
      "    \"example.com\",",
      "    \"sub.example.com\",",
      "  ]",
      "",
      "  environment = {",
      "    key    = \"key\"",
      "    value  = \"value\"",
      "    secure = false",
      "  }",
      "",
      "  app_source = {",
      "    type     = \"git\"",
      "    revision = \"master\"",
      "    url      = \"https://github.com/example.git\"",
      "  }",
      "",
      "  enable_ssl = true",
      "",
      "  ssl_configuration = {",
      "    private_key = \"${file(\"./foobar.key\")}\"",
      "    certificate = \"${file(\"./foobar.crt\")}\"",
      "  }",
      "",
      "  document_root         = \"public\"",
      "  auto_bundle_on_deploy = true",
      "  rails_env             = \"staging\"",
      "}"
    ]
  },
  "aws-resource-opsworks_custom_layer": {
    "description": "Defines opsworks_custom_layer",
    "prefix": "tf-aws-resource-opsworks_custom_layer",
    "body": [
      "resource \"aws_opsworks_custom_layer\" \"custlayer\" {",
      "  name       = \"My Awesome Custom Layer\"",
      "  short_name = \"awesome\"",
      "  stack_id   = \"${aws_opsworks_stack.main.id}\"",
      "}"
    ]
  },
  "aws-resource-opsworks_ganglia_layer": {
    "description": "Defines opsworks_ganglia_layer",
    "prefix": "tf-aws-resource-opsworks_ganglia_layer",
    "body": [
      "resource \"aws_opsworks_ganglia_layer\" \"monitor\" {",
      "  stack_id = \"${aws_opsworks_stack.main.id}\"",
      "  password = \"foobarbaz\"",
      "}"
    ]
  },
  "aws-resource-opsworks_haproxy_layer": {
    "description": "Defines opsworks_haproxy_layer",
    "prefix": "tf-aws-resource-opsworks_haproxy_layer",
    "body": [
      "resource \"aws_opsworks_haproxy_layer\" \"lb\" {",
      "  stack_id       = \"${aws_opsworks_stack.main.id}\"",
      "  stats_password = \"foobarbaz\"",
      "}"
    ]
  },
  "aws-resource-opsworks_instance": {
    "description": "Defines opsworks_instance",
    "prefix": "tf-aws-resource-opsworks_instance",
    "body": [
      "resource \"aws_opsworks_instance\" \"my-instance\" {",
      "  stack_id = \"${aws_opsworks_stack.my-stack.id}\"",
      "",
      "  layer_ids = [",
      "    \"${aws_opsworks_custom_layer.my-layer.id}\",",
      "  ]",
      "",
      "  instance_type = \"t2.micro\"",
      "  os            = \"Amazon Linux 2015.09\"",
      "  state         = \"stopped\"",
      "}"
    ]
  },
  "aws-resource-opsworks_java_app_layer": {
    "description": "Defines opsworks_java_app_layer",
    "prefix": "tf-aws-resource-opsworks_java_app_layer",
    "body": [
      "resource \"aws_opsworks_java_app_layer\" \"app\" {",
      "  stack_id = \"${aws_opsworks_stack.main.id}\"",
      "}"
    ]
  },
  "aws-resource-opsworks_memcached_layer": {
    "description": "Defines opsworks_memcached_layer",
    "prefix": "tf-aws-resource-opsworks_memcached_layer",
    "body": [
      "resource \"aws_opsworks_memcached_layer\" \"cache\" {",
      "  stack_id = \"${aws_opsworks_stack.main.id}\"",
      "}"
    ]
  },
  "aws-resource-opsworks_mysql_layer": {
    "description": "Defines opsworks_mysql_layer",
    "prefix": "tf-aws-resource-opsworks_mysql_layer",
    "body": [
      "resource \"aws_opsworks_mysql_layer\" \"db\" {",
      "  stack_id = \"${aws_opsworks_stack.main.id}\"",
      "}"
    ]
  },
  "aws-resource-opsworks_nodejs_app_layer": {
    "description": "Defines opsworks_nodejs_app_layer",
    "prefix": "tf-aws-resource-opsworks_nodejs_app_layer",
    "body": [
      "resource \"aws_opsworks_nodejs_app_layer\" \"app\" {",
      "  stack_id = \"${aws_opsworks_stack.main.id}\"",
      "}"
    ]
  },
  "aws-resource-opsworks_permission": {
    "description": "Defines opsworks_permission",
    "prefix": "tf-aws-resource-opsworks_permission",
    "body": [
      "resource \"aws_opsworks_permission\" \"my_stack_permission\" {",
      "  allow_ssh  = true",
      "  allow_sudo = true",
      "  level      = \"iam_only\"",
      "  user_arn   = \"${aws_iam_user.user.arn}\"",
      "  stack_id   = \"${aws_opsworks_stack.stack.id}\"",
      "}"
    ]
  },
  "aws-resource-opsworks_php_app_layer": {
    "description": "Defines opsworks_php_app_layer",
    "prefix": "tf-aws-resource-opsworks_php_app_layer",
    "body": [
      "resource \"aws_opsworks_php_app_layer\" \"app\" {",
      "  stack_id = \"${aws_opsworks_stack.main.id}\"",
      "}"
    ]
  },
  "aws-resource-opsworks_rails_app_layer": {
    "description": "Defines opsworks_rails_app_layer",
    "prefix": "tf-aws-resource-opsworks_rails_app_layer",
    "body": [
      "resource \"aws_opsworks_rails_app_layer\" \"app\" {",
      "  stack_id = \"${aws_opsworks_stack.main.id}\"",
      "}"
    ]
  },
  "aws-resource-opsworks_rds_db_instance": {
    "description": "Defines opsworks_rds_db_instance",
    "prefix": "tf-aws-resource-opsworks_rds_db_instance",
    "body": [
      "resource \"aws_opsworks_rds_db_instance\" \"my_instance\" {",
      "  stack_id            = \"${aws_opsworks_stack.my_stack.id}\"",
      "  rds_db_instance_arn = \"${aws_db_instance.my_instance.arn}\"",
      "  db_user             = \"someUser\"",
      "  db_password         = \"somePass\"",
      "}"
    ]
  },
  "aws-resource-opsworks_stack": {
    "description": "Defines opsworks_stack",
    "prefix": "tf-aws-resource-opsworks_stack",
    "body": [
      "resource \"aws_opsworks_stack\" \"main\" {",
      "  name                         = \"awesome-stack\"",
      "  region                       = \"us-west-1\"",
      "  service_role_arn             = \"${aws_iam_role.opsworks.arn}\"",
      "  default_instance_profile_arn = \"${aws_iam_instance_profile.opsworks.arn}\"",
      "",
      "  tags {",
      "    Name = \"foobar-terraform-stack\"",
      "  }",
      "",
      "  custom_json = <<EOT",
      "{",
      " \"foobar\": {",
      "    \"version\": \"1.0.0\"",
      "  }",
      "}",
      "EOT",
      "}"
    ]
  },
  "aws-resource-opsworks_static_web_layer": {
    "description": "Defines opsworks_static_web_layer",
    "prefix": "tf-aws-resource-opsworks_static_web_layer",
    "body": [
      "resource \"aws_opsworks_static_web_layer\" \"web\" {",
      "  stack_id = \"${aws_opsworks_stack.main.id}\"",
      "}"
    ]
  },
  "aws-resource-opsworks_user_profile": {
    "description": "Defines opsworks_user_profile",
    "prefix": "tf-aws-resource-opsworks_user_profile",
    "body": [
      "resource \"aws_opsworks_user_profile\" \"my_profile\" {",
      "  user_arn     = \"${aws_iam_user.user.arn}\"",
      "  ssh_username = \"my_user\"",
      "}"
    ]
  },
  "aws-resource-organizations_account": {
    "description": "Defines organizations_account",
    "prefix": "tf-aws-resource-organizations_account",
    "body": [
      "resource \"aws_organizations_account\" \"account\" {",
      "  name  = \"my_new_account\"",
      "  email = \"john@doe.org\"",
      "}"
    ]
  },
  "aws-resource-organizations_organization": {
    "description": "Defines organizations_organization",
    "prefix": "tf-aws-resource-organizations_organization",
    "body": [
      "resource \"aws_organizations_organization\" \"org\" {",
      "  feature_set = \"ALL\"",
      "}"
    ]
  },
  "aws-resource-organizations_policy": {
    "description": "Defines organizations_policy",
    "prefix": "tf-aws-resource-organizations_policy",
    "body": [
      "resource \"aws_organizations_policy\" \"example\" {",
      "  name    = \"example\"",
      "",
      "  content = <<CONTENT",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": {",
      "    \"Effect\": \"Allow\",",
      "    \"Action\": \"*\",",
      "    \"Resource\": \"*\"",
      "  }",
      "}",
      "CONTENT",
      "}"
    ]
  },
  "aws-resource-organizations_policy_attachment": {
    "description": "Defines organizations_policy_attachment",
    "prefix": "tf-aws-resource-organizations_policy_attachment",
    "body": [
      "resource \"aws_organizations_policy_attachment\" \"account\" {",
      "  policy_id = \"${aws_organizations_policy.example.id}\"",
      "  target_id = \"123456789012\"",
      "}"
    ]
  },
  "aws-resource-placement_group": {
    "description": "Defines placement_group",
    "prefix": "tf-aws-resource-placement_group",
    "body": [
      "resource \"aws_placement_group\" \"web\" {",
      "  name     = \"hunky-dory-pg\"",
      "  strategy = \"cluster\"",
      "}"
    ]
  },
  "aws-resource-proxy_protocol_policy": {
    "description": "Defines proxy_protocol_policy",
    "prefix": "tf-aws-resource-proxy_protocol_policy",
    "body": [
      "resource \"aws_elb\" \"lb\" {",
      "  name               = \"test-lb\"",
      "  availability_zones = [\"us-east-1a\"]",
      "",
      "  listener {",
      "    instance_port     = 25",
      "    instance_protocol = \"tcp\"",
      "    lb_port           = 25",
      "    lb_protocol       = \"tcp\"",
      "  }",
      "",
      "  listener {",
      "    instance_port     = 587",
      "    instance_protocol = \"tcp\"",
      "    lb_port           = 587",
      "    lb_protocol       = \"tcp\"",
      "  }",
      "}",
      "",
      "resource \"aws_proxy_protocol_policy\" \"smtp\" {",
      "  load_balancer  = \"${aws_elb.lb.name}\"",
      "  instance_ports = [\"25\", \"587\"]",
      "}"
    ]
  },
  "aws-resource-rds_cluster": {
    "description": "Defines rds_cluster",
    "prefix": "tf-aws-resource-rds_cluster",
    "body": [
      "resource \"aws_rds_cluster\" \"default\" {",
      "  cluster_identifier      = \"aurora-cluster-demo\"",
      "  engine                  = \"aurora-mysql\"",
      "  availability_zones      = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]",
      "  database_name           = \"mydb\"",
      "  master_username         = \"foo\"",
      "  master_password         = \"bar\"",
      "  backup_retention_period = 5",
      "  preferred_backup_window = \"07:00-09:00\"",
      "}"
    ]
  },
  "aws-resource-rds_cluster_instance": {
    "description": "Defines rds_cluster_instance",
    "prefix": "tf-aws-resource-rds_cluster_instance",
    "body": [
      "resource \"aws_rds_cluster_instance\" \"cluster_instances\" {",
      "  count              = 2",
      "  identifier         = \"aurora-cluster-demo-${count.index}\"",
      "  cluster_identifier = \"${aws_rds_cluster.default.id}\"",
      "  instance_class     = \"db.r3.large\"",
      "}",
      "",
      "resource \"aws_rds_cluster\" \"default\" {",
      "  cluster_identifier = \"aurora-cluster-demo\"",
      "  availability_zones = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]",
      "  database_name      = \"mydb\"",
      "  master_username    = \"foo\"",
      "  master_password    = \"barbut8chars\"",
      "}"
    ]
  },
  "aws-resource-rds_cluster_parameter_group": {
    "description": "Defines rds_cluster_parameter_group",
    "prefix": "tf-aws-resource-rds_cluster_parameter_group",
    "body": [
      "resource \"aws_rds_cluster_parameter_group\" \"default\" {",
      "  name        = \"rds-cluster-pg\"",
      "  family      = \"aurora5.6\"",
      "  description = \"RDS default cluster parameter group\"",
      "",
      "  parameter {",
      "    name  = \"character_set_server\"",
      "    value = \"utf8\"",
      "  }",
      "",
      "  parameter {",
      "    name  = \"character_set_client\"",
      "    value = \"utf8\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-redshift_cluster": {
    "description": "Defines redshift_cluster",
    "prefix": "tf-aws-resource-redshift_cluster",
    "body": [
      "resource \"aws_redshift_cluster\" \"default\" {",
      "  cluster_identifier = \"tf-redshift-cluster\"",
      "  database_name      = \"mydb\"",
      "  master_username    = \"foo\"",
      "  master_password    = \"Mustbe8characters\"",
      "  node_type          = \"dc1.large\"",
      "  cluster_type       = \"single-node\"",
      "}"
    ]
  },
  "aws-resource-redshift_parameter_group": {
    "description": "Defines redshift_parameter_group",
    "prefix": "tf-aws-resource-redshift_parameter_group",
    "body": [
      "resource \"aws_redshift_parameter_group\" \"bar\" {",
      "  name   = \"parameter-group-test-terraform\"",
      "  family = \"redshift-1.0\"",
      "",
      "  parameter {",
      "    name  = \"require_ssl\"",
      "    value = \"true\"",
      "  }",
      "",
      "  parameter {",
      "    name  = \"query_group\"",
      "    value = \"example\"",
      "  }",
      "",
      "  parameter {",
      "    name  = \"enable_user_activity_logging\"",
      "    value = \"true\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-redshift_security_group": {
    "description": "Defines redshift_security_group",
    "prefix": "tf-aws-resource-redshift_security_group",
    "body": [
      "resource \"aws_redshift_security_group\" \"default\" {",
      "  name = \"redshift-sg\"",
      "",
      "  ingress {",
      "    cidr = \"10.0.0.0/24\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-redshift_subnet_group": {
    "description": "Defines redshift_subnet_group",
    "prefix": "tf-aws-resource-redshift_subnet_group",
    "body": [
      "resource \"aws_vpc\" \"foo\" {",
      "  cidr_block = \"10.1.0.0/16\"",
      "}",
      "",
      "resource \"aws_subnet\" \"foo\" {",
      "  cidr_block        = \"10.1.1.0/24\"",
      "  availability_zone = \"us-west-2a\"",
      "  vpc_id            = \"${aws_vpc.foo.id}\"",
      "",
      "  tags {",
      "    Name = \"tf-dbsubnet-test-1\"",
      "  }",
      "}",
      "",
      "resource \"aws_subnet\" \"bar\" {",
      "  cidr_block        = \"10.1.2.0/24\"",
      "  availability_zone = \"us-west-2b\"",
      "  vpc_id            = \"${aws_vpc.foo.id}\"",
      "",
      "  tags {",
      "    Name = \"tf-dbsubnet-test-2\"",
      "  }",
      "}",
      "",
      "resource \"aws_redshift_subnet_group\" \"foo\" {",
      "  name       = \"foo\"",
      "  subnet_ids = [\"${aws_subnet.foo.id}\", \"${aws_subnet.bar.id}\"]",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-route": {
    "description": "Defines route",
    "prefix": "tf-aws-resource-route",
    "body": [
      "resource \"aws_route\" \"r\" {",
      "  route_table_id            = \"rtb-4fbb3ac4\"",
      "  destination_cidr_block    = \"10.0.1.0/22\"",
      "  vpc_peering_connection_id = \"pcx-45ff3dc1\"",
      "  depends_on                = [\"aws_route_table.testing\"]",
      "}"
    ]
  },
  "aws-resource-route53_delegation_set": {
    "description": "Defines route53_delegation_set",
    "prefix": "tf-aws-resource-route53_delegation_set",
    "body": [
      "resource \"aws_route53_delegation_set\" \"main\" {",
      "  reference_name = \"DynDNS\"",
      "}",
      "",
      "resource \"aws_route53_zone\" \"primary\" {",
      "  name              = \"hashicorp.com\"",
      "  delegation_set_id = \"${aws_route53_delegation_set.main.id}\"",
      "}",
      "",
      "resource \"aws_route53_zone\" \"secondary\" {",
      "  name              = \"terraform.io\"",
      "  delegation_set_id = \"${aws_route53_delegation_set.main.id}\"",
      "}"
    ]
  },
  "aws-resource-route53_health_check": {
    "description": "Defines route53_health_check",
    "prefix": "tf-aws-resource-route53_health_check",
    "body": [
      "resource \"aws_route53_health_check\" \"child1\" {",
      "  fqdn              = \"foobar.terraform.com\"",
      "  port              = 80",
      "  type              = \"HTTP\"",
      "  resource_path     = \"/\"",
      "  failure_threshold = \"5\"",
      "  request_interval  = \"30\"",
      "",
      "  tags = {",
      "    Name = \"tf-test-health-check\"",
      "  }",
      "}",
      "",
      "resource \"aws_route53_health_check\" \"foo\" {",
      "  type                   = \"CALCULATED\"",
      "  child_health_threshold = 1",
      "  child_healthchecks     = [\"${aws_route53_health_check.child1.id}\"]",
      "",
      "  tags = {",
      "    Name = \"tf-test-calculated-health-check\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-route53_query_log": {
    "description": "Defines route53_query_log",
    "prefix": "tf-aws-resource-route53_query_log",
    "body": [
      "# Example CloudWatch log group in us-east-1",
      "",
      "provider \"aws\" {",
      "  alias  = \"us-east-1\"",
      "  region = \"us-east-1\"",
      "}",
      "",
      "resource \"aws_cloudwatch_log_group\" \"aws_route53_example_com\" {",
      "  provider = \"aws.us-east-1\"",
      "",
      "  name              = \"/aws/route53/${aws_route53_zone.example_com.name}\"",
      "  retention_in_days = 30",
      "}",
      "",
      "# Example CloudWatch log resource policy to allow Route53 to write logs",
      "# to any log group under /aws/route53/*",
      "",
      "data \"aws_iam_policy_document\" \"route53-query-logging-policy\" {",
      "  statement {",
      "    actions = [",
      "      \"logs:CreateLogStream\",",
      "      \"logs:PutLogEvents\",",
      "    ]",
      "",
      "    resources = [\"arn:aws:logs:*:*:log-group:/aws/route53/*\"]",
      "",
      "    principals {",
      "      identifiers = [\"route53.amazonaws.com\"]",
      "      type        = \"Service\"",
      "    }",
      "  }",
      "}",
      "",
      "resource \"aws_cloudwatch_log_resource_policy\" \"route53-query-logging-policy\" {",
      "  provider = \"aws.us-east-1\"",
      "",
      "  policy_document = \"${data.aws_iam_policy_document.route53-query-logging-policy.json}\"",
      "  policy_name     = \"route53-query-logging-policy\"",
      "}",
      "",
      "# Example Route53 zone with query logging",
      "",
      "resource \"aws_route53_zone\" \"example_com\" {",
      "  name = \"example.com\"",
      "}",
      "",
      "resource \"aws_route53_query_log\" \"example_com\" {",
      "  depends_on = [\"aws_cloudwatch_log_resource_policy.route53-query-logging-policy\"]",
      "",
      "  cloudwatch_log_group_arn = \"${aws_cloudwatch_log_group.aws_route53_example_com.arn}\"",
      "  zone_id                  = \"${aws_route53_zone.example_com.zone_id}\"",
      "}"
    ]
  },
  "aws-resource-route53_record": {
    "description": "Defines route53_record",
    "prefix": "tf-aws-resource-route53_record",
    "body": [
      "resource \"aws_route53_record\" \"www\" {",
      "  zone_id = \"${aws_route53_zone.primary.zone_id}\"",
      "  name    = \"www.example.com\"",
      "  type    = \"A\"",
      "  ttl     = \"300\"",
      "  records = [\"${aws_eip.lb.public_ip}\"]",
      "}"
    ]
  },
  "aws-resource-route53_zone": {
    "description": "Defines route53_zone",
    "prefix": "tf-aws-resource-route53_zone",
    "body": [
      "resource \"aws_route53_zone\" \"primary\" {",
      "  name = \"example.com\"",
      "}"
    ]
  },
  "aws-resource-route53_zone_association": {
    "description": "Defines route53_zone_association",
    "prefix": "tf-aws-resource-route53_zone_association",
    "body": [
      "resource \"aws_vpc\" \"primary\" {",
      "  cidr_block           = \"10.6.0.0/16\"",
      "  enable_dns_hostnames = true",
      "  enable_dns_support   = true",
      "}",
      "",
      "resource \"aws_vpc\" \"secondary\" {",
      "  cidr_block           = \"10.7.0.0/16\"",
      "  enable_dns_hostnames = true",
      "  enable_dns_support   = true",
      "}",
      "",
      "resource \"aws_route53_zone\" \"example\" {",
      "  name   = \"example.com\"",
      "  vpc_id = \"${aws_vpc.primary.id}\"",
      "}",
      "",
      "resource \"aws_route53_zone_association\" \"secondary\" {",
      "  zone_id = \"${aws_route53_zone.example.zone_id}\"",
      "  vpc_id  = \"${aws_vpc.secondary.id}\"",
      "}"
    ]
  },
  "aws-resource-route_table": {
    "description": "Defines route_table",
    "prefix": "tf-aws-resource-route_table",
    "body": [
      "resource \"aws_route_table\" \"r\" {",
      "  vpc_id = \"${aws_vpc.default.id}\"",
      "",
      "  route {",
      "    cidr_block = \"10.0.1.0/24\"",
      "    gateway_id = \"${aws_internet_gateway.main.id}\"",
      "  }",
      "",
      "  route {",
      "    ipv6_cidr_block = \"::/0\"",
      "    egress_only_gateway_id = \"${aws_egress_only_internet_gateway.foo.id}\"",
      "  }",
      "",
      "  tags {",
      "    Name = \"main\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-route_table_association": {
    "description": "Defines route_table_association",
    "prefix": "tf-aws-resource-route_table_association",
    "body": [
      "resource \"aws_route_table_association\" \"a\" {",
      "  subnet_id      = \"${aws_subnet.foo.id}\"",
      "  route_table_id = \"${aws_route_table.bar.id}\"",
      "}"
    ]
  },
  "aws-resource-s3_bucket": {
    "description": "Defines s3_bucket",
    "prefix": "tf-aws-resource-s3_bucket",
    "body": [
      "resource \"aws_s3_bucket\" \"b\" {",
      "  bucket = \"my-tf-test-bucket\"",
      "  acl    = \"private\"",
      "",
      "  tags {",
      "    Name        = \"My bucket\"",
      "    Environment = \"Dev\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-s3_bucket_metric": {
    "description": "Defines s3_bucket_metric",
    "prefix": "tf-aws-resource-s3_bucket_metric",
    "body": [
      "resource \"aws_s3_bucket\" \"example\" {",
      "  bucket = \"example\"",
      "}",
      "",
      "resource \"aws_s3_bucket_metric\" \"example-entire-bucket\" {",
      "  bucket = \"${aws_s3_bucket.example.bucket}\"",
      "  name   = \"EntireBucket\"",
      "}"
    ]
  },
  "aws-resource-s3_bucket_notification": {
    "description": "Defines s3_bucket_notification",
    "prefix": "tf-aws-resource-s3_bucket_notification",
    "body": [
      "resource \"aws_sns_topic\" \"topic\" {",
      "  name = \"s3-event-notification-topic\"",
      "",
      "  policy = <<POLICY",
      "{",
      "    \"Version\":\"2012-10-17\",",
      "    \"Statement\":[{",
      "        \"Effect\": \"Allow\",",
      "        \"Principal\": {\"AWS\":\"*\"},",
      "        \"Action\": \"SNS:Publish\",",
      "        \"Resource\": \"arn:aws:sns:*:*:s3-event-notification-topic\",",
      "        \"Condition\":{",
      "            \"ArnLike\":{\"aws:SourceArn\":\"${aws_s3_bucket.bucket.arn}\"}",
      "        }",
      "    }]",
      "}",
      "POLICY",
      "}",
      "",
      "resource \"aws_s3_bucket\" \"bucket\" {",
      "  bucket = \"your_bucket_name\"",
      "}",
      "",
      "resource \"aws_s3_bucket_notification\" \"bucket_notification\" {",
      "  bucket = \"${aws_s3_bucket.bucket.id}\"",
      "",
      "  topic {",
      "    topic_arn     = \"${aws_sns_topic.topic.arn}\"",
      "    events        = [\"s3:ObjectCreated:*\"]",
      "    filter_suffix = \".log\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-s3_bucket_object": {
    "description": "Defines s3_bucket_object",
    "prefix": "tf-aws-resource-s3_bucket_object",
    "body": [
      "resource \"aws_s3_bucket_object\" \"object\" {",
      "  bucket = \"your_bucket_name\"",
      "  key    = \"new_object_key\"",
      "  source = \"path/to/file\"",
      "  etag   = \"${md5(file(\"path/to/file\"))}\"",
      "}"
    ]
  },
  "aws-resource-s3_bucket_policy": {
    "description": "Defines s3_bucket_policy",
    "prefix": "tf-aws-resource-s3_bucket_policy",
    "body": [
      "resource \"aws_s3_bucket\" \"b\" {",
      "  bucket = \"my_tf_test_bucket\"",
      "}",
      "",
      "resource \"aws_s3_bucket_policy\" \"b\" {",
      "  bucket = \"${aws_s3_bucket.b.id}\"",
      "  policy =<<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Id\": \"MYBUCKETPOLICY\",",
      "  \"Statement\": [",
      "    {",
      "      \"Sid\": \"IPAllow\",",
      "      \"Effect\": \"Deny\",",
      "      \"Principal\": \"*\",",
      "      \"Action\": \"s3:*\",",
      "      \"Resource\": \"arn:aws:s3:::my_tf_test_bucket/*\",",
      "      \"Condition\": {",
      "         \"IpAddress\": {\"aws:SourceIp\": \"8.8.8.8/32\"}",
      "      } ",
      "    } ",
      "  ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-secretsmanager_secret": {
    "description": "Defines secretsmanager_secret",
    "prefix": "tf-aws-resource-secretsmanager_secret",
    "body": [
      "resource \"aws_secretsmanager_secret\" \"example\" {",
      "  name = \"example\"",
      "}"
    ]
  },
  "aws-resource-secretsmanager_secret_version": {
    "description": "Defines secretsmanager_secret_version",
    "prefix": "tf-aws-resource-secretsmanager_secret_version",
    "body": [
      "resource \"aws_secretsmanager_secret_version\" \"example\" {",
      "  secret_id     = \"${aws_secretsmanager_secret.example.id}\"",
      "  secret_string = \"example-string-to-protect\"",
      "}"
    ]
  },
  "aws-resource-security_group": {
    "description": "Defines security_group",
    "prefix": "tf-aws-resource-security_group",
    "body": [
      "resource \"aws_security_group\" \"allow_all\" {",
      "  name        = \"allow_all\"",
      "  description = \"Allow all inbound traffic\"",
      "  vpc_id      = \"${aws_vpc.main.id}\"",
      "",
      "  ingress {",
      "    from_port   = 0",
      "    to_port     = 0",
      "    protocol    = \"-1\"",
      "    cidr_blocks = [\"0.0.0.0/0\"]",
      "  }",
      "",
      "  egress {",
      "    from_port       = 0",
      "    to_port         = 0",
      "    protocol        = \"-1\"",
      "    cidr_blocks     = [\"0.0.0.0/0\"]",
      "    prefix_list_ids = [\"pl-12c4e678\"]",
      "  }",
      "}"
    ]
  },
  "aws-resource-security_group_rule": {
    "description": "Defines security_group_rule",
    "prefix": "tf-aws-resource-security_group_rule",
    "body": [
      "resource \"aws_security_group_rule\" \"allow_all\" {",
      "  type            = \"ingress\"",
      "  from_port       = 0",
      "  to_port         = 65535",
      "  protocol        = \"tcp\"",
      "  cidr_blocks     = [\"0.0.0.0/0\"]",
      "  prefix_list_ids = [\"pl-12c4e678\"]",
      "",
      "  security_group_id = \"sg-123456\"",
      "}"
    ]
  },
  "aws-resource-service_discovery_private_dns_namespace": {
    "description": "Defines service_discovery_private_dns_namespace",
    "prefix": "tf-aws-resource-service_discovery_private_dns_namespace",
    "body": [
      "resource \"aws_vpc\" \"example\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_service_discovery_private_dns_namespace\" \"example\" {",
      "  name = \"hoge.example.local\"",
      "  description = \"example\"",
      "  vpc = \"${aws_vpc.example.id}\"",
      "}"
    ]
  },
  "aws-resource-service_discovery_public_dns_namespace": {
    "description": "Defines service_discovery_public_dns_namespace",
    "prefix": "tf-aws-resource-service_discovery_public_dns_namespace",
    "body": [
      "resource \"aws_service_discovery_public_dns_namespace\" \"example\" {",
      "  name = \"hoge.example.com\"",
      "  description = \"example\"",
      "}"
    ]
  },
  "aws-resource-service_discovery_service": {
    "description": "Defines service_discovery_service",
    "prefix": "tf-aws-resource-service_discovery_service",
    "body": [
      "resource \"aws_vpc\" \"example\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_service_discovery_private_dns_namespace\" \"example\" {",
      "  name = \"example.terraform.local\"",
      "  description = \"example\"",
      "  vpc = \"${aws_vpc.example.id}\"",
      "}",
      "",
      "resource \"aws_service_discovery_service\" \"example\" {",
      "  name = \"example\"",
      "  dns_config {",
      "    namespace_id = \"${aws_service_discovery_private_dns_namespace.example.id}\"",
      "    dns_records {",
      "      ttl = 10",
      "      type = \"A\"",
      "    }",
      "    routing_policy = \"MULTIVALUE\"",
      "  }",
      "",
      "  health_check_custom_config {",
      "    failure_threshold = 1",
      "  }",
      "}"
    ]
  },
  "aws-resource-servicecatalog_portfolio": {
    "description": "Defines servicecatalog_portfolio",
    "prefix": "tf-aws-resource-servicecatalog_portfolio",
    "body": [
      "resource \"aws_servicecatalog_portfolio\" \"portfolio\" {",
      "  name = \"My App Portfolio\"",
      "  description = \"List of my organizations apps\"",
      "  provider_name = \"Brett\"",
      "}"
    ]
  },
  "aws-resource-ses_active_receipt_rule_set": {
    "description": "Defines ses_active_receipt_rule_set",
    "prefix": "tf-aws-resource-ses_active_receipt_rule_set",
    "body": [
      "resource \"aws_ses_active_receipt_rule_set\" \"main\" {",
      "  rule_set_name = \"primary-rules\"",
      "}"
    ]
  },
  "aws-resource-ses_configuration_set": {
    "description": "Defines ses_configuration_set",
    "prefix": "tf-aws-resource-ses_configuration_set",
    "body": [
      "resource \"aws_ses_configuration_set\" \"test\" {",
      "  name = \"some-configuration-set-test\"",
      "}"
    ]
  },
  "aws-resource-ses_domain_dkim": {
    "description": "Defines ses_domain_dkim",
    "prefix": "tf-aws-resource-ses_domain_dkim",
    "body": [
      "resource \"aws_ses_domain_identity\" \"example\" {",
      "  domain = \"example.com\"",
      "}",
      "",
      "resource \"aws_ses_domain_dkim\" \"example\" {",
      "  domain = \"${aws_ses_domain_identity.example.domain}\"",
      "}",
      "",
      "resource \"aws_route53_record\" \"example_amazonses_verification_record\" {",
      "  count   = 3",
      "  zone_id = \"ABCDEFGHIJ123\"",
      "  name    = \"${element(aws_ses_domain_dkim.example.dkim_tokens, count.index)}._domainkey.example.com\"",
      "  type    = \"CNAME\"",
      "  ttl     = \"600\"",
      "  records = [\"${element(aws_ses_domain_dkim.example.dkim_tokens, count.index)}.dkim.amazonses.com\"]",
      "}"
    ]
  },
  "aws-resource-ses_domain_identity": {
    "description": "Defines ses_domain_identity",
    "prefix": "tf-aws-resource-ses_domain_identity",
    "body": [
      "resource \"aws_ses_domain_identity\" \"example\" {",
      "  domain = \"example.com\"",
      "}",
      "",
      "resource \"aws_route53_record\" \"example_amazonses_verification_record\" {",
      "  zone_id = \"ABCDEFGHIJ123\"",
      "  name    = \"_amazonses.example.com\"",
      "  type    = \"TXT\"",
      "  ttl     = \"600\"",
      "  records = [\"${aws_ses_domain_identity.example.verification_token}\"]",
      "}"
    ]
  },
  "aws-resource-ses_domain_identity_verification": {
    "description": "Defines ses_domain_identity_verification",
    "prefix": "tf-aws-resource-ses_domain_identity_verification",
    "body": [
      "resource \"aws_ses_domain_identity\" \"example\" {",
      "  domain = \"example.com\"",
      "}",
      "",
      "resource \"aws_route53_record\" \"example_amazonses_verification_record\" {",
      "  zone_id = \"${aws_route53_zone.example.id}\"",
      "  name    = \"_amazonses.${aws_ses_domain_identity.example.id}\"",
      "  type    = \"TXT\"",
      "  ttl     = \"600\"",
      "  records = [\"${aws_ses_domain_identity.example.verification_token}\"]",
      "}",
      "",
      "resource \"aws_ses_domain_identity_verification\" \"example_verification\" {",
      "  domain = \"${aws_ses_domain_identity.example.id}\"",
      "",
      "  depends_on = [\"aws_route53_record.example_amazonses_verification_record\"]",
      "}"
    ]
  },
  "aws-resource-ses_domain_mail_from": {
    "description": "Defines ses_domain_mail_from",
    "prefix": "tf-aws-resource-ses_domain_mail_from",
    "body": [
      "resource \"aws_ses_domain_mail_from\" \"example\" {",
      "  domain           = \"${aws_ses_domain_identity.example.domain}\"",
      "  mail_from_domain = \"bounce.${aws_ses_domain_identity.example.domain}\"",
      "}",
      "",
      "# Example SES Domain Identity",
      "resource \"aws_ses_domain_identity\" \"example\" {",
      "  domain = \"example.com\"",
      "}",
      "",
      "# Example Route53 MX record",
      "resource \"aws_route53_record\" \"example_ses_domain_mail_from_mx\" {",
      "  zone_id = \"${aws_route53_zone.example.id}\"",
      "  name    = \"${aws_ses_domain_mail_from.example.mail_from_domain}\"",
      "  type    = \"MX\"",
      "  ttl     = \"600\"",
      "  records = [\"10 feedback-smtp.us-east-1.amazonses.com\"] # Change to the region in which `aws_ses_domain_identity.example` is created",
      "}",
      "",
      "# Example Route53 TXT record for SPF",
      "resource \"aws_route53_record\" \"example_ses_domain_mail_from_txt\" {",
      "  zone_id = \"${aws_route53_zone.example.id}\"",
      "  name    = \"${aws_ses_domain_mail_from.example.mail_from_domain}\"",
      "  type    = \"TXT\"",
      "  ttl     = \"600\"",
      "  records = [\"v=spf1 include:amazonses.com -all\"]",
      "}"
    ]
  },
  "aws-resource-ses_event_destination": {
    "description": "Defines ses_event_destination",
    "prefix": "tf-aws-resource-ses_event_destination",
    "body": [
      "# Add a firehose event destination to a configuration set",
      "resource \"aws_ses_event_destination\" \"kinesis\" {",
      "  name                   = \"event-destination-kinesis\"",
      "  configuration_set_name = \"${aws_ses_configuration_set.test.name}\"",
      "  enabled                = true",
      "  matching_types         = [\"bounce\", \"send\"]",
      "",
      "  kinesis_destination = {",
      "    stream_arn = \"${aws_kinesis_firehose_delivery_stream.test_stream.arn}\"",
      "    role_arn   = \"${aws_iam_role.firehose_role.arn}\"",
      "  }",
      "}",
      "",
      "# CloudWatch event destination",
      "resource \"aws_ses_event_destination\" \"cloudwatch\" {",
      "  name                   = \"event-destination-cloudwatch\"",
      "  configuration_set_name = \"${aws_ses_configuration_set.test.name}\"",
      "  enabled                = true",
      "  matching_types         = [\"bounce\", \"send\"]",
      "",
      "  cloudwatch_destination = {",
      "    default_value  = \"default\"",
      "    dimension_name = \"dimension\"",
      "    value_source   = \"emailHeader\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ses_identity_notification_topic": {
    "description": "Defines ses_identity_notification_topic",
    "prefix": "tf-aws-resource-ses_identity_notification_topic",
    "body": [
      "resource \"aws_ses_identity_notification_topic\" \"test\" {",
      "  topic_arn\t\t\t= \"${aws_sns_topic.example.arn}\"",
      "  notification_type = \"Bounce\"",
      "  identity \t\t\t= \"${aws_ses_domain_identity.example.domain}\"",
      "}"
    ]
  },
  "aws-resource-ses_receipt_filter": {
    "description": "Defines ses_receipt_filter",
    "prefix": "tf-aws-resource-ses_receipt_filter",
    "body": [
      "resource \"aws_ses_receipt_filter\" \"filter\" {",
      "  name   = \"block-spammer\"",
      "  cidr   = \"10.10.10.10\"",
      "  policy = \"Block\"",
      "}"
    ]
  },
  "aws-resource-ses_receipt_rule": {
    "description": "Defines ses_receipt_rule",
    "prefix": "tf-aws-resource-ses_receipt_rule",
    "body": [
      "# Add a header to the email and store it in S3",
      "resource \"aws_ses_receipt_rule\" \"store\" {",
      "  name          = \"store\"",
      "  rule_set_name = \"default-rule-set\"",
      "  recipients    = [\"karen@example.com\"]",
      "  enabled       = true",
      "  scan_enabled  = true",
      "",
      "  add_header_action {",
      "    header_name  = \"Custom-Header\"",
      "    header_value = \"Added by SES\"",
      "  }",
      "",
      "  s3_action {",
      "    bucket_name = \"emails\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ses_receipt_rule_set": {
    "description": "Defines ses_receipt_rule_set",
    "prefix": "tf-aws-resource-ses_receipt_rule_set",
    "body": [
      "resource \"aws_ses_receipt_rule_set\" \"main\" {",
      "  rule_set_name = \"primary-rules\"",
      "}"
    ]
  },
  "aws-resource-ses_template": {
    "description": "Defines ses_template",
    "prefix": "tf-aws-resource-ses_template",
    "body": [
      "resource \"aws_ses_template\" \"MyTemplate\" {",
      "  name    = \"MyTemplate\"",
      "  subject = \"Greetings, {{name}}!\"",
      "  html    = \"<h1>Hello {{name}},</h1><p>Your favorite animal is {{favoriteanimal}}.</p>\"",
      "  text    = \"Hello {{name}},\\r\\nYour favorite animal is {{favoriteanimal}}.\"",
      "}"
    ]
  },
  "aws-resource-sfn_activity": {
    "description": "Defines sfn_activity",
    "prefix": "tf-aws-resource-sfn_activity",
    "body": [
      "resource \"aws_sfn_activity\" \"sfn_activity\" {",
      "  name = \"my-activity\"",
      "}"
    ]
  },
  "aws-resource-sfn_state_machine": {
    "description": "Defines sfn_state_machine",
    "prefix": "tf-aws-resource-sfn_state_machine",
    "body": [
      "# ...",
      "",
      "resource \"aws_sfn_state_machine\" \"sfn_state_machine\" {",
      "  name     = \"my-state-machine\"",
      "  role_arn = \"${aws_iam_role.iam_for_sfn.arn}\"",
      "",
      "  definition = <<EOF",
      "{",
      "  \"Comment\": \"A Hello World example of the Amazon States Language using an AWS Lambda Function\",",
      "  \"StartAt\": \"HelloWorld\",",
      "  \"States\": {",
      "    \"HelloWorld\": {",
      "      \"Type\": \"Task\",",
      "      \"Resource\": \"${aws_lambda_function.lambda.arn}\",",
      "      \"End\": true",
      "    }",
      "  }",
      "}",
      "EOF",
      "}"
    ]
  },
  "aws-resource-simpledb_domain": {
    "description": "Defines simpledb_domain",
    "prefix": "tf-aws-resource-simpledb_domain",
    "body": [
      "resource \"aws_simpledb_domain\" \"users\" {",
      "  name = \"users\"",
      "}"
    ]
  },
  "aws-resource-snapshot_create_volume_permission": {
    "description": "Defines snapshot_create_volume_permission",
    "prefix": "tf-aws-resource-snapshot_create_volume_permission",
    "body": [
      "resource \"aws_snapshot_create_volume_permission\" \"example_perm\" {",
      "  snapshot_id = \"${aws_ebs_snapshot.example_snapshot.id}\"",
      "  account_id  = \"12345678\"",
      "}",
      "",
      "resource \"aws_ebs_volume\" \"example\" {",
      "  availability_zone = \"us-west-2a\"",
      "  size              = 40",
      "}",
      "",
      "resource \"aws_ebs_snapshot\" \"example_snapshot\" {",
      "  volume_id = \"${aws_ebs_volume.example.id}\"",
      "}"
    ]
  },
  "aws-resource-sns_platform_application": {
    "description": "Defines sns_platform_application",
    "prefix": "tf-aws-resource-sns_platform_application",
    "body": [
      "resource \"aws_sns_platform_application\" \"apns_application\" {",
      "  name                = \"apns_application\"",
      "  platform            = \"APNS\"",
      "  platform_credential = \"<APNS PRIVATE KEY>\"",
      "  platform_principal  = \"<APNS CERTIFICATE>\"",
      "}"
    ]
  },
  "aws-resource-sns_sms_peferences": {
    "description": "Defines sns_sms_peferences",
    "prefix": "tf-aws-resource-sns_sms_peferences",
    "body": [
      "resource \"aws_sns_sms_preferences\" \"update_sms_prefs\" {",
      "",
      "}"
    ]
  },
  "aws-resource-sns_topic": {
    "description": "Defines sns_topic",
    "prefix": "tf-aws-resource-sns_topic",
    "body": [
      "resource \"aws_sns_topic\" \"user_updates\" {",
      "  name = \"user-updates-topic\"",
      "}"
    ]
  },
  "aws-resource-sns_topic_policy": {
    "description": "Defines sns_topic_policy",
    "prefix": "tf-aws-resource-sns_topic_policy",
    "body": [
      "resource \"aws_sns_topic\" \"test\" {",
      "  name = \"my-topic-with-policy\"",
      "}",
      "",
      "resource \"aws_sns_topic_policy\" \"default\" {",
      "  arn = \"${aws_sns_topic.test.arn}\"",
      "",
      "  policy = \"${data.aws_iam_policy_document.sns-topic-policy.json}\"",
      "}",
      "",
      "data \"aws_iam_policy_document\" \"sns-topic-policy\" {",
      "  policy_id = \"__default_policy_ID\"",
      "",
      "  statement {",
      "    actions = [",
      "      \"SNS:Subscribe\",",
      "      \"SNS:SetTopicAttributes\",",
      "      \"SNS:RemovePermission\",",
      "      \"SNS:Receive\",",
      "      \"SNS:Publish\",",
      "      \"SNS:ListSubscriptionsByTopic\",",
      "      \"SNS:GetTopicAttributes\",",
      "      \"SNS:DeleteTopic\",",
      "      \"SNS:AddPermission\",",
      "    ]",
      "",
      "    condition {",
      "      test     = \"StringEquals\"",
      "      variable = \"AWS:SourceOwner\"",
      "",
      "      values = [",
      "        \"${var.account-id}\",",
      "      ]",
      "    }",
      "",
      "    effect = \"Allow\"",
      "",
      "    principals {",
      "      type        = \"AWS\"",
      "      identifiers = [\"*\"]",
      "    }",
      "",
      "    resources = [",
      "      \"${aws_sns_topic.test.arn}\",",
      "    ]",
      "",
      "    sid = \"__default_statement_ID\"",
      "  }"
    ]
  },
  "aws-resource-sns_topic_subscription": {
    "description": "Defines sns_topic_subscription",
    "prefix": "tf-aws-resource-sns_topic_subscription",
    "body": [
      "resource \"aws_sns_topic_subscription\" \"user_updates_sqs_target\" {",
      "  topic_arn = \"arn:aws:sns:us-west-2:432981146916:user-updates-topic\"",
      "  protocol  = \"sqs\"",
      "  endpoint  = \"arn:aws:sqs:us-west-2:432981146916:terraform-queue-too\"",
      "}"
    ]
  },
  "aws-resource-spot_datafeed_subscription": {
    "description": "Defines spot_datafeed_subscription",
    "prefix": "tf-aws-resource-spot_datafeed_subscription",
    "body": [
      "resource \"aws_s3_bucket\" \"default\" {",
      "  bucket = \"tf-spot-datafeed\"",
      "}",
      "",
      "resource \"aws_spot_datafeed_subscription\" \"default\" {",
      "  bucket = \"${aws_s3_bucket.default.bucket}\"",
      "  prefix = \"my_subdirectory\"",
      "}"
    ]
  },
  "aws-resource-spot_fleet_request": {
    "description": "Defines spot_fleet_request",
    "prefix": "tf-aws-resource-spot_fleet_request",
    "body": [
      "# Request a Spot fleet",
      "resource \"aws_spot_fleet_request\" \"cheap_compute\" {",
      "  iam_fleet_role      = \"arn:aws:iam::12345678:role/spot-fleet\"",
      "  spot_price          = \"0.03\"",
      "  allocation_strategy = \"diversified\"",
      "  target_capacity     = 6",
      "  valid_until         = \"2019-11-04T20:44:20Z\"",
      "",
      "  launch_specification {",
      "    instance_type             = \"m4.10xlarge\"",
      "    ami                       = \"ami-1234\"",
      "    spot_price                = \"2.793\"",
      "    placement_tenancy         = \"dedicated\"",
      "    iam_instance_profile_arn  = \"${aws_iam_instance_profile.example.arn}\"",
      "  }",
      "",
      "  launch_specification {",
      "    instance_type             = \"m4.4xlarge\"",
      "    ami                       = \"ami-5678\"",
      "    key_name                  = \"my-key\"",
      "    spot_price                = \"1.117\"",
      "    iam_instance_profile_arn  = \"${aws_iam_instance_profile.example.arn}\"",
      "    availability_zone         = \"us-west-1a\"",
      "    subnet_id                 = \"subnet-1234\"",
      "    weighted_capacity         = 35",
      "",
      "    root_block_device {",
      "      volume_size = \"300\"",
      "      volume_type = \"gp2\"",
      "    }",
      "",
      "    tags {",
      "      Name = \"spot-fleet-example\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-spot_instance_request": {
    "description": "Defines spot_instance_request",
    "prefix": "tf-aws-resource-spot_instance_request",
    "body": [
      "# Request a spot instance at $0.03",
      "resource \"aws_spot_instance_request\" \"cheap_worker\" {",
      "  ami           = \"ami-1234\"",
      "  spot_price    = \"0.03\"",
      "  instance_type = \"c4.xlarge\"",
      "",
      "  tags {",
      "    Name = \"CheapWorker\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-sqs_queue": {
    "description": "Defines sqs_queue",
    "prefix": "tf-aws-resource-sqs_queue",
    "body": [
      "resource \"aws_sqs_queue\" \"terraform_queue\" {",
      "  name                      = \"terraform-example-queue\"",
      "  delay_seconds             = 90",
      "  max_message_size          = 2048",
      "  message_retention_seconds = 86400",
      "  receive_wait_time_seconds = 10",
      "  redrive_policy            = \"{\\\"deadLetterTargetArn\\\":\\\"${aws_sqs_queue.terraform_queue_deadletter.arn}\\\",\\\"maxReceiveCount\\\":4}\"",
      "",
      "  tags {",
      "    Environment = \"production\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-sqs_queue_policy": {
    "description": "Defines sqs_queue_policy",
    "prefix": "tf-aws-resource-sqs_queue_policy",
    "body": [
      "resource \"aws_sqs_queue\" \"q\" {",
      "  name = \"examplequeue\"",
      "}",
      "",
      "resource \"aws_sqs_queue_policy\" \"test\" {",
      "  queue_url = \"${aws_sqs_queue.q.id}\"",
      "",
      "  policy = <<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Id\": \"sqspolicy\",",
      "  \"Statement\": [",
      "    {",
      "      \"Sid\": \"First\",",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": \"*\",",
      "      \"Action\": \"sqs:SendMessage\",",
      "      \"Resource\": \"${aws_sqs_queue.q.arn}\",",
      "      \"Condition\": {",
      "        \"ArnEquals\": {",
      "          \"aws:SourceArn\": \"${aws_sqs_queue.q.arn}\"",
      "        }",
      "      }",
      "    }",
      "  ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "aws-resource-ssm_activation": {
    "description": "Defines ssm_activation",
    "prefix": "tf-aws-resource-ssm_activation",
    "body": [
      "resource \"aws_iam_role\" \"test_role\" {",
      "  name = \"test_role\"",
      "",
      "  assume_role_policy = <<EOF",
      "  {",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": {",
      "      \"Effect\": \"Allow\",",
      "      \"Principal\": {\"Service\": \"ssm.amazonaws.com\"},",
      "      \"Action\": \"sts:AssumeRole\"",
      "    }",
      "  }",
      "EOF",
      "}",
      "",
      "resource \"aws_iam_role_policy_attachment\" \"test_attach\" {",
      "  role       = \"${aws_iam_role.test_role.name}\"",
      "  policy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM\"",
      "}",
      "",
      "resource \"aws_ssm_activation\" \"foo\" {",
      "  name               = \"test_ssm_activation\"",
      "  description        = \"Test\"",
      "  iam_role           = \"${aws_iam_role.test_role.id}\"",
      "  registration_limit = \"5\"",
      "  depends_on         = [\"aws_iam_role_policy_attachment.test_attach\"]",
      "}"
    ]
  },
  "aws-resource-ssm_association": {
    "description": "Defines ssm_association",
    "prefix": "tf-aws-resource-ssm_association",
    "body": [
      "resource \"aws_ssm_association\" \"example\" {",
      "  name = \"${aws_ssm_document.example.name}\"",
      "",
      "  targets {",
      "    key    = \"InstanceIds\"",
      "    values = \"${aws_instance.example.id}\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-ssm_document": {
    "description": "Defines ssm_document",
    "prefix": "tf-aws-resource-ssm_document",
    "body": [
      "resource \"aws_ssm_document\" \"foo\" {",
      "  name          = \"test_document\"",
      "  document_type = \"Command\"",
      "",
      "  content = <<DOC",
      "  {",
      "    \"schemaVersion\": \"1.2\",",
      "    \"description\": \"Check ip configuration of a Linux instance.\",",
      "    \"parameters\": {",
      "",
      "    },",
      "    \"runtimeConfig\": {",
      "      \"aws:runShellScript\": {",
      "        \"properties\": [",
      "          {",
      "            \"id\": \"0.aws:runShellScript\",",
      "            \"runCommand\": [\"ifconfig\"]",
      "          }",
      "        ]",
      "      }",
      "    }",
      "  }",
      "DOC",
      "}"
    ]
  },
  "aws-resource-ssm_maintenance_window": {
    "description": "Defines ssm_maintenance_window",
    "prefix": "tf-aws-resource-ssm_maintenance_window",
    "body": [
      "resource \"aws_ssm_maintenance_window\" \"production\" {",
      "  name = \"maintenance-window-application\"",
      "  schedule = \"cron(0 16 ? * TUE *)\"",
      "  duration = 3",
      "  cutoff = 1",
      "}"
    ]
  },
  "aws-resource-ssm_maintenance_window_target": {
    "description": "Defines ssm_maintenance_window_target",
    "prefix": "tf-aws-resource-ssm_maintenance_window_target",
    "body": [
      "resource \"aws_ssm_maintenance_window\" \"window\" {",
      "  name = \"maintenance-window-webapp\"",
      "  schedule = \"cron(0 16 ? * TUE *)\"",
      "  duration = 3",
      "  cutoff = 1",
      "}",
      "",
      "resource \"aws_ssm_maintenance_window_target\" \"target1\" {",
      "  window_id = \"${aws_ssm_maintenance_window.window.id}\"",
      "  resource_type = \"INSTANCE\"",
      "  targets {",
      "    key = \"tag:Name\"",
      "    values = [\"acceptance_test\"]",
      "  }",
      "}"
    ]
  },
  "aws-resource-ssm_maintenance_window_task": {
    "description": "Defines ssm_maintenance_window_task",
    "prefix": "tf-aws-resource-ssm_maintenance_window_task",
    "body": [
      "resource \"aws_ssm_maintenance_window\" \"window\" {",
      "  name = \"maintenance-window-%s\"",
      "  schedule = \"cron(0 16 ? * TUE *)\"",
      "  duration = 3",
      "  cutoff = 1",
      "}",
      "",
      "resource \"aws_ssm_maintenance_window_task\" \"task\" {",
      "  window_id = \"${aws_ssm_maintenance_window.window.id}\"",
      "  task_type = \"RUN_COMMAND\"",
      "  task_arn = \"AWS-RunShellScript\"",
      "  priority = 1",
      "  service_role_arn = \"arn:aws:iam::187416307283:role/service-role/AWS_Events_Invoke_Run_Command_112316643\"",
      "  max_concurrency = \"2\"",
      "  max_errors = \"1\"",
      "  targets {",
      "    key = \"InstanceIds\"",
      "    values = [\"${aws_instance.instance.id}\"]",
      "  }",
      "  task_parameters {",
      "    name = \"commands\"",
      "    values = [\"pwd\"]",
      "  }",
      "}",
      "",
      "resource \"aws_instance\" \"instance\" {",
      "  ami = \"ami-4fccb37f\"",
      "",
      "  instance_type = \"m1.small\"",
      "}"
    ]
  },
  "aws-resource-ssm_parameter": {
    "description": "Defines ssm_parameter",
    "prefix": "tf-aws-resource-ssm_parameter",
    "body": [
      "resource \"aws_ssm_parameter\" \"foo\" {",
      "  name  = \"foo\"",
      "  type  = \"String\"",
      "  value = \"bar\"",
      "}"
    ]
  },
  "aws-resource-ssm_patch_baseline": {
    "description": "Defines ssm_patch_baseline",
    "prefix": "tf-aws-resource-ssm_patch_baseline",
    "body": [
      "resource \"aws_ssm_patch_baseline\" \"production\" {",
      "  name  = \"patch-baseline\"",
      "  approved_patches = [\"KB123456\"]",
      "}"
    ]
  },
  "aws-resource-ssm_patch_group": {
    "description": "Defines ssm_patch_group",
    "prefix": "tf-aws-resource-ssm_patch_group",
    "body": [
      "resource \"aws_ssm_patch_baseline\" \"production\" {",
      "  name  = \"patch-baseline\"",
      "  approved_patches = [\"KB123456\"]",
      "}",
      "",
      "resource \"aws_ssm_patch_group\" \"patchgroup\" {",
      "  baseline_id = \"${aws_ssm_patch_baseline.production.id}\"",
      "  patch_group = \"patch-group-name\"",
      "}"
    ]
  },
  "aws-resource-ssm_resource_data_sync": {
    "description": "Defines ssm_resource_data_sync",
    "prefix": "tf-aws-resource-ssm_resource_data_sync",
    "body": [
      "resource \"aws_s3_bucket\" \"hoge\" {",
      "  bucket = \"tf-test-bucket-1234\"",
      "  region = \"us-east-1\"",
      "}",
      "",
      "resource \"aws_s3_bucket_policy\" \"hoge\" {",
      "  bucket = \"${aws_s3_bucket.hoge.bucket}\"",
      "  policy = <<EOF",
      "{",
      "    \"Version\": \"2012-10-17\",",
      "    \"Statement\": [",
      "        {",
      "            \"Sid\": \"SSMBucketPermissionsCheck\",",
      "            \"Effect\": \"Allow\",",
      "            \"Principal\": {",
      "                \"Service\": \"ssm.amazonaws.com\"",
      "            },",
      "            \"Action\": \"s3:GetBucketAcl\",",
      "            \"Resource\": \"arn:aws:s3:::tf-test-bucket-1234\"",
      "        },",
      "        {",
      "            \"Sid\": \" SSMBucketDelivery\",",
      "            \"Effect\": \"Allow\",",
      "            \"Principal\": {",
      "                \"Service\": \"ssm.amazonaws.com\"",
      "            },",
      "            \"Action\": \"s3:PutObject\",",
      "            \"Resource\": [\"arn:aws:s3:::tf-test-bucket-1234/*\"],",
      "            \"Condition\": {",
      "                \"StringEquals\": {",
      "                    \"s3:x-amz-acl\": \"bucket-owner-full-control\"",
      "                }",
      "            }",
      "        }",
      "      ]",
      "  }",
      "  EOF",
      "}",
      "",
      "resource \"aws_ssm_resource_data_sync\" \"foo\" {",
      "  name = \"foo\"",
      "  s3_destination = {",
      "    bucket_name = \"${aws_s3_bucket.hoge.bucket}\"",
      "    region = \"${aws_s3_bucket.hoge.region}\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-subnet": {
    "description": "Defines subnet",
    "prefix": "tf-aws-resource-subnet",
    "body": [
      "resource \"aws_subnet\" \"main\" {",
      "  vpc_id     = \"${aws_vpc.main.id}\"",
      "  cidr_block = \"10.0.1.0/24\"",
      "",
      "  tags {",
      "    Name = \"Main\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-volume_attachment": {
    "description": "Defines volume_attachment",
    "prefix": "tf-aws-resource-volume_attachment",
    "body": [
      "resource \"aws_volume_attachment\" \"ebs_att\" {",
      "  device_name = \"/dev/sdh\"",
      "  volume_id   = \"${aws_ebs_volume.example.id}\"",
      "  instance_id = \"${aws_instance.web.id}\"",
      "}",
      "",
      "resource \"aws_instance\" \"web\" {",
      "  ami               = \"ami-21f78e11\"",
      "  availability_zone = \"us-west-2a\"",
      "  instance_type     = \"t1.micro\"",
      "",
      "  tags {",
      "    Name = \"HelloWorld\"",
      "  }",
      "}",
      "",
      "resource \"aws_ebs_volume\" \"example\" {",
      "  availability_zone = \"us-west-2a\"",
      "  size              = 1",
      "}"
    ]
  },
  "aws-resource-vpc": {
    "description": "Defines vpc",
    "prefix": "tf-aws-resource-vpc",
    "body": [
      "resource \"aws_vpc\" \"main\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}"
    ]
  },
  "aws-resource-vpc_dhcp_options": {
    "description": "Defines vpc_dhcp_options",
    "prefix": "tf-aws-resource-vpc_dhcp_options",
    "body": [
      "resource \"aws_vpc_dhcp_options\" \"dns_resolver\" {",
      "  domain_name_servers = [\"8.8.8.8\", \"8.8.4.4\"]",
      "}"
    ]
  },
  "aws-resource-vpc_dhcp_options_association": {
    "description": "Defines vpc_dhcp_options_association",
    "prefix": "tf-aws-resource-vpc_dhcp_options_association",
    "body": [
      "resource \"aws_vpc_dhcp_options_association\" \"dns_resolver\" {",
      "  vpc_id          = \"${aws_vpc.foo.id}\"",
      "  dhcp_options_id = \"${aws_vpc_dhcp_options.foo.id}\"",
      "}"
    ]
  },
  "aws-resource-vpc_endpoint": {
    "description": "Defines vpc_endpoint",
    "prefix": "tf-aws-resource-vpc_endpoint",
    "body": [
      "resource \"aws_vpc_endpoint\" \"s3\" {",
      "  vpc_id       = \"${aws_vpc.main.id}\"",
      "  service_name = \"com.amazonaws.us-west-2.s3\"",
      "}"
    ]
  },
  "aws-resource-vpc_endpoint_connection_notification": {
    "description": "Defines vpc_endpoint_connection_notification",
    "prefix": "tf-aws-resource-vpc_endpoint_connection_notification",
    "body": [
      "resource \"aws_sns_topic\" \"topic\" {",
      "  name = \"vpce-notification-topic\"",
      "",
      "  policy = <<POLICY",
      "{",
      "    \"Version\":\"2012-10-17\",",
      "    \"Statement\":[{",
      "        \"Effect\": \"Allow\",",
      "        \"Principal\": {",
      "            \"Service\": \"vpce.amazonaws.com\"",
      "        },",
      "        \"Action\": \"SNS:Publish\",",
      "        \"Resource\": \"arn:aws:sns:*:*:vpce-notification-topic\"",
      "    }]",
      "}",
      "POLICY",
      "}",
      "",
      "resource \"aws_vpc_endpoint_service\" \"foo\" {",
      "  acceptance_required = false",
      "  network_load_balancer_arns = [\"${aws_lb.test.arn}\"]",
      "}",
      "",
      "resource \"aws_vpc_endpoint_connection_notification\" \"foo\" {",
      "  vpc_endpoint_service_id = \"${aws_vpc_endpoint_service.foo.id}\"",
      "  connection_notification_arn = \"${aws_sns_topic.topic.arn}\"",
      "  connection_events = [\"Accept\", \"Reject\"]",
      "}"
    ]
  },
  "aws-resource-vpc_endpoint_route_table_association": {
    "description": "Defines vpc_endpoint_route_table_association",
    "prefix": "tf-aws-resource-vpc_endpoint_route_table_association",
    "body": [
      "resource \"aws_vpc_endpoint_route_table_association\" \"private_s3\" {",
      "  vpc_endpoint_id = \"${aws_vpc_endpoint.s3.id}\"",
      "  route_table_id  = \"${aws_route_table.private.id}\"",
      "}"
    ]
  },
  "aws-resource-vpc_endpoint_service": {
    "description": "Defines vpc_endpoint_service",
    "prefix": "tf-aws-resource-vpc_endpoint_service",
    "body": [
      "resource \"aws_vpc_endpoint_service\" \"foo\" {",
      "  acceptance_required = false",
      "  network_load_balancer_arns = [\"${aws_lb.test.arn}\"]",
      "}"
    ]
  },
  "aws-resource-vpc_endpoint_service_allowed_principal": {
    "description": "Defines vpc_endpoint_service_allowed_principal",
    "prefix": "tf-aws-resource-vpc_endpoint_service_allowed_principal",
    "body": [
      "data \"aws_caller_identity\" \"current\" {}",
      "",
      "resource \"aws_vpc_endpoint_service_allowed_principal\" \"allow_me_to_foo\" {",
      "  vpc_endpoint_service_id = \"${aws_vpc_endpoint_service.foo.id}\"",
      "  principal_arn  = \"${data.aws_caller_identity.current.arn}\"",
      "}"
    ]
  },
  "aws-resource-vpc_endpoint_subnet_association": {
    "description": "Defines vpc_endpoint_subnet_association",
    "prefix": "tf-aws-resource-vpc_endpoint_subnet_association",
    "body": [
      "resource \"aws_vpc_endpoint_subnet_association\" \"sn_ec2\" {",
      "  vpc_endpoint_id = \"${aws_vpc_endpoint.ec2.id}\"",
      "  subnet_id       = \"${aws_subnet.sn.id}\"",
      "}"
    ]
  },
  "aws-resource-vpc_peering": {
    "description": "Defines vpc_peering",
    "prefix": "tf-aws-resource-vpc_peering",
    "body": [
      "resource \"aws_vpc_peering_connection\" \"foo\" {",
      "  peer_owner_id = \"${var.peer_owner_id}\"",
      "  peer_vpc_id   = \"${aws_vpc.bar.id}\"",
      "  vpc_id        = \"${aws_vpc.foo.id}\"",
      "}"
    ]
  },
  "aws-resource-vpc_peering_accepter": {
    "description": "Defines vpc_peering_accepter",
    "prefix": "tf-aws-resource-vpc_peering_accepter",
    "body": [
      "provider \"aws\" {",
      "  region = \"us-east-1\"",
      "",
      "  # Requester's credentials.",
      "}",
      "",
      "provider \"aws\" {",
      "  alias = \"peer\"",
      "  region = \"us-west-2\"",
      "",
      "  # Accepter's credentials.",
      "}",
      "",
      "resource \"aws_vpc\" \"main\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_vpc\" \"peer\" {",
      "  provider   = \"aws.peer\"",
      "  cidr_block = \"10.1.0.0/16\"",
      "}",
      "",
      "data \"aws_caller_identity\" \"peer\" {",
      "  provider = \"aws.peer\"",
      "}",
      "",
      "# Requester's side of the connection.",
      "resource \"aws_vpc_peering_connection\" \"peer\" {",
      "  vpc_id        = \"${aws_vpc.main.id}\"",
      "  peer_vpc_id   = \"${aws_vpc.peer.id}\"",
      "  peer_owner_id = \"${data.aws_caller_identity.peer.account_id}\"",
      "  peer_region   = \"us-west-2\"",
      "  auto_accept   = false",
      "",
      "  tags {",
      "    Side = \"Requester\"",
      "  }",
      "}",
      "",
      "# Accepter's side of the connection.",
      "resource \"aws_vpc_peering_connection_accepter\" \"peer\" {",
      "  provider                  = \"aws.peer\"",
      "  vpc_peering_connection_id = \"${aws_vpc_peering_connection.peer.id}\"",
      "  auto_accept               = true",
      "",
      "  tags {",
      "    Side = \"Accepter\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-vpc_peering_options": {
    "description": "Defines vpc_peering_options",
    "prefix": "tf-aws-resource-vpc_peering_options",
    "body": [
      "resource \"aws_vpc\" \"foo\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_vpc\" \"bar\" {",
      "  cidr_block = \"10.1.0.0/16\"",
      "}",
      "",
      "resource \"aws_vpc_peering_connection\" \"foo\" {",
      "  vpc_id        = \"${aws_vpc.foo.id}\"",
      "  peer_vpc_id   = \"${aws_vpc.bar.id}\"",
      "  auto_accept   = true",
      "}",
      "",
      "resource \"aws_vpc_peering_connection_options\" \"foo\" {",
      "  vpc_peering_connection_id = \"${aws_vpc_peering_connection.foo.id}\"",
      "",
      "  accepter {",
      "    allow_remote_vpc_dns_resolution = true",
      "  }",
      "",
      "  requester {",
      "    allow_vpc_to_remote_classic_link = true",
      "    allow_classic_link_to_remote_vpc = true",
      "  }",
      "}"
    ]
  },
  "aws-resource-vpn_connection": {
    "description": "Defines vpn_connection",
    "prefix": "tf-aws-resource-vpn_connection",
    "body": [
      "resource \"aws_vpc\" \"vpc\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_vpn_gateway\" \"vpn_gateway\" {",
      "  vpc_id = \"${aws_vpc.vpc.id}\"",
      "}",
      "",
      "resource \"aws_customer_gateway\" \"customer_gateway\" {",
      "  bgp_asn    = 65000",
      "  ip_address = \"172.0.0.1\"",
      "  type       = \"ipsec.1\"",
      "}",
      "",
      "resource \"aws_vpn_connection\" \"main\" {",
      "  vpn_gateway_id      = \"${aws_vpn_gateway.vpn_gateway.id}\"",
      "  customer_gateway_id = \"${aws_customer_gateway.customer_gateway.id}\"",
      "  type                = \"ipsec.1\"",
      "  static_routes_only  = true",
      "}"
    ]
  },
  "aws-resource-vpn_connection_route": {
    "description": "Defines vpn_connection_route",
    "prefix": "tf-aws-resource-vpn_connection_route",
    "body": [
      "resource \"aws_vpc\" \"vpc\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_vpn_gateway\" \"vpn_gateway\" {",
      "  vpc_id = \"${aws_vpc.vpc.id}\"",
      "}",
      "",
      "resource \"aws_customer_gateway\" \"customer_gateway\" {",
      "  bgp_asn    = 65000",
      "  ip_address = \"172.0.0.1\"",
      "  type       = \"ipsec.1\"",
      "}",
      "",
      "resource \"aws_vpn_connection\" \"main\" {",
      "  vpn_gateway_id      = \"${aws_vpn_gateway.vpn_gateway.id}\"",
      "  customer_gateway_id = \"${aws_customer_gateway.customer_gateway.id}\"",
      "  type                = \"ipsec.1\"",
      "  static_routes_only  = true",
      "}",
      "",
      "resource \"aws_vpn_connection_route\" \"office\" {",
      "  destination_cidr_block = \"192.168.10.0/24\"",
      "  vpn_connection_id      = \"${aws_vpn_connection.main.id}\"",
      "}"
    ]
  },
  "aws-resource-vpn_gateway": {
    "description": "Defines vpn_gateway",
    "prefix": "tf-aws-resource-vpn_gateway",
    "body": [
      "resource \"aws_vpn_gateway\" \"vpn_gw\" {",
      "  vpc_id = \"${aws_vpc.main.id}\"",
      "",
      "  tags {",
      "    Name = \"main\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-vpn_gateway_attachment": {
    "description": "Defines vpn_gateway_attachment",
    "prefix": "tf-aws-resource-vpn_gateway_attachment",
    "body": [
      "resource \"aws_vpc\" \"network\" {",
      "  cidr_block = \"10.0.0.0/16\"",
      "}",
      "",
      "resource \"aws_vpn_gateway\" \"vpn\" {",
      "  tags {",
      "    Name = \"example-vpn-gateway\"",
      "  }",
      "}",
      "",
      "resource \"aws_vpn_gateway_attachment\" \"vpn_attachment\" {",
      "  vpc_id         = \"${aws_vpc.network.id}\"",
      "  vpn_gateway_id = \"${aws_vpn_gateway.vpn.id}\"",
      "}"
    ]
  },
  "aws-resource-vpn_gateway_route_propagation": {
    "description": "Defines vpn_gateway_route_propagation",
    "prefix": "tf-aws-resource-vpn_gateway_route_propagation",
    "body": [
      "resource \"aws_vpn_gateway_route_propagation\" \"example\" {",
      "  vpn_gateway_id = \"${aws_vpn_gateway.example.id}\"",
      "  route_table_id = \"${aws_route_table.example.id}\"",
      "}"
    ]
  },
  "aws-resource-waf_byte_match_set": {
    "description": "Defines waf_byte_match_set",
    "prefix": "tf-aws-resource-waf_byte_match_set",
    "body": [
      "resource \"aws_waf_byte_match_set\" \"byte_set\" {",
      "  name = \"tf_waf_byte_match_set\"",
      "",
      "  byte_match_tuples {",
      "    text_transformation   = \"NONE\"",
      "    target_string         = \"badrefer1\"",
      "    positional_constraint = \"CONTAINS\"",
      "",
      "    field_to_match {",
      "      type = \"HEADER\"",
      "      data = \"referer\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_geo_match_set": {
    "description": "Defines waf_geo_match_set",
    "prefix": "tf-aws-resource-waf_geo_match_set",
    "body": [
      "resource \"aws_waf_geo_match_set\" \"geo_match_set\" {",
      "  name = \"geo_match_set\"",
      "",
      "  geo_match_constraint {",
      "    type  = \"Country\"",
      "    value = \"US\"",
      "  }",
      "",
      "  geo_match_constraint {",
      "    type  = \"Country\"",
      "    value = \"CA\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_ipset": {
    "description": "Defines waf_ipset",
    "prefix": "tf-aws-resource-waf_ipset",
    "body": [
      "resource \"aws_waf_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "",
      "  ip_set_descriptors {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_rate_based_rule": {
    "description": "Defines waf_rate_based_rule",
    "prefix": "tf-aws-resource-waf_rate_based_rule",
    "body": [
      "resource \"aws_waf_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "",
      "  ip_set_descriptors {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "}",
      "",
      "resource \"aws_waf_rate_based_rule\" \"wafrule\" {",
      "  depends_on  = [\"aws_waf_ipset.ipset\"]",
      "  name        = \"tfWAFRule\"",
      "  metric_name = \"tfWAFRule\"",
      "",
      "  rate_key = \"IP\"",
      "  rate_limit = 2000",
      "",
      "  predicates {",
      "    data_id = \"${aws_waf_ipset.ipset.id}\"",
      "    negated = false",
      "    type    = \"IPMatch\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_regex_match_set": {
    "description": "Defines waf_regex_match_set",
    "prefix": "tf-aws-resource-waf_regex_match_set",
    "body": [
      "resource \"aws_waf_regex_match_set\" \"example\" {",
      "  name = \"example\"",
      "  regex_match_tuple {",
      "    field_to_match {",
      "      data = \"User-Agent\"",
      "      type = \"HEADER\"",
      "    }",
      "    regex_pattern_set_id = \"${aws_waf_regex_pattern_set.example.id}\"",
      "    text_transformation = \"NONE\"",
      "  }",
      "}",
      "",
      "resource \"aws_waf_regex_pattern_set\" \"example\" {",
      "  name = \"example\"",
      "  regex_pattern_strings = [\"one\", \"two\"]",
      "}"
    ]
  },
  "aws-resource-waf_regex_pattern_set": {
    "description": "Defines waf_regex_pattern_set",
    "prefix": "tf-aws-resource-waf_regex_pattern_set",
    "body": [
      "resource \"aws_waf_regex_pattern_set\" \"example\" {",
      "  name = \"tf_waf_regex_pattern_set\"",
      "  regex_pattern_strings = [\"one\", \"two\"]",
      "}"
    ]
  },
  "aws-resource-waf_rule": {
    "description": "Defines waf_rule",
    "prefix": "tf-aws-resource-waf_rule",
    "body": [
      "resource \"aws_waf_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "",
      "  ip_set_descriptors {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "}",
      "",
      "resource \"aws_waf_rule\" \"wafrule\" {",
      "  depends_on  = [\"aws_waf_ipset.ipset\"]",
      "  name        = \"tfWAFRule\"",
      "  metric_name = \"tfWAFRule\"",
      "",
      "  predicates {",
      "    data_id = \"${aws_waf_ipset.ipset.id}\"",
      "    negated = false",
      "    type    = \"IPMatch\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_rule_group": {
    "description": "Defines waf_rule_group",
    "prefix": "tf-aws-resource-waf_rule_group",
    "body": [
      "resource \"aws_waf_rule\" \"example\" {",
      "  name        = \"example\"",
      "  metric_name = \"example\"",
      "}",
      "",
      "resource \"aws_waf_rule_group\" \"example\" {",
      "  name = \"example\"",
      "  metric_name = \"example\"",
      "  activated_rule {",
      "    action {",
      "      type = \"COUNT\"",
      "    }",
      "    priority = 50",
      "    rule_id = \"${aws_waf_rule.example.id}\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_size_constraint_set": {
    "description": "Defines waf_size_constraint_set",
    "prefix": "tf-aws-resource-waf_size_constraint_set",
    "body": [
      "resource \"aws_waf_size_constraint_set\" \"size_constraint_set\" {",
      "  name = \"tfsize_constraints\"",
      "",
      "  size_constraints {",
      "    text_transformation = \"NONE\"",
      "    comparison_operator = \"EQ\"",
      "    size                = \"4096\"",
      "",
      "    field_to_match {",
      "      type = \"BODY\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_sql_injection_match_set": {
    "description": "Defines waf_sql_injection_match_set",
    "prefix": "tf-aws-resource-waf_sql_injection_match_set",
    "body": [
      "resource \"aws_waf_sql_injection_match_set\" \"sql_injection_match_set\" {",
      "  name = \"tf-sql_injection_match_set\"",
      "",
      "  sql_injection_match_tuples {",
      "    text_transformation = \"URL_DECODE\"",
      "",
      "    field_to_match {",
      "      type = \"QUERY_STRING\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_web_acl": {
    "description": "Defines waf_web_acl",
    "prefix": "tf-aws-resource-waf_web_acl",
    "body": [
      "resource \"aws_waf_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "",
      "  ip_set_descriptors {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "}",
      "",
      "resource \"aws_waf_rule\" \"wafrule\" {",
      "  depends_on  = [\"aws_waf_ipset.ipset\"]",
      "  name        = \"tfWAFRule\"",
      "  metric_name = \"tfWAFRule\"",
      "",
      "  predicates {",
      "    data_id = \"${aws_waf_ipset.ipset.id}\"",
      "    negated = false",
      "    type    = \"IPMatch\"",
      "  }",
      "}",
      "",
      "resource \"aws_waf_web_acl\" \"waf_acl\" {",
      "  depends_on  = [\"aws_waf_ipset.ipset\", \"aws_waf_rule.wafrule\"]",
      "  name        = \"tfWebACL\"",
      "  metric_name = \"tfWebACL\"",
      "",
      "  default_action {",
      "    type = \"ALLOW\"",
      "  }",
      "",
      "  rules {",
      "    action {",
      "      type = \"BLOCK\"",
      "    }",
      "",
      "    priority = 1",
      "    rule_id  = \"${aws_waf_rule.wafrule.id}\"",
      "    type     = \"REGULAR\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-waf_xss_match_set": {
    "description": "Defines waf_xss_match_set",
    "prefix": "tf-aws-resource-waf_xss_match_set",
    "body": [
      "resource \"aws_waf_xss_match_set\" \"xss_match_set\" {",
      "  name = \"xss_match_set\"",
      "",
      "  xss_match_tuples {",
      "    text_transformation = \"NONE\"",
      "",
      "    field_to_match {",
      "      type = \"URI\"",
      "    }",
      "  }",
      "",
      "  xss_match_tuples {",
      "    text_transformation = \"NONE\"",
      "",
      "    field_to_match {",
      "      type = \"QUERY_STRING\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_byte_match_set": {
    "description": "Defines wafregional_byte_match_set",
    "prefix": "tf-aws-resource-wafregional_byte_match_set",
    "body": [
      "resource \"aws_wafregional_byte_match_set\" \"byte_set\" {",
      "  name = \"tf_waf_byte_match_set\"",
      "  byte_match_tuple {",
      "    text_transformation = \"NONE\"",
      "    target_string = \"badrefer1\"",
      "    positional_constraint = \"CONTAINS\"",
      "    field_to_match {",
      "      type = \"HEADER\"",
      "      data = \"referer\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_geo_match_set": {
    "description": "Defines wafregional_geo_match_set",
    "prefix": "tf-aws-resource-wafregional_geo_match_set",
    "body": [
      "resource \"aws_wafregional_geo_match_set\" \"geo_match_set\" {",
      "  name = \"geo_match_set\"",
      "",
      "  geo_match_constraint {",
      "    type  = \"Country\"",
      "    value = \"US\"",
      "  }",
      "",
      "  geo_match_constraint {",
      "    type  = \"Country\"",
      "    value = \"CA\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_ipset": {
    "description": "Defines wafregional_ipset",
    "prefix": "tf-aws-resource-wafregional_ipset",
    "body": [
      "resource \"aws_wafregional_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "  ip_set_descriptor {",
      "    type = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_rate_based_rule": {
    "description": "Defines wafregional_rate_based_rule",
    "prefix": "tf-aws-resource-wafregional_rate_based_rule",
    "body": [
      "resource \"aws_wafregional_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "",
      "  ip_set_descriptors {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "}",
      "",
      "resource \"aws_wafregional_rate_based_rule\" \"wafrule\" {",
      "  depends_on  = [\"aws_wafregional_ipset.ipset\"]",
      "  name        = \"tfWAFRule\"",
      "  metric_name = \"tfWAFRule\"",
      "",
      "  rate_key = \"IP\"",
      "  rate_limit = 2000",
      "",
      "  predicate {",
      "    data_id = \"${aws_wafregional_ipset.ipset.id}\"",
      "    negated = false",
      "    type    = \"IPMatch\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_regex_match_set": {
    "description": "Defines wafregional_regex_match_set",
    "prefix": "tf-aws-resource-wafregional_regex_match_set",
    "body": [
      "resource \"aws_wafregional_regex_match_set\" \"example\" {",
      "  name = \"example\"",
      "  regex_match_tuple {",
      "    field_to_match {",
      "      data = \"User-Agent\"",
      "      type = \"HEADER\"",
      "    }",
      "    regex_pattern_set_id = \"${aws_wafregional_regex_pattern_set.example.id}\"",
      "    text_transformation = \"NONE\"",
      "  }",
      "}",
      "",
      "resource \"aws_wafregional_regex_pattern_set\" \"example\" {",
      "  name = \"example\"",
      "  regex_pattern_strings = [\"one\", \"two\"]",
      "}"
    ]
  },
  "aws-resource-wafregional_regex_pattern_set": {
    "description": "Defines wafregional_regex_pattern_set",
    "prefix": "tf-aws-resource-wafregional_regex_pattern_set",
    "body": [
      "resource \"aws_wafregional_regex_pattern_set\" \"example\" {",
      "  name = \"example\"",
      "  regex_pattern_strings = [\"one\", \"two\"]",
      "}"
    ]
  },
  "aws-resource-wafregional_rule": {
    "description": "Defines wafregional_rule",
    "prefix": "tf-aws-resource-wafregional_rule",
    "body": [
      "resource \"aws_wafregional_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "",
      "  ip_set_descriptor {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "}",
      "",
      "resource \"aws_wafregional_rule\" \"wafrule\" {",
      "  name        = \"tfWAFRule\"",
      "  metric_name = \"tfWAFRule\"",
      "",
      "  predicate {",
      "    type    = \"IPMatch\"",
      "    data_id = \"${aws_wafregional_ipset.ipset.id}\"",
      "    negated = false",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_rule_group": {
    "description": "Defines wafregional_rule_group",
    "prefix": "tf-aws-resource-wafregional_rule_group",
    "body": [
      "resource \"aws_wafregional_rule\" \"example\" {",
      "  name        = \"example\"",
      "  metric_name = \"example\"",
      "}",
      "",
      "resource \"aws_wafregional_rule_group\" \"example\" {",
      "  name = \"example\"",
      "  metric_name = \"example\"",
      "  activated_rule {",
      "    action {",
      "      type = \"COUNT\"",
      "    }",
      "    priority = 50",
      "    rule_id = \"${aws_wafregional_rule.example.id}\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_size_constraint_set": {
    "description": "Defines wafregional_size_constraint_set",
    "prefix": "tf-aws-resource-wafregional_size_constraint_set",
    "body": [
      "resource \"aws_wafregional_size_constraint_set\" \"size_constraint_set\" {",
      "  name = \"tfsize_constraints\"",
      "",
      "  size_constraints {",
      "    text_transformation = \"NONE\"",
      "    comparison_operator = \"EQ\"",
      "    size                = \"4096\"",
      "",
      "    field_to_match {",
      "      type = \"BODY\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_sql_injection_match_set": {
    "description": "Defines wafregional_sql_injection_match_set",
    "prefix": "tf-aws-resource-wafregional_sql_injection_match_set",
    "body": [
      "resource \"aws_wafregional_sql_injection_match_set\" \"sql_injection_match_set\" {",
      "  name = \"tf-sql_injection_match_set\"",
      "  sql_injection_match_tuple {",
      "    text_transformation = \"URL_DECODE\"",
      "    field_to_match {",
      "      type = \"QUERY_STRING\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_web_acl": {
    "description": "Defines wafregional_web_acl",
    "prefix": "tf-aws-resource-wafregional_web_acl",
    "body": [
      "resource \"aws_wafregional_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "  ",
      "  ip_set_descriptor {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "}",
      "",
      "resource \"aws_wafregional_rule\" \"wafrule\" {",
      "  name        = \"tfWAFRule\"",
      "  metric_name = \"tfWAFRule\"",
      "  ",
      "  predicate {",
      "    data_id = \"${aws_wafregional_ipset.ipset.id}\"",
      "    negated = false",
      "    type    = \"IPMatch\"",
      "  }",
      "}",
      "",
      "resource \"aws_wafregional_web_acl\" \"wafacl\" {",
      "  name        = \"tfWebACL\"",
      "  metric_name = \"tfWebACL\"",
      "  ",
      "  default_action {",
      "    type = \"ALLOW\"",
      "  }",
      "  ",
      "  rule {",
      "    action {",
      "       type = \"BLOCK\"",
      "    }",
      "    ",
      "    priority = 1",
      "    rule_id  = \"${aws_wafregional_rule.wafrule.id}\"",
      "  }",
      "}"
    ]
  },
  "aws-resource-wafregional_web_acl_association": {
    "description": "Defines wafregional_web_acl_association",
    "prefix": "tf-aws-resource-wafregional_web_acl_association",
    "body": [
      "resource \"aws_wafregional_ipset\" \"ipset\" {",
      "  name = \"tfIPSet\"",
      "  ",
      "  ip_set_descriptor {",
      "    type  = \"IPV4\"",
      "    value = \"192.0.7.0/24\"",
      "  }",
      "}",
      "",
      "resource \"aws_wafregional_rule\" \"foo\" {",
      "  name        = \"tfWAFRule\"",
      "  metric_name = \"tfWAFRule\"",
      "  ",
      "  predicate {",
      "    data_id = \"${aws_wafregional_ipset.ipset.id}\"",
      "    negated = false",
      "    type    = \"IPMatch\"",
      "  }",
      "}",
      "",
      "resource \"aws_wafregional_web_acl\" \"foo\" {",
      "  name = \"foo\"",
      "  metric_name = \"foo\"",
      "  default_action {",
      "    type = \"ALLOW\"",
      "  }",
      "  rule {",
      "    action {",
      "      type = \"BLOCK\"",
      "    }",
      "    priority = 1",
      "    rule_id = \"${aws_wafregional_rule.foo.id}\"",
      "  }",
      "}",
      "",
      "resource \"aws_vpc\" \"foo\" {",
      "  cidr_block = \"10.1.0.0/16\"",
      "}",
      "",
      "data \"aws_availability_zones\" \"available\" {}",
      "",
      "resource \"aws_subnet\" \"foo\" {",
      "  vpc_id = \"${aws_vpc.foo.id}\"",
      "  cidr_block = \"10.1.1.0/24\"",
      "  availability_zone = \"${data.aws_availability_zones.available.names[0]}\"",
      "}",
      "",
      "resource \"aws_subnet\" \"bar\" {",
      "  vpc_id = \"${aws_vpc.foo.id}\"",
      "  cidr_block = \"10.1.2.0/24\"",
      "  availability_zone = \"${data.aws_availability_zones.available.names[1]}\"",
      "}",
      "",
      "resource \"aws_alb\" \"foo\" {",
      "  internal = true",
      "  subnets = [\"${aws_subnet.foo.id}\", \"${aws_subnet.bar.id}\"]",
      "}",
      "",
      "resource \"aws_wafregional_web_acl_association\" \"foo\" {",
      "  resource_arn = \"${aws_alb.foo.arn}\"",
      "  web_acl_id = \"${aws_wafregional_web_acl.foo.id}\"",
      "}"
    ]
  },
  "aws-resource-wafregional_xss_match_set": {
    "description": "Defines wafregional_xss_match_set",
    "prefix": "tf-aws-resource-wafregional_xss_match_set",
    "body": [
      "resource \"aws_wafregional_xss_match_set\" \"xss_match_set\" {",
      "  name = \"xss_match_set\"",
      "  xss_match_tuple {",
      "    text_transformation = \"NONE\"",
      "    field_to_match {",
      "      type = \"URI\"",
      "    }",
      "  }",
      "",
      "  xss_match_tuple {",
      "    text_transformation = \"NONE\"",
      "    field_to_match {",
      "      type = \"QUERY_STRING\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "azure-classic-resource-affinity_group": {
    "description": "Defines affinity_group",
    "prefix": "tf-azure-classic-resource-affinity_group",
    "body": [
      "resource \"azure_affinity_group\" \"terraform-main-group\" {",
      "  name        = \"terraform-group\"",
      "  location    = \"North Europe\"",
      "  label       = \"tf-group-01\"",
      "  description = \"Affinity group created by Terraform.\"",
      "}"
    ]
  },
  "azure-classic-resource-data_disk": {
    "description": "Defines data_disk",
    "prefix": "tf-azure-classic-resource-data_disk",
    "body": [
      "resource \"azure_data_disk\" \"data\" {",
      "  lun                  = 0",
      "  size                 = 10",
      "  storage_service_name = \"yourstorage\"",
      "  virtual_machine      = \"server1\"",
      "}"
    ]
  },
  "azure-classic-resource-dns_server": {
    "description": "Defines dns_server",
    "prefix": "tf-azure-classic-resource-dns_server",
    "body": [
      "resource \"azure_dns_server\" \"google-dns\" {",
      "  name        = \"google\"",
      "  dns_address = \"8.8.8.8\"",
      "}"
    ]
  },
  "azure-classic-resource-hosted_service": {
    "description": "Defines hosted_service",
    "prefix": "tf-azure-classic-resource-hosted_service",
    "body": [
      "resource \"azure_hosted_service\" \"terraform-service\" {",
      "  name               = \"terraform-service\"",
      "  location           = \"North Europe\"",
      "  ephemeral_contents = false",
      "  description        = \"Hosted service created by Terraform.\"",
      "  label              = \"tf-hs-01\"",
      "}"
    ]
  },
  "azure-classic-resource-instance": {
    "description": "Defines instance",
    "prefix": "tf-azure-classic-resource-instance",
    "body": [
      "resource \"azure_hosted_service\" \"terraform-service\" {",
      "  name               = \"terraform-service\"",
      "  location           = \"North Europe\"",
      "  ephemeral_contents = false",
      "  description        = \"Hosted service created by Terraform.\"",
      "  label              = \"tf-hs-01\"",
      "}",
      "",
      "resource \"azure_instance\" \"web\" {",
      "  name                 = \"terraform-test\"",
      "  hosted_service_name  = \"${azure_hosted_service.terraform-service.name}\"",
      "  image                = \"Ubuntu Server 14.04 LTS\"",
      "  size                 = \"Basic_A1\"",
      "  storage_service_name = \"yourstorage\"",
      "  location             = \"West US\"",
      "  username             = \"terraform\"",
      "  password             = \"Pass!admin123\"",
      "  domain_name          = \"contoso.com\"",
      "  domain_ou            = \"OU=Servers,DC=contoso.com,DC=Contoso,DC=com\"",
      "  domain_username      = \"Administrator\"",
      "  domain_password      = \"Pa$$word123\"",
      "",
      "  endpoint {",
      "    name         = \"SSH\"",
      "    protocol     = \"tcp\"",
      "    public_port  = 22",
      "    private_port = 22",
      "  }",
      "}"
    ]
  },
  "azure-classic-resource-local_network_connection": {
    "description": "Defines local_network_connection",
    "prefix": "tf-azure-classic-resource-local_network_connection",
    "body": [
      "resource \"azure_local_network_connection\" \"localnet\" {",
      "  name                   = \"terraform-local-network-connection\"",
      "  vpn_gateway_address    = \"45.12.189.2\"",
      "  address_space_prefixes = [\"10.10.10.0/24\", \"10.10.11.0/24\"]",
      "}"
    ]
  },
  "azure-classic-resource-security_group": {
    "description": "Defines security_group",
    "prefix": "tf-azure-classic-resource-security_group",
    "body": [
      "resource \"azure_security_group\" \"web\" {",
      "  name     = \"webservers\"",
      "  location = \"West US\"",
      "}"
    ]
  },
  "azure-classic-resource-security_group_rule": {
    "description": "Defines security_group_rule",
    "prefix": "tf-azure-classic-resource-security_group_rule",
    "body": [
      "resource \"azure_security_group\" \"web\" {",
      "  # ...",
      "}",
      "",
      "resource \"azure_security_group\" \"apps\" {",
      "  # ...",
      "}",
      "",
      "resource \"azure_security_group_rule\" \"ssh_access\" {",
      "  name                       = \"ssh-access-rule\"",
      "  security_group_names       = [\"${azure_security_group.web.name}\", \"${azure_security_group.apps.name}\"]",
      "  type                       = \"Inbound\"",
      "  action                     = \"Allow\"",
      "  priority                   = 200",
      "  source_address_prefix      = \"100.0.0.0/32\"",
      "  source_port_range          = \"*\"",
      "  destination_address_prefix = \"10.0.0.0/32\"",
      "  destination_port_range     = \"22\"",
      "  protocol                   = \"TCP\"",
      "}"
    ]
  },
  "azure-classic-resource-sql_database_server": {
    "description": "Defines sql_database_server",
    "prefix": "tf-azure-classic-resource-sql_database_server",
    "body": [
      "resource \"azure_sql_database_server\" \"sql-serv\" {",
      "  name     = \"<computed>\"",
      "  location = \"West US\"",
      "  username = \"SuperUser\"",
      "  password = \"SuperSEKR3T\"",
      "  version  = \"2.0\"",
      "  url      = \"<computed>\"",
      "}"
    ]
  },
  "azure-classic-resource-sql_database_server_firewall_rule": {
    "description": "Defines sql_database_server_firewall_rule",
    "prefix": "tf-azure-classic-resource-sql_database_server_firewall_rule",
    "body": [
      "resource \"azure_sql_database_server\" \"sql-serv1\" {",
      "  # ...",
      "}",
      "",
      "resource \"azure_sql_database_server\" \"sql-serv2\" {",
      "  # ...",
      "}",
      "",
      "resource \"azure_sql_database_server_firewall_rule\" \"constraint\" {",
      "  name     = \"terraform-testing-rule\"",
      "  start_ip = \"154.0.0.0\"",
      "  end_ip   = \"154.0.0.255\"",
      "",
      "  database_server_names = [",
      "    \"${azure_sql_database_server.sql-serv1.name}\",",
      "    \"${azure_sql_database_server.sql-serv2.name}\",",
      "  ]",
      "}"
    ]
  },
  "azure-classic-resource-sql_database_service": {
    "description": "Defines sql_database_service",
    "prefix": "tf-azure-classic-resource-sql_database_service",
    "body": [
      "resource \"azure_sql_database_service\" \"sql-server\" {",
      "  name                 = \"terraform-testing-db-renamed\"",
      "  database_server_name = \"flibberflabber\"",
      "  edition              = \"Standard\"",
      "  collation            = \"SQL_Latin1_General_CP1_CI_AS\"",
      "  max_size_bytes       = \"5368709120\"",
      "  service_level_id     = \"f1173c43-91bd-4aaa-973c-54e79e15235b\"",
      "}"
    ]
  },
  "azure-classic-resource-storage_blob": {
    "description": "Defines storage_blob",
    "prefix": "tf-azure-classic-resource-storage_blob",
    "body": [
      "resource \"azure_storage_blob\" \"foo\" {",
      "  name                   = \"tftesting-blob\"",
      "  storage_service_name   = \"tfstorserv\"",
      "  storage_container_name = \"terraform-storage-container\"",
      "  type                   = \"PageBlob\"",
      "  size                   = 1024",
      "}"
    ]
  },
  "azure-classic-resource-storage_container": {
    "description": "Defines storage_container",
    "prefix": "tf-azure-classic-resource-storage_container",
    "body": [
      "resource \"azure_storage_container\" \"stor-cont\" {",
      "  name                  = \"terraform-storage-container\"",
      "  container_access_type = \"blob\"",
      "  storage_service_name  = \"tfstorserv\"",
      "}"
    ]
  },
  "azure-classic-resource-storage_queue": {
    "description": "Defines storage_queue",
    "prefix": "tf-azure-classic-resource-storage_queue",
    "body": [
      "resource \"azure_storage_queue\" \"stor-queue\" {",
      "  name                 = \"terraform-storage-queue\"",
      "  storage_service_name = \"tfstorserv\"",
      "}"
    ]
  },
  "azure-classic-resource-storage_service": {
    "description": "Defines storage_service",
    "prefix": "tf-azure-classic-resource-storage_service",
    "body": [
      "resource \"azure_storage_service\" \"tfstor\" {",
      "  name         = \"tfstor\"",
      "  location     = \"West US\"",
      "  description  = \"Made by Terraform.\"",
      "  account_type = \"Standard_LRS\"",
      "}"
    ]
  },
  "azure-classic-resource-virtual_network": {
    "description": "Defines virtual_network",
    "prefix": "tf-azure-classic-resource-virtual_network",
    "body": [
      "resource \"azure_virtual_network\" \"default\" {",
      "  name          = \"test-network\"",
      "  address_space = [\"10.1.2.0/24\"]",
      "  location      = \"West US\"",
      "",
      "  subnet {",
      "    name           = \"subnet1\"",
      "    address_prefix = \"10.1.2.0/25\"",
      "  }",
      "}"
    ]
  },
  "azurerm-data-app_service": {
    "description": "Defines app_service",
    "prefix": "tf-azurerm-data-app_service",
    "body": [
      "data \"azurerm_app_service\" \"test\" {",
      "  name                = \"search-app-service\"",
      "  resource_group_name = \"search-service\"",
      "}",
      "",
      "output \"app_service_id\" {",
      "  value = \"${data.azurerm_app_service.test.id}\"",
      "}"
    ]
  },
  "azurerm-data-app_service_plan": {
    "description": "Defines app_service_plan",
    "prefix": "tf-azurerm-data-app_service_plan",
    "body": [
      "data \"azurerm_app_service_plan\" \"test\" {",
      "  name                = \"search-app-service-plan\"",
      "  resource_group_name = \"search-service\"",
      "}",
      "",
      "output \"app_service_plan_id\" {",
      "  value = \"${data.azurerm_app_service_plan.test.id}\"",
      "}"
    ]
  },
  "azurerm-data-application_security_group": {
    "description": "Defines application_security_group",
    "prefix": "tf-azurerm-data-application_security_group",
    "body": [
      "data \"azurerm_application_security_group\" \"test\" {",
      "  name = \"tf-appsecuritygroup\"",
      "  resource_group_name = \"my-resource-group\"",
      "}",
      "",
      "output \"application_security_group_id\" {",
      "  value = \"${data.azurerm_application_security_group.test.id}\"",
      "}"
    ]
  },
  "azurerm-data-builtin_role_definition": {
    "description": "Defines builtin_role_definition",
    "prefix": "tf-azurerm-data-builtin_role_definition",
    "body": [
      "data \"azurerm_builtin_role_definition\" \"contributor\" {",
      "  name = \"Contributor\"",
      "}",
      "",
      "output \"contributor_role_definition_id\" {",
      "  value = \"${data.azurerm_builtin_role_definition.contributor.id}\"",
      "}"
    ]
  },
  "azurerm-data-cdn_profile": {
    "description": "Defines cdn_profile",
    "prefix": "tf-azurerm-data-cdn_profile",
    "body": [
      "data \"azurerm_cdn_profile\" \"test\" {",
      "  name = \"myfirstcdnprofile\"",
      "  resource_group_name = \"example-resources\"",
      "}",
      "",
      "output \"cdn_profile_id\" {",
      "  value = \"${data.azurerm_cdn_profile.test.id}\"",
      "}"
    ]
  },
  "azurerm-data-client_config": {
    "description": "Defines client_config",
    "prefix": "tf-azurerm-data-client_config",
    "body": [
      "data \"azurerm_client_config\" \"current\" {}",
      "",
      "output \"account_id\" {",
      "  value = \"${data.azurerm_client_config.current.service_principal_application_id}\"",
      "}"
    ]
  },
  "azurerm-data-cosmosdb_account": {
    "description": "Defines cosmosdb_account",
    "prefix": "tf-azurerm-data-cosmosdb_account",
    "body": [
      "data \"azurerm_cosmosdb_account\" \"test\" {",
      "  name                = \"tfex-cosmosdb-account\"",
      "  resource_group_name = \"tfex-cosmosdb-account-rg\"",
      "}",
      "",
      "output \"cosmosdb_account_endpoint\" {",
      "  value = \"${data.azurerm_cosmosdb_account.jobs.endpoint}\"",
      "}"
    ]
  },
  "azurerm-data-dns_zone": {
    "description": "Defines dns_zone",
    "prefix": "tf-azurerm-data-dns_zone",
    "body": [
      "data \"azurerm_dns_zone\" \"test\" {",
      "  name                = \"search-eventhubns\"",
      "  resource_group_name = \"search-service\"",
      "}",
      "",
      "output \"dns_zone_id\" {",
      "  value = \"${data.azurerm_dns_zone.test.id}\"",
      "}"
    ]
  },
  "azurerm-data-eventhub_namespace": {
    "description": "Defines eventhub_namespace",
    "prefix": "tf-azurerm-data-eventhub_namespace",
    "body": [
      "data \"azurerm_eventhub_namespace\" \"test\" {",
      "  name                = \"search-eventhubns\"",
      "  resource_group_name = \"search-service\"",
      "}",
      "",
      "output \"eventhub_namespace_id\" {",
      "  value = \"${data.azurerm_eventhub_namespace.test.id}\"",
      "}"
    ]
  },
  "azurerm-data-image": {
    "description": "Defines image",
    "prefix": "tf-azurerm-data-image",
    "body": [
      "data \"azurerm_image\" \"search\" {",
      "  name                = \"search-api\"",
      "  resource_group_name = \"packerimages\"",
      "}",
      "",
      "output \"image_id\" {",
      "  value = \"${data.azurerm_image.search.id}\"",
      "}"
    ]
  },
  "azurerm-data-key_vault": {
    "description": "Defines key_vault",
    "prefix": "tf-azurerm-data-key_vault",
    "body": [
      "data \"azurerm_key_vault\" \"test\" {",
      "  name                = \"mykeyvault\"",
      "  resource_group_name = \"some-resource-group\"",
      "}",
      "",
      "output \"vault_uri\" {",
      "  value = \"${data.azurerm_key_vault.test.vault_uri}\"",
      "}"
    ]
  },
  "azurerm-data-key_vault_access_policy": {
    "description": "Defines key_vault_access_policy",
    "prefix": "tf-azurerm-data-key_vault_access_policy",
    "body": [
      "data \"azurerm_key_vault_access_policy\" \"contributor\" {",
      "  name = \"Key Management\"",
      "}",
      "",
      "output \"access_policy_key_permissions\" {",
      "  value = \"${data.azurerm_key_vault_access_policy.key_permissions}\"",
      "}"
    ]
  },
  "azurerm-data-key_vault_secret": {
    "description": "Defines key_vault_secret",
    "prefix": "tf-azurerm-data-key_vault_secret",
    "body": [
      "data \"azurerm_key_vault_secret\" \"test\" {",
      "  name      = \"secret-sauce\"",
      "  vault_uri = \"https://rickslab.vault.azure.net/\"",
      "}",
      "",
      "output \"secret_value\" {",
      "  value = \"${data.azurerm_key_vault_secret.test.value}\"",
      "}"
    ]
  },
  "azurerm-data-kubernetes_cluster": {
    "description": "Defines kubernetes_cluster",
    "prefix": "tf-azurerm-data-kubernetes_cluster",
    "body": [
      "data \"azurerm_kubernetes_cluster\" \"test\" {",
      "  name                = \"myakscluster\"",
      "  resource_group_name = \"my-example-resource-group\"",
      "}"
    ]
  },
  "azurerm-data-managed_disk": {
    "description": "Defines managed_disk",
    "prefix": "tf-azurerm-data-managed_disk",
    "body": [
      "data \"azurerm_managed_disk\" \"datasourcemd\" {",
      "    name = \"testManagedDisk\"",
      "    resource_group_name = \"acctestRG\"",
      "}",
      "",
      "resource \"azurerm_virtual_network\" \"test\" {",
      "  name                = \"acctvn\"",
      "  address_space       = [\"10.0.0.0/16\"]",
      "  location            = \"West US 2\"",
      "  resource_group_name = \"acctestRG\"",
      "}",
      "",
      "resource \"azurerm_subnet\" \"test\" {",
      "  name                 = \"acctsub\"",
      "  resource_group_name  = \"acctestRG\"",
      "  virtual_network_name = \"${azurerm_virtual_network.test.name}\"",
      "  address_prefix       = \"10.0.2.0/24\"",
      "}",
      "",
      "resource \"azurerm_network_interface\" \"test\" {",
      "  name                = \"acctni\"",
      "  location            = \"West US 2\"",
      "  resource_group_name = \"acctestRG\"",
      "",
      "  ip_configuration {",
      "    name                          = \"testconfiguration1\"",
      "    subnet_id                     = \"${azurerm_subnet.test.id}\"",
      "    private_ip_address_allocation = \"dynamic\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_virtual_machine\" \"test\" {",
      "  name                  = \"acctvm\"",
      "  location              = \"West US 2\"",
      "  resource_group_name   = \"acctestRG\"",
      "  network_interface_ids = [\"${azurerm_network_interface.test.id}\"]",
      "  vm_size               = \"Standard_DS1_v2\"",
      "",
      "  storage_image_reference {",
      "    publisher = \"Canonical\"",
      "    offer     = \"UbuntuServer\"",
      "    sku       = \"16.04-LTS\"",
      "    version   = \"latest\"",
      "  }",
      "",
      "  storage_os_disk {",
      "    name              = \"myosdisk1\"",
      "    caching           = \"ReadWrite\"",
      "    create_option     = \"FromImage\"",
      "    managed_disk_type = \"Standard_LRS\"",
      "  }",
      "",
      "  storage_data_disk {",
      "    name              = \"datadisk_new\"",
      "    managed_disk_type = \"Standard_LRS\"",
      "    create_option     = \"Empty\"",
      "    lun               = 0",
      "    disk_size_gb      = \"1023\"",
      "  }",
      "",
      "  storage_data_disk {",
      "    name            = \"${data.azurerm_managed_disk.datasourcemd.name}\"",
      "    managed_disk_id = \"${data.azurerm_managed_disk.datasourcemd.id}\"",
      "    create_option   = \"Attach\"",
      "    lun             = 1",
      "    disk_size_gb    = \"${data.azurerm_managed_disk.datasourcemd.disk_size_gb}\"",
      "  }",
      "",
      "  os_profile {",
      "    computer_name  = \"hostname\"",
      "    admin_username = \"testadmin\"",
      "    admin_password = \"Password1234!\"",
      "  }",
      "",
      "  os_profile_linux_config {",
      "    disable_password_authentication = false",
      "  }",
      "",
      "  tags {",
      "    environment = \"staging\"",
      "  }",
      "}"
    ]
  },
  "azurerm-data-network_interface": {
    "description": "Defines network_interface",
    "prefix": "tf-azurerm-data-network_interface",
    "body": [
      "data \"azurerm_network_interface\" \"test\" {",
      "  name                 = \"acctest-nic\"",
      "  resource_group_name  = \"networking\"",
      "}",
      "",
      "output \"network_interface_id\" {",
      "  value = \"${data.azurerm_network_interface.test.id}\"",
      "}"
    ]
  },
  "azurerm-data-network_security_group": {
    "description": "Defines network_security_group",
    "prefix": "tf-azurerm-data-network_security_group",
    "body": [
      "data \"azurerm_network_security_group\" \"test\" {",
      "  name                = \"${azurerm_network_security_group.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "output \"location\" {",
      "  value = \"${data.azurerm_network_security_group.test.location}\"",
      "}"
    ]
  },
  "azurerm-data-platform_image": {
    "description": "Defines platform_image",
    "prefix": "tf-azurerm-data-platform_image",
    "body": [
      "data \"azurerm_platform_image\" \"test\" {",
      "  location  = \"West Europe\"",
      "  publisher = \"Canonical\"",
      "  offer     = \"UbuntuServer\"",
      "  sku       = \"16.04-LTS\"",
      "}",
      "",
      "output \"version\" {",
      "  value = \"${data.azurerm_platform_image.test.version}\"",
      "}"
    ]
  },
  "azurerm-data-public_ip": {
    "description": "Defines public_ip",
    "prefix": "tf-azurerm-data-public_ip",
    "body": [
      "data \"azurerm_public_ip\" \"test\" {",
      "  name = \"name_of_public_ip\"",
      "  resource_group_name = \"name_of_resource_group\"",
      "}",
      "",
      "output \"domain_name_label\" {",
      "  value = \"${data.azurerm_public_ip.test.domain_name_label}\"",
      "}",
      "",
      "output \"public_ip_address\" {",
      "  value = \"${data.azurerm_public_ip.test.ip_address}\"",
      "}"
    ]
  },
  "azurerm-data-public_ips": {
    "description": "Defines public_ips",
    "prefix": "tf-azurerm-data-public_ips",
    "body": [
      "data \"azurerm_public_ips\" \"test\" {",
      "  resource_group_name = \"pip-test\"",
      "  attached            = false",
      "}"
    ]
  },
  "azurerm-data-recovery_services_vault": {
    "description": "Defines recovery_services_vault",
    "prefix": "tf-azurerm-data-recovery_services_vault",
    "body": [
      "data \"azurerm_recovery_services_vault\" \"vault\" {",
      "  name                = \"tfex-recovery_vault\"",
      "  resource_group_name = \"tfex-resource_group\"",
      "}"
    ]
  },
  "azurerm-data-resource_group": {
    "description": "Defines resource_group",
    "prefix": "tf-azurerm-data-resource_group",
    "body": [
      "data \"azurerm_resource_group\" \"test\" {",
      "  name = \"dsrg_test\"",
      "}",
      "",
      "resource \"azurerm_managed_disk\" \"test\" {",
      "  name                 = \"managed_disk_name\"",
      "  location             = \"${data.azurerm_resource_group.test.location}\"",
      "  resource_group_name  = \"${data.azurerm_resource_group.test.name}\"",
      "  storage_account_type = \"Standard_LRS\"",
      "  create_option        = \"Empty\"",
      "  disk_size_gb         = \"1\"",
      "}"
    ]
  },
  "azurerm-data-role_definition": {
    "description": "Defines role_definition",
    "prefix": "tf-azurerm-data-role_definition",
    "body": [
      "data \"azurerm_subscription\" \"primary\" {}",
      "",
      "data \"azurerm_role_definition\" \"custom\" {",
      "  role_definition_id = \"00000000-0000-0000-0000-000000000000\"",
      "  scope              = \"${data.azurerm_subscription.primary.id}\" # /subscriptions/00000000-0000-0000-0000-000000000000",
      "}",
      "",
      "output \"custom_role_definition_id\" {",
      "  value = \"${data.azurerm_role_definition.custom.id}\"",
      "}"
    ]
  },
  "azurerm-data-route_table": {
    "description": "Defines route_table",
    "prefix": "tf-azurerm-data-route_table",
    "body": [
      "data \"azurerm_route_table\" \"test\" {",
      "  name                = \"myroutetable\"",
      "  resource_group_name = \"some-resource-group\"",
      "}"
    ]
  },
  "azurerm-data-scheduler_job_collection": {
    "description": "Defines scheduler_job_collection",
    "prefix": "tf-azurerm-data-scheduler_job_collection",
    "body": [
      "data \"azurerm_scheduler_job_collection\" \"test\" {",
      "  name                = \"tfex-job-collection\"",
      "  resource_group_name = \"tfex-job-collection-rg\"",
      "}",
      "",
      "output \"job_collection_state\" {",
      "  value = \"${data.azurerm_scheduler_job_collection.jobs.state}\"",
      "}"
    ]
  },
  "azurerm-data-snapshot": {
    "description": "Defines snapshot",
    "prefix": "tf-azurerm-data-snapshot",
    "body": [
      "data \"azurerm_snapshot\" \"test\" {",
      "  name                = \"my-snapshot\"",
      "  resource_group_name = \"my-resource-group\"",
      "}"
    ]
  },
  "azurerm-data-storage_account": {
    "description": "Defines storage_account",
    "prefix": "tf-azurerm-data-storage_account",
    "body": [
      "data \"azurerm_storage_account\" \"test\" {",
      "  name                 = \"packerimages\"",
      "  resource_group_name  = \"packer-storage\"",
      "}",
      "",
      "output \"storage_account_tier\" {",
      "  value = \"${data.azurerm_storage_account.test.account_tier}\"",
      "}"
    ]
  },
  "azurerm-data-subnet": {
    "description": "Defines subnet",
    "prefix": "tf-azurerm-data-subnet",
    "body": [
      "data \"azurerm_subnet\" \"test\" {",
      "  name                 = \"backend\"",
      "  virtual_network_name = \"production\"",
      "  resource_group_name  = \"networking\"",
      "}",
      "",
      "output \"subnet_id\" {",
      "  value = \"${data.azurerm_subnet.test.id}\"",
      "}"
    ]
  },
  "azurerm-data-subscription": {
    "description": "Defines subscription",
    "prefix": "tf-azurerm-data-subscription",
    "body": [
      "data \"azurerm_subscription\" \"current\" {}",
      "",
      "output \"current_subscription_display_name\" {",
      "  value = \"${data.azurerm_subscription.current.display_name}\"",
      "}"
    ]
  },
  "azurerm-data-subscriptions": {
    "description": "Defines subscriptions",
    "prefix": "tf-azurerm-data-subscriptions",
    "body": [
      "data \"azurerm_subscriptions\" \"available\" {}",
      "",
      "output \"available_subscriptions\" {",
      "  value = \"${data.azurerm_subscriptions.current.subscriptions}\"",
      "}",
      "",
      "output \"first_available_subscription_display_name\" {",
      "  value = \"${data.azurerm_subscriptions.current.subscriptions.0.display_name}\"",
      "}"
    ]
  },
  "azurerm-data-traffic_manager_geographical_location": {
    "description": "Defines traffic_manager_geographical_location",
    "prefix": "tf-azurerm-data-traffic_manager_geographical_location",
    "body": [
      "data \"azurerm_traffic_manager_geographical_location\" \"test\" {",
      "  name = \"World\"",
      "}",
      "",
      "output \"location_code\" {",
      "  value = \"${data.azurerm_traffic_manager_geographical_location.test.id}\"",
      "}"
    ]
  },
  "azurerm-data-virtual_network": {
    "description": "Defines virtual_network",
    "prefix": "tf-azurerm-data-virtual_network",
    "body": [
      "data \"azurerm_virtual_network\" \"test\" {",
      "  name                 = \"production\"",
      "  resource_group_name  = \"networking\"",
      "}",
      "",
      "output \"virtual_network_id\" {",
      "  value = \"${data.azurerm_virtual_network.test.id}\"",
      "}"
    ]
  },
  "azurerm-data-virtual_network_gateway": {
    "description": "Defines virtual_network_gateway",
    "prefix": "tf-azurerm-data-virtual_network_gateway",
    "body": [
      "data \"azurerm_virtual_network_gateway\" \"test\" {",
      "  name                 = \"production\"",
      "  resource_group_name  = \"networking\"",
      "}",
      "",
      "output \"virtual_network_gateway_id\" {",
      "  value = \"${data.azurerm_virtual_network_gateway.test.id}\"",
      "}"
    ]
  },
  "azurerm-resource-app_service": {
    "description": "Defines app_service",
    "prefix": "tf-azurerm-resource-app_service",
    "body": [
      "resource \"random_id\" \"server\" {",
      "  keepers = {",
      "    azi_id = 1",
      "  }",
      "",
      "  byte_length = 8",
      "}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"some-resource-group\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_app_service_plan\" \"test\" {",
      "  name                = \"some-app-service-plan\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  sku {",
      "    tier = \"Standard\"",
      "    size = \"S1\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_app_service\" \"test\" {",
      "  name                = \"${random_id.server.hex}\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  app_service_plan_id = \"${azurerm_app_service_plan.test.id}\"",
      "",
      "  site_config {",
      "    dotnet_framework_version = \"v4.0\"",
      "    scm_type                 = \"LocalGit\"",
      "  }",
      "",
      "  app_settings {",
      "    \"SOME_KEY\" = \"some-value\"",
      "  }",
      "",
      "  connection_string {",
      "    name  = \"Database\"",
      "    type  = \"SQLServer\"",
      "    value = \"Server=some-server.mydomain.com;Integrated Security=SSPI\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-app_service_active_slot": {
    "description": "Defines app_service_active_slot",
    "prefix": "tf-azurerm-resource-app_service_active_slot",
    "body": [
      "resource \"random_id\" \"server\" {",
      "  # ...",
      "}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  # ...",
      "}",
      "",
      "resource \"azurerm_app_service_plan\" \"test\" {",
      "  # ...",
      "}",
      "",
      "resource \"azurerm_app_service\" \"test\" {",
      "  # ...",
      "}",
      "",
      "resource \"azurerm_app_service_slot\" \"test\" {",
      "  # ...",
      "}",
      "",
      "resource \"azurerm_app_service_active_slot\" \"test\" {",
      "  resource_group_name   = \"${azurerm_resource_group.test.name}\"",
      "  app_service_name      = \"${azurerm_app_service.test.name}\"",
      "  app_service_slot_name = \"${azurerm_app_service_slot.test.name}\"",
      "}"
    ]
  },
  "azurerm-resource-app_service_custom_hostname_binding": {
    "description": "Defines app_service_custom_hostname_binding",
    "prefix": "tf-azurerm-resource-app_service_custom_hostname_binding",
    "body": [
      "resource \"random_id\" \"server\" {",
      "  keepers = {",
      "    azi_id = 1",
      "  }",
      "",
      "  byte_length = 8",
      "}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"some-resource-group\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_app_service_plan\" \"test\" {",
      "  name                = \"some-app-service-plan\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  sku {",
      "    tier = \"Standard\"",
      "    size = \"S1\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_app_service\" \"test\" {",
      "  name                = \"${random_id.server.hex}\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  app_service_plan_id = \"${azurerm_app_service_plan.test.id}\"",
      "}",
      "",
      "resource \"azurerm_app_service_custom_hostname_binding\" \"test\" {",
      "  hostname            = \"www.mywebsite.com\"",
      "  app_service_name    = \"${azurerm_app_service.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}"
    ]
  },
  "azurerm-resource-app_service_plan": {
    "description": "Defines app_service_plan",
    "prefix": "tf-azurerm-resource-app_service_plan",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"api-rg-pro\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_app_service_plan\" \"test\" {",
      "  name                = \"api-appserviceplan-pro\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  sku {",
      "    tier = \"Standard\"",
      "    size = \"S1\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-app_service_slot": {
    "description": "Defines app_service_slot",
    "prefix": "tf-azurerm-resource-app_service_slot",
    "body": [
      "resource \"random_id\" \"server\" {",
      "  keepers = {",
      "    azi_id = 1",
      "  }",
      "",
      "  byte_length = 8",
      "}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"some-resource-group\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_app_service_plan\" \"test\" {",
      "  name                = \"some-app-service-plan\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  sku {",
      "    tier = \"Standard\"",
      "    size = \"S1\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_app_service\" \"test\" {",
      "  name                = \"${random_id.server.hex}\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  app_service_plan_id = \"${azurerm_app_service_plan.test.id}\"",
      "",
      "  site_config {",
      "    dotnet_framework_version = \"v4.0\"",
      "  }",
      "",
      "  app_settings {",
      "    \"SOME_KEY\" = \"some-value\"",
      "  }",
      "",
      "  connection_string {",
      "    name  = \"Database\"",
      "    type  = \"SQLServer\"",
      "    value = \"Server=some-server.mydomain.com;Integrated Security=SSPI\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_app_service_slot\" \"test\" {",
      "  name                = \"${random_id.server.hex}\"",
      "  app_service_name    = \"${azurerm_app_service.test.name}\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  app_service_plan_id = \"${azurerm_app_service_plan.test.id}\"",
      "",
      "  site_config {",
      "    dotnet_framework_version = \"v4.0\"",
      "  }",
      "",
      "  app_settings {",
      "    \"SOME_KEY\" = \"some-value\"",
      "  }",
      "",
      "  connection_string {",
      "    name  = \"Database\"",
      "    type  = \"SQLServer\"",
      "    value = \"Server=some-server.mydomain.com;Integrated Security=SSPI\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-application_gateway": {
    "description": "Defines application_gateway",
    "prefix": "tf-azurerm-resource-application_gateway",
    "body": [
      "# Create a resource group\r",
      "resource \"azurerm_resource_group\" \"rg\" {\r",
      "  name     = \"my-rg-application-gateway-12345\"\r",
      "  location = \"West US\"\r",
      "}\r",
      "\r",
      "# Create a application gateway in the web_servers resource group\r",
      "resource \"azurerm_virtual_network\" \"vnet\" {\r",
      "  name                = \"my-vnet-12345\"\r",
      "  resource_group_name = \"${azurerm_resource_group.rg.name}\"\r",
      "  address_space       = [\"10.254.0.0/16\"]\r",
      "  location            = \"${azurerm_resource_group.rg.location}\"\r",
      "}\r",
      "\r",
      "resource \"azurerm_subnet\" \"sub1\" {\r",
      "  name                 = \"my-subnet-1\"\r",
      "  resource_group_name  = \"${azurerm_resource_group.rg.name}\"\r",
      "  virtual_network_name = \"${azurerm_virtual_network.vnet.name}\"\r",
      "  address_prefix       = \"10.254.0.0/24\"\r",
      "}\r",
      "\r",
      "resource \"azurerm_subnet\" \"sub2\" {\r",
      "  name                 = \"my-subnet-2\"\r",
      "  resource_group_name  = \"${azurerm_resource_group.rg.name}\"\r",
      "  virtual_network_name = \"${azurerm_virtual_network.vnet.name}\"\r",
      "  address_prefix       = \"10.254.2.0/24\"\r",
      "}\r",
      "\r",
      "resource \"azurerm_public_ip\" \"pip\" {\r",
      "  name                         = \"my-pip-12345\"\r",
      "  location                     = \"${azurerm_resource_group.rg.location}\"\r",
      "  resource_group_name          = \"${azurerm_resource_group.rg.name}\"\r",
      "  public_ip_address_allocation = \"dynamic\"\r",
      "}\r",
      "\r",
      "# Create an application gateway\r",
      "resource \"azurerm_application_gateway\" \"network\" {\r",
      "  name                = \"my-application-gateway-12345\"\r",
      "  resource_group_name = \"${azurerm_resource_group.rg.name}\"\r",
      "  location            = \"West US\"\r",
      "\r",
      "  sku {\r",
      "    name           = \"Standard_Small\"\r",
      "    tier           = \"Standard\"\r",
      "    capacity       = 2\r",
      "  }\r",
      "\r",
      "  gateway_ip_configuration {\r",
      "      name         = \"my-gateway-ip-configuration\"\r",
      "      subnet_id    = \"${azurerm_virtual_network.vnet.id}/subnets/${azurerm_subnet.sub1.name}\"\r",
      "  }\r",
      "\r",
      "  frontend_port {\r",
      "      name         = \"${azurerm_virtual_network.vnet.name}-feport\"\r",
      "      port         = 80\r",
      "  }\r",
      "\r",
      "  frontend_ip_configuration {\r",
      "      name         = \"${azurerm_virtual_network.vnet.name}-feip\"\r",
      "      public_ip_address_id = \"${azurerm_public_ip.pip.id}\"\r",
      "  }\r",
      "\r",
      "  backend_address_pool {\r",
      "      name = \"${azurerm_virtual_network.vnet.name}-beap\"\r",
      "  }\r",
      "\r",
      "  backend_http_settings {\r",
      "      name                  = \"${azurerm_virtual_network.vnet.name}-be-htst\"\r",
      "      cookie_based_affinity = \"Disabled\"\r",
      "      port                  = 80\r",
      "      protocol              = \"Http\"\r",
      "     request_timeout        = 1\r",
      "  }\r",
      "\r",
      "  http_listener {\r",
      "        name                                  = \"${azurerm_virtual_network.vnet.name}-httplstn\"\r",
      "        frontend_ip_configuration_name        = \"${azurerm_virtual_network.vnet.name}-feip\"\r",
      "        frontend_port_name                    = \"${azurerm_virtual_network.vnet.name}-feport\"\r",
      "        protocol                              = \"Http\"\r",
      "  }\r",
      "\r",
      "  request_routing_rule {\r",
      "          name                       = \"${azurerm_virtual_network.vnet.name}-rqrt\"\r",
      "          rule_type                  = \"Basic\"\r",
      "          http_listener_name         = \"${azurerm_virtual_network.vnet.name}-httplstn\"\r",
      "          backend_address_pool_name  = \"${azurerm_virtual_network.vnet.name}-beap\"\r",
      "          backend_http_settings_name = \"${azurerm_virtual_network.vnet.name}-be-htst\"\r",
      "  }\r",
      "}\r"
    ]
  },
  "azurerm-resource-application_insights": {
    "description": "Defines application_insights",
    "prefix": "tf-azurerm-resource-application_insights",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"tf-test\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_application_insights\" \"test\" {",
      "  name                = \"tf-test-appinsights\"",
      "  location            = \"West Europe\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  application_type    = \"Web\"",
      "}",
      "",
      "output \"instrumentation_key\" {",
      "  value = \"${azurerm_application_insights.test.instrumentation_key}\"",
      "}",
      "",
      "output \"app_id\" {",
      "  value = \"${azurerm_application_insights.test.app_id}\"",
      "}"
    ]
  },
  "azurerm-resource-application_security_group": {
    "description": "Defines application_security_group",
    "prefix": "tf-azurerm-resource-application_security_group",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"tf-test\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_application_security_group\" \"test\" {",
      "  name                = \"tf-appsecuritygroup\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  tags {",
      "\t\"Hello\" = \"World\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-automation_account": {
    "description": "Defines automation_account",
    "prefix": "tf-azurerm-resource-automation_account",
    "body": [
      "resource \"azurerm_resource_group\" \"example\" {",
      " name = \"resourceGroup1\"",
      " location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_automation_account\" \"example\" {",
      "  name                = \"automationAccount1\"",
      "  location            = \"${azurerm_resource_group.example.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.example.name}\"",
      "",
      "  sku {",
      "    name = \"Basic\"",
      "  }",
      "",
      "  tags {",
      "    environment = \"development\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-automation_credential": {
    "description": "Defines automation_credential",
    "prefix": "tf-azurerm-resource-automation_credential",
    "body": [
      "resource \"azurerm_resource_group\" \"example\" {",
      " name = \"resourceGroup1\"",
      " location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_automation_account\" \"example\" {",
      "  name                = \"account1\"",
      "  location            = \"${azurerm_resource_group.example.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.example.name}\"",
      "  sku {",
      "    name = \"Basic\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_automation_credential\" \"example\" {",
      "  name                = \"credential1\"",
      "  resource_group_name = \"${azurerm_resource_group.example.name}\"",
      "  account_name        = \"${azurerm_automation_account.example.name}\"",
      "  username           = \"example_user\"",
      "  password            = \"example_pwd\"",
      "  description         = \"This is an example credential\"",
      "}"
    ]
  },
  "azurerm-resource-automation_runbook": {
    "description": "Defines automation_runbook",
    "prefix": "tf-azurerm-resource-automation_runbook",
    "body": [
      "resource \"azurerm_resource_group\" \"example\" {",
      " name = \"resourceGroup1\"",
      " location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_automation_account\" \"example\" {",
      "  name                = \"account1\"",
      "  location            = \"${azurerm_resource_group.example.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.example.name}\"",
      "  sku {",
      "    name = \"Basic\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_automation_runbook\" \"example\" {",
      "  name                = \"Get-AzureVMTutorial\"",
      "  location            = \"${azurerm_resource_group.example.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.example.name}\"",
      "  account_name        = \"${azurerm_automation_account.example.name}\"",
      "  log_verbose         = \"true\"",
      "  log_progress        = \"true\"",
      "  description         = \"This is an example runbook\"",
      "  runbook_type        = \"PowerShellWorkflow\"",
      "  publish_content_link {",
      "    uri = \"https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/101-automation-runbook-getvms/Runbooks/Get-AzureVMTutorial.ps1\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-automation_schedule": {
    "description": "Defines automation_schedule",
    "prefix": "tf-azurerm-resource-automation_schedule",
    "body": [
      "resource \"azurerm_resource_group\" \"example\" {",
      " name = \"resourceGroup1\"",
      " location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_automation_account\" \"example\" {",
      "  name                = \"account1\"",
      "  location            = \"${azurerm_resource_group.example.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.example.name}\"",
      "  sku {",
      "    name = \"Basic\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_automation_schedule\" \"example\" {",
      "  name                = \"schedule1\"",
      "  resource_group_name = \"${azurerm_resource_group.example.name}\"",
      "  account_name        = \"${azurerm_automation_account.example.name}\"",
      "  frequency           = \"OneTime\"",
      "  timezone            = \"Central Europe Standard Time\"",
      "  start_time\t      = \"2014-04-15T18:00:15+02:00\"",
      "  description         = \"This is an example schedule\"",
      "}"
    ]
  },
  "azurerm-resource-availability_set": {
    "description": "Defines availability_set",
    "prefix": "tf-azurerm-resource-availability_set",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"resourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_availability_set\" \"test\" {",
      "  name                = \"acceptanceTestAvailabilitySet1\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-cdn_endpoint": {
    "description": "Defines cdn_endpoint",
    "prefix": "tf-azurerm-resource-cdn_endpoint",
    "body": [
      "resource \"random_id\" \"server\" {",
      "  keepers = {",
      "    azi_id = 1",
      "  }",
      "",
      "  byte_length = 8",
      "}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_cdn_profile\" \"test\" {",
      "  name                = \"exampleCdnProfile\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  sku                 = \"Standard_Verizon\"",
      "}",
      "",
      "resource \"azurerm_cdn_endpoint\" \"test\" {",
      "  name                = \"${random_id.server.hex}\"",
      "  profile_name        = \"${azurerm_cdn_profile.test.name}\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  origin {",
      "    name      = \"exampleCdnOrigin\"",
      "    host_name = \"www.example.com\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-cdn_profile": {
    "description": "Defines cdn_profile",
    "prefix": "tf-azurerm-resource-cdn_profile",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"resourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_cdn_profile\" \"test\" {",
      "  name                = \"exampleCdnProfile\"",
      "  location            = \"West US\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  sku                 = \"Standard_Verizon\"",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "    cost_center = \"MSFT\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-container_group": {
    "description": "Defines container_group",
    "prefix": "tf-azurerm-resource-container_group",
    "body": [
      "resource \"azurerm_resource_group\" \"aci-rg\" {\r",
      "  name     = \"aci-test\"\r",
      "  location = \"west us\"\r",
      "}\r",
      "\r",
      "resource \"azurerm_storage_account\" \"aci-sa\" {\r",
      "  name                = \"acistorageacct\"\r",
      "  resource_group_name = \"${azurerm_resource_group.aci-rg.name}\"\r",
      "  location            = \"${azurerm_resource_group.aci-rg.location}\"\r",
      "  account_tier        = \"Standard\"\r",
      "  \r",
      "  account_replication_type = \"LRS\"\r",
      "}\r",
      "\r",
      "resource \"azurerm_storage_share\" \"aci-share\" {\r",
      "  name = \"aci-test-share\"\r",
      "\r",
      "  resource_group_name  = \"${azurerm_resource_group.aci-rg.name}\"\r",
      "  storage_account_name = \"${azurerm_storage_account.aci-sa.name}\"\r",
      "\r",
      "  quota = 50\r",
      "}\r",
      "\r",
      "resource \"azurerm_container_group\" \"aci-helloworld\" {\r",
      "  name                = \"aci-hw\"\r",
      "  location            = \"${azurerm_resource_group.aci-rg.location}\"\r",
      "  resource_group_name = \"${azurerm_resource_group.aci-rg.name}\"\r",
      "  ip_address_type     = \"public\"\r",
      "  dns_name_label      = \"aci-label\"\r",
      "  os_type             = \"linux\"\r",
      "\r",
      "  container {\r",
      "    name   = \"hw\"\r",
      "    image  = \"seanmckenna/aci-hellofiles\"\r",
      "    cpu    =\"0.5\"\r",
      "    memory =  \"1.5\"\r",
      "    port   = \"80\"\r",
      "\r",
      "    environment_variables {\r",
      "      \"NODE_ENV\" = \"testing\"\r",
      "    }\r",
      "\r",
      "    command = \"/bin/bash -c '/path to/myscript.sh'\"\r",
      "\r",
      "    volume {\r",
      "      name       = \"logs\"\r",
      "      mount_path = \"/aci/logs\"\r",
      "      read_only  = false\r",
      "      share_name = \"${azurerm_storage_share.aci-share.name}\"\r",
      "      \r",
      "      storage_account_name  = \"${azurerm_storage_account.aci-sa.name}\"\r",
      "      storage_account_key   = \"${azurerm_storage_account.aci-sa.primary_access_key}\"\r",
      "    }\r",
      "  }\r",
      "\r",
      "  container {\r",
      "    name   = \"sidecar\"\r",
      "    image  = \"microsoft/aci-tutorial-sidecar\"\r",
      "    cpu    = \"0.5\"\r",
      "    memory = \"1.5\"\r",
      "  }\r",
      "\r",
      "  tags {\r",
      "    environment = \"testing\"\r",
      "  }\r",
      "}\r"
    ]
  },
  "azurerm-resource-container_registry": {
    "description": "Defines container_registry",
    "prefix": "tf-azurerm-resource-container_registry",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"resourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_storage_account\" \"test\" {",
      "  name                     = \"storageaccount1\"",
      "  resource_group_name      = \"${azurerm_resource_group.test.name}\"",
      "  location                 = \"${azurerm_resource_group.test.location}\"",
      "  account_tier             = \"Standard\"",
      "  account_replication_type = \"GRS\"",
      "}",
      "",
      "resource \"azurerm_container_registry\" \"test\" {",
      "  name                = \"containerRegistry1\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  admin_enabled       = true",
      "  sku                 = \"Classic\"",
      "  storage_account_id  = \"${azurerm_storage_account.test.id}\"",
      "}"
    ]
  },
  "azurerm-resource-container_service": {
    "description": "Defines container_service",
    "prefix": "tf-azurerm-resource-container_service",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acctestRG1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_container_service\" \"test\" {",
      "  name                   = \"acctestcontservice1\"",
      "  location               = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name    = \"${azurerm_resource_group.test.name}\"",
      "  orchestration_platform = \"DCOS\"",
      "",
      "  master_profile {",
      "    count      = 1",
      "    dns_prefix = \"acctestmaster1\"",
      "  }",
      "",
      "  linux_profile {",
      "    admin_username = \"acctestuser1\"",
      "",
      "    ssh_key {",
      "      key_data = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCqaZoyiz1qbdOQ8xEf6uEu1cCwYowo5FHtsBhqLoDnnp7KUTEBN+L2NxRIfQ781rxV6Iq5jSav6b2Q8z5KiseOlvKA/RF2wqU0UPYqQviQhLmW6THTpmrv/YkUCuzxDpsH7DUDhZcwySLKVVe0Qm3+5N2Ta6UYH3lsDf9R9wTP2K/+vAnflKebuypNlmocIvakFWoZda18FOmsOoIVXQ8HWFNCuw9ZCunMSN62QGamCe3dL5cXlkgHYv7ekJE15IA9aOJcM7e90oeTqo+7HTcWfdu0qQqPWY5ujyMw/llas8tsXY85LFqRnr3gJ02bAscjc477+X+j/gkpFoN1QEmt terraform@demo.tld\"",
      "    }",
      "  }",
      "",
      "  agent_pool_profile {",
      "    name       = \"default\"",
      "    count      = 1",
      "    dns_prefix = \"acctestagent1\"",
      "    vm_size    = \"Standard_A0\"",
      "  }",
      "",
      "  diagnostics_profile {",
      "    enabled = false",
      "  }",
      "",
      "  tags {",
      "    Environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-cosmosdb_account": {
    "description": "Defines cosmosdb_account",
    "prefix": "tf-azurerm-resource-cosmosdb_account",
    "body": [
      "resource \"azurerm_resource_group\" \"rg\" {",
      "    name     = \"${var.resource_group_name}\"",
      "    location = \"${var.resource_group_location}\"",
      "}",
      "",
      "resource \"random_integer\" \"ri\" {",
      "    min = 10000",
      "    max = 99999",
      "}",
      "",
      "resource \"azurerm_cosmosdb_account\" \"db\" {",
      "    name                = \"tfex-cosmos-db-${random_integer.ri.result}\"",
      "    location            = \"${azurerm_resource_group.rg.location}\"",
      "    resource_group_name = \"${azurerm_resource_group.rg.name}\"",
      "    offer_type          = \"Standard\"",
      "    kind                = \"GlobalDocumentDB\"",
      "",
      "    enable_automatic_failover = true",
      "",
      "    consistency_policy {",
      "        consistency_level       = \"BoundedStaleness\"",
      "        max_interval_in_seconds = 10",
      "        max_staleness_prefix    = 200",
      "    }",
      "",
      "    geo_location {",
      "        location          = \"${var.failover_location}\"",
      "        failover_priority = 1",
      "    }",
      "",
      "    geo_location {",
      "        id                = \"tfex-cosmos-db-${random_integer.ri.result}-customid\"",
      "        location          = \"${azurerm_resource_group.rg.location}\"",
      "        failover_priority = 0",
      "    }",
      "}"
    ]
  },
  "azurerm-resource-dns_a_record": {
    "description": "Defines dns_a_record",
    "prefix": "tf-azurerm-resource-dns_a_record",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_dns_zone\" \"test\" {",
      "  name                = \"mydomain.com\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_dns_a_record\" \"test\" {",
      "  name                = \"test\"",
      "  zone_name           = \"${azurerm_dns_zone.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  ttl                 = 300",
      "  records             = [\"10.0.180.17\"]",
      "}"
    ]
  },
  "azurerm-resource-dns_aaaa_record": {
    "description": "Defines dns_aaaa_record",
    "prefix": "tf-azurerm-resource-dns_aaaa_record",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_dns_zone\" \"test\" {",
      "  name                = \"mydomain.com\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_dns_aaaa_record\" \"test\" {",
      "  name                = \"test\"",
      "  zone_name           = \"${azurerm_dns_zone.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  ttl                 = 300",
      "  records             = [\"2607:f8b0:4009:1803::1005\"]",
      "}"
    ]
  },
  "azurerm-resource-dns_cname_record": {
    "description": "Defines dns_cname_record",
    "prefix": "tf-azurerm-resource-dns_cname_record",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_dns_zone\" \"test\" {",
      "  name                = \"mydomain.com\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_dns_cname_record\" \"test\" {",
      "  name                = \"test\"",
      "  zone_name           = \"${azurerm_dns_zone.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  ttl                 = 300",
      "  record              = \"contoso.com\"",
      "}"
    ]
  },
  "azurerm-resource-dns_mx_record": {
    "description": "Defines dns_mx_record",
    "prefix": "tf-azurerm-resource-dns_mx_record",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_dns_zone\" \"test\" {",
      "  name                = \"mydomain.com\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_dns_mx_record\" \"test\" {",
      "  name                = \"test\"",
      "  zone_name           = \"${azurerm_dns_zone.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  ttl                 = 300",
      "",
      "  record {",
      "    preference = 10",
      "    exchange   = \"mail1.contoso.com\"",
      "  }",
      "",
      "  record {",
      "    preference = 20",
      "    exchange   = \"mail2.contoso.com\"",
      "  }",
      "",
      "  tags {",
      "    Environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-dns_ns_record": {
    "description": "Defines dns_ns_record",
    "prefix": "tf-azurerm-resource-dns_ns_record",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_dns_zone\" \"test\" {",
      "  name                = \"mydomain.com\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_dns_ns_record\" \"test\" {",
      "  name                = \"test\"",
      "  zone_name           = \"${azurerm_dns_zone.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  ttl                 = 300",
      "",
      "  record {",
      "    nsdname = \"ns1.contoso.com\"",
      "  }",
      "",
      "  record {",
      "    nsdname = \"ns2.contoso.com\"",
      "  }",
      "",
      "  tags {",
      "    Environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-dns_ptr_record": {
    "description": "Defines dns_ptr_record",
    "prefix": "tf-azurerm-resource-dns_ptr_record",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_dns_zone\" \"test\" {",
      "  name                = \"mydomain.com\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_dns_ptr_record\" \"test\" {",
      "  name                = \"test\"",
      "  zone_name           = \"${azurerm_dns_zone.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  ttl                 = 300",
      "  records             = [\"yourdomain.com\"]",
      "}"
    ]
  },
  "azurerm-resource-dns_srv_record": {
    "description": "Defines dns_srv_record",
    "prefix": "tf-azurerm-resource-dns_srv_record",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_dns_zone\" \"test\" {",
      "  name                = \"mydomain.com\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_dns_srv_record\" \"test\" {",
      "  name                = \"test\"",
      "  zone_name           = \"${azurerm_dns_zone.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  ttl                 = 300",
      "",
      "  record {",
      "    priority = 1",
      "    weight   = 5",
      "    port     = 8080",
      "    target   = \"target1.contoso.com\"",
      "  }",
      "",
      "  tags {",
      "    Environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-dns_txt_record": {
    "description": "Defines dns_txt_record",
    "prefix": "tf-azurerm-resource-dns_txt_record",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_dns_zone\" \"test\" {",
      "  name                = \"mydomain.com\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_dns_txt_record\" \"test\" {",
      "  name                = \"test\"",
      "  zone_name           = \"${azurerm_dns_zone.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  ttl                 = 300",
      "",
      "  record {",
      "    value = \"google-site-authenticator\"",
      "  }",
      "",
      "  record {",
      "    value = \"more site information here\"",
      "  }",
      "",
      "  tags {",
      "    Environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-dns_zone": {
    "description": "Defines dns_zone",
    "prefix": "tf-azurerm-resource-dns_zone",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_dns_zone\" \"test\" {",
      "  name                = \"mydomain.com\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}"
    ]
  },
  "azurerm-resource-eventgrid_topic": {
    "description": "Defines eventgrid_topic",
    "prefix": "tf-azurerm-resource-eventgrid_topic",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"resourceGroup1\"",
      "  location = \"West US 2\"",
      "}",
      "",
      "resource \"azurerm_eventgrid_topic\" \"test\" {",
      "  name                = \"my-eventgrid-topic\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-eventhub": {
    "description": "Defines eventhub",
    "prefix": "tf-azurerm-resource-eventhub",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"resourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_eventhub_namespace\" \"test\" {",
      "  name                = \"acceptanceTestEventHubNamespace\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  sku                 = \"Standard\"",
      "  capacity            = 1",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_eventhub\" \"test\" {",
      "  name                = \"acceptanceTestEventHub\"",
      "  namespace_name      = \"${azurerm_eventhub_namespace.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  partition_count     = 2",
      "  message_retention   = 1",
      "}"
    ]
  },
  "azurerm-resource-eventhub_authorization_rule": {
    "description": "Defines eventhub_authorization_rule",
    "prefix": "tf-azurerm-resource-eventhub_authorization_rule",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"resourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_eventhub_namespace\" \"test\" {",
      "  name                = \"acceptanceTestEventHubNamespace\"",
      "  location            = \"West US\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  sku                 = \"Basic\"",
      "  capacity            = 2",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_eventhub\" \"test\" {",
      "  name                = \"acceptanceTestEventHub\"",
      "  namespace_name      = \"${azurerm_eventhub_namespace.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  partition_count     = 2",
      "  message_retention   = 2",
      "}",
      "",
      "resource \"azurerm_eventhub_authorization_rule\" \"test\" {",
      "  name                = \"navi\"",
      "  namespace_name      = \"${azurerm_eventhub_namespace.test.name}\"",
      "  eventhub_name       = \"${azurerm_eventhub.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  listen              = true",
      "  send                = false",
      "  manage              = false",
      "}"
    ]
  },
  "azurerm-resource-eventhub_consumer_group": {
    "description": "Defines eventhub_consumer_group",
    "prefix": "tf-azurerm-resource-eventhub_consumer_group",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"resourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_eventhub_namespace\" \"test\" {",
      "  name                = \"acceptanceTestEventHubNamespace\"",
      "  location            = \"West US\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  sku                 = \"Basic\"",
      "  capacity            = 2",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_eventhub\" \"test\" {",
      "  name                = \"acceptanceTestEventHub\"",
      "  namespace_name      = \"${azurerm_eventhub_namespace.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  partition_count     = 2",
      "  message_retention   = 2",
      "}",
      "",
      "resource \"azurerm_eventhub_consumer_group\" \"test\" {",
      "  name                = \"acceptanceTestEventHubConsumerGroup\"",
      "  namespace_name      = \"${azurerm_eventhub_namespace.test.name}\"",
      "  eventhub_name       = \"${azurerm_eventhub.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  user_metadata       = \"some-meta-data\"",
      "}"
    ]
  },
  "azurerm-resource-eventhub_namespace": {
    "description": "Defines eventhub_namespace",
    "prefix": "tf-azurerm-resource-eventhub_namespace",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"resourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_eventhub_namespace\" \"test\" {",
      "  name                = \"acceptanceTestEventHubNamespace\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  sku                 = \"Standard\"",
      "  capacity            = 2",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-express_route_circuit": {
    "description": "Defines express_route_circuit",
    "prefix": "tf-azurerm-resource-express_route_circuit",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"exprtTest\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_express_route_circuit\" \"test\" {",
      "  name                     = \"expressRoute1\"",
      "  resource_group_name      = \"${azurerm_resource_group.test.name}\"",
      "  location                 = \"${azurerm_resource_group.test.location}\"",
      "  service_provider_name    = \"Equinix\"",
      "  peering_location         = \"Silicon Valley\"",
      "  bandwidth_in_mbps        = 50",
      "  sku {",
      "    tier   = \"Standard\"",
      "    family = \"MeteredData\"",
      "  }",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-express_route_circuit_authorization": {
    "description": "Defines express_route_circuit_authorization",
    "prefix": "tf-azurerm-resource-express_route_circuit_authorization",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"exprtTest\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_express_route_circuit\" \"test\" {",
      "  name                     = \"expressRoute1\"",
      "  resource_group_name      = \"${azurerm_resource_group.test.name}\"",
      "  location                 = \"${azurerm_resource_group.test.location}\"",
      "  service_provider_name    = \"Equinix\"",
      "  peering_location         = \"Silicon Valley\"",
      "  bandwidth_in_mbps        = 50",
      "  sku {",
      "    tier   = \"Standard\"",
      "    family = \"MeteredData\"",
      "  }",
      "  allow_classic_operations = false",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_express_route_circuit_authorization\" \"test\" {",
      "  name                       = \"exampleERCAuth\"",
      "  express_route_circuit_name = \"${azurerm_express_route_circuit.test.name}\"",
      "  resource_group_name        = \"${azurerm_resource_group.test.name}\"",
      "}"
    ]
  },
  "azurerm-resource-express_route_circuit_peering": {
    "description": "Defines express_route_circuit_peering",
    "prefix": "tf-azurerm-resource-express_route_circuit_peering",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"exprtTest\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_express_route_circuit\" \"test\" {",
      "  name                     = \"expressRoute1\"",
      "  resource_group_name      = \"${azurerm_resource_group.test.name}\"",
      "  location                 = \"${azurerm_resource_group.test.location}\"",
      "  service_provider_name    = \"Equinix\"",
      "  peering_location         = \"Silicon Valley\"",
      "  bandwidth_in_mbps        = 50",
      "  sku {",
      "    tier   = \"Standard\"",
      "    family = \"MeteredData\"",
      "  }",
      "  allow_classic_operations = false",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_express_route_circuit_peering\" \"test\" {",
      "  peering_type                  = \"MicrosoftPeering\"",
      "  express_route_circuit_name    = \"${azurerm_express_route_circuit.test.name}\"",
      "  resource_group_name           = \"${azurerm_resource_group.test.name}\"",
      "  peer_asn                      = 100",
      "  primary_peer_address_prefix   = \"123.0.0.0/30\"",
      "  secondary_peer_address_prefix = \"123.0.0.4/30\"",
      "  vlan_id                       = 300",
      "",
      "  microsoft_peering_config {",
      "    advertised_public_prefixes = [\"123.1.0.0/24\"]",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-function_app": {
    "description": "Defines function_app",
    "prefix": "tf-azurerm-resource-function_app",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"azure-functions-test-rg\"",
      "  location = \"westus2\"",
      "}",
      "",
      "resource \"azurerm_storage_account\" \"test\" {",
      "  name                     = \"functionsapptestsa\"",
      "  resource_group_name      = \"${azurerm_resource_group.test.name}\"",
      "  location                 = \"${azurerm_resource_group.test.location}\"",
      "  account_tier             = \"Standard\"",
      "  account_replication_type = \"LRS\"",
      "}",
      "",
      "resource \"azurerm_app_service_plan\" \"test\" {",
      "  name                = \"azure-functions-test-service-plan\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  sku {",
      "    tier = \"Standard\"",
      "    size = \"S1\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_function_app\" \"test\" {",
      "  name                      = \"test-azure-functions\"",
      "  location                  = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name       = \"${azurerm_resource_group.test.name}\"",
      "  app_service_plan_id       = \"${azurerm_app_service_plan.test.id}\"",
      "  storage_connection_string = \"${azurerm_storage_account.test.primary_connection_string}\"",
      "}"
    ]
  },
  "azurerm-resource-image": {
    "description": "Defines image",
    "prefix": "tf-azurerm-resource-image",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name = \"acctest\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_image\" \"test\" {",
      "  name = \"acctest\"",
      "  location = \"West US\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  os_disk {",
      "    os_type = \"Linux\"",
      "    os_state = \"Generalized\"",
      "    blob_uri = \"{blob_uri}\"",
      "    size_gb = 30",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-iothub": {
    "description": "Defines iothub",
    "prefix": "tf-azurerm-resource-iothub",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"resourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_iothub\" \"test\" {",
      "  name                = \"test\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  sku {",
      "    name = \"S1\"",
      "    tier = \"Standard\"",
      "    capacity = \"1\"",
      "  }",
      "",
      "  tags {",
      "    \"purpose\" = \"testing\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-key_vault": {
    "description": "Defines key_vault",
    "prefix": "tf-azurerm-resource-key_vault",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"resourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_key_vault\" \"test\" {",
      "  name                = \"testvault\"",
      "  location            = \"West US\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  sku {",
      "    name = \"standard\"",
      "  }",
      "",
      "  tenant_id = \"d6e396d0-5584-41dc-9fc0-268df99bc610\"",
      "",
      "  access_policy {",
      "    tenant_id = \"d6e396d0-5584-41dc-9fc0-268df99bc610\"",
      "    object_id = \"d746815a-0433-4a21-b95d-fc437d2d475b\"",
      "",
      "    key_permissions = [",
      "      \"get\",",
      "    ]",
      "",
      "    secret_permissions = [",
      "      \"get\",",
      "    ]",
      "  }",
      "",
      "  enabled_for_disk_encryption = true",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-key_vault_certificate": {
    "description": "Defines key_vault_certificate",
    "prefix": "tf-azurerm-resource-key_vault_certificate",
    "body": [
      "data \"azurerm_client_config\" \"current\" {}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"key-vault-certificate-example\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_key_vault\" \"test\" {",
      "  name                = \"keyvaultcertexample\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  tenant_id           = \"${data.azurerm_client_config.current.tenant_id}\"",
      "",
      "  sku {",
      "    name = \"standard\"",
      "  }",
      "",
      "  access_policy {",
      "    tenant_id = \"${data.azurerm_client_config.current.tenant_id}\"",
      "    object_id = \"${data.azurerm_client_config.current.service_principal_object_id}\"",
      "",
      "    certificate_permissions = [",
      "      \"create\",\"delete\",\"deleteissuers\",",
      "      \"get\",\"getissuers\",\"import\",\"list\",",
      "      \"listissuers\",\"managecontacts\",\"manageissuers\",",
      "      \"setissuers\",\"update\",",
      "    ]",
      "",
      "    key_permissions = [",
      "      \"backup\",\"create\",\"decrypt\",\"delete\",\"encrypt\",\"get\",",
      "      \"import\",\"list\",\"purge\",\"recover\",\"restore\",\"sign\",",
      "      \"unwrapKey\",\"update\",\"verify\",\"wrapKey\",",
      "    ]",
      "",
      "    secret_permissions = [",
      "      \"backup\",\"delete\",\"get\",\"list\",\"purge\",\"recover\",\"restore\",\"set\",",
      "    ]",
      "  }",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}",
      "",
      "",
      "resource \"azurerm_key_vault_certificate\" \"test\" {",
      "  name      = \"imported-cert\"",
      "  vault_uri = \"${azurerm_key_vault.test.vault_uri}\"",
      "",
      "  certificate {",
      "    contents = \"${base64encode(file(\"certificate-to-import.pfx\"))}\"",
      "    password = \"\"",
      "  }",
      "",
      "  certificate_policy {",
      "    issuer_parameters {",
      "      name = \"Self\"",
      "    }",
      "",
      "    key_properties {",
      "      exportable = true",
      "      key_size   = 2048",
      "      key_type   = \"RSA\"",
      "      reuse_key  = false",
      "    }",
      "",
      "    secret_properties {",
      "      content_type = \"application/x-pkcs12\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-key_vault_key": {
    "description": "Defines key_vault_key",
    "prefix": "tf-azurerm-resource-key_vault_key",
    "body": [
      "data \"azurerm_client_config\" \"current\" {}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"my-resource-group\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"random_id\" \"server\" {",
      "  keepers = {",
      "    ami_id = 1",
      "  }",
      "  byte_length = 8",
      "}",
      "",
      "resource \"azurerm_key_vault\" \"test\" {",
      "  name                = \"${format(\"%s%s\", \"kv\", random_id.server.hex)}\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  tenant_id           = \"${data.azurerm_client_config.current.tenant_id}\"",
      "",
      "  sku {",
      "    name = \"premium\"",
      "  }",
      "",
      "  access_policy {",
      "    tenant_id = \"${data.azurerm_client_config.current.tenant_id}\"",
      "    object_id = \"${data.azurerm_client_config.current.service_principal_object_id}\"",
      "",
      "    key_permissions = [",
      "      \"create\",",
      "      \"get\",",
      "    ]",
      "",
      "    secret_permissions = [",
      "      \"set\",",
      "    ]",
      "  }",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_key_vault_key\" \"generated\" {",
      "  name      = \"generated-certificate\"",
      "  vault_uri = \"${azurerm_key_vault.test.vault_uri}\"",
      "  key_type  = \"RSA\"",
      "  key_size  = 2048",
      "",
      "  key_opts = [",
      "    \"decrypt\",",
      "    \"encrypt\",",
      "    \"sign\",",
      "    \"unwrapKey\",",
      "    \"verify\",",
      "    \"wrapKey\",",
      "  ]",
      "}"
    ]
  },
  "azurerm-resource-key_vault_secret": {
    "description": "Defines key_vault_secret",
    "prefix": "tf-azurerm-resource-key_vault_secret",
    "body": [
      "data \"azurerm_client_config\" \"current\" {}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"my-resource-group\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"random_id\" \"server\" {",
      "  keepers = {",
      "    ami_id = 1",
      "  }",
      "  byte_length = 8",
      "}",
      "",
      "resource \"azurerm_key_vault\" \"test\" {",
      "  name                = \"${format(\"%s%s\", \"kv\", random_id.server.hex)}\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  tenant_id           = \"${data.azurerm_client_config.current.tenant_id}\"",
      "",
      "  sku {",
      "    name = \"premium\"",
      "  }",
      "",
      "  access_policy {",
      "    tenant_id = \"${data.azurerm_client_config.current.tenant_id}\"",
      "    object_id = \"${data.azurerm_client_config.current.service_principal_object_id}\"",
      "",
      "    key_permissions = [",
      "      \"create\",",
      "      \"get\",",
      "    ]",
      "",
      "    secret_permissions = [",
      "      \"set\",",
      "      \"get\",",
      "      \"delete\",",
      "    ]",
      "  }",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_key_vault_secret\" \"test\" {",
      "  name      = \"secret-sauce\"",
      "  value     = \"szechuan\"",
      "  vault_uri = \"${azurerm_key_vault.test.vault_uri}\"",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-kubernetes_cluster": {
    "description": "Defines kubernetes_cluster",
    "prefix": "tf-azurerm-resource-kubernetes_cluster",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acctestRG1\"",
      "  location = \"East US\"",
      "}",
      "",
      "resource \"azurerm_kubernetes_cluster\" \"test\" {",
      "  name                = \"acctestaks1\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  dns_prefix          = \"acctestagent1\"",
      "",
      "  linux_profile {",
      "    admin_username = \"acctestuser1\"",
      "",
      "    ssh_key {",
      "      key_data = \"ssh-rsa ...\"",
      "    }",
      "  }",
      "",
      "  agent_pool_profile {",
      "    name            = \"default\"",
      "    count           = 1",
      "    vm_size         = \"Standard_A0\"",
      "    os_type         = \"Linux\"",
      "    os_disk_size_gb = 30",
      "  }",
      "",
      "  service_principal {",
      "    client_id     = \"00000000-0000-0000-0000-000000000000\"",
      "    client_secret = \"00000000000000000000000000000000\"",
      "  }",
      "",
      "  tags {",
      "    Environment = \"Production\"",
      "  }",
      "}",
      "",
      "output \"id\" {",
      "    value = \"${azurerm_kubernetes_cluster.test.id}\"",
      "}",
      "",
      "output \"kube_config\" {",
      "  value = \"${azurerm_kubernetes_cluster.test.kube_config_raw}\"",
      "}",
      "",
      "output \"client_key\" {",
      "  value = \"${azurerm_kubernetes_cluster.test.kube_config.0.client_key}\"",
      "}",
      "",
      "output \"client_certificate\" {",
      "  value = \"${azurerm_kubernetes_cluster.test.kube_config.0.client_certificate}\"",
      "}",
      "",
      "output \"cluster_ca_certificate\" {",
      "  value = \"${azurerm_kubernetes_cluster.test.kube_config.0.cluster_ca_certificate}\"",
      "}",
      "",
      "output \"host\" {",
      "  value = \"${azurerm_kubernetes_cluster.test.kube_config.0.host}\"",
      "}"
    ]
  },
  "azurerm-resource-loadbalancer": {
    "description": "Defines loadbalancer",
    "prefix": "tf-azurerm-resource-loadbalancer",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"LoadBalancerRG\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_public_ip\" \"test\" {",
      "  name                         = \"PublicIPForLB\"",
      "  location                     = \"West US\"",
      "  resource_group_name          = \"${azurerm_resource_group.test.name}\"",
      "  public_ip_address_allocation = \"static\"",
      "}",
      "",
      "resource \"azurerm_lb\" \"test\" {",
      "  name                = \"TestLoadBalancer\"",
      "  location            = \"West US\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  frontend_ip_configuration {",
      "    name                 = \"PublicIPAddress\"",
      "    public_ip_address_id = \"${azurerm_public_ip.test.id}\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-loadbalancer_backend_address_pool": {
    "description": "Defines loadbalancer_backend_address_pool",
    "prefix": "tf-azurerm-resource-loadbalancer_backend_address_pool",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"LoadBalancerRG\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_public_ip\" \"test\" {",
      "  name                         = \"PublicIPForLB\"",
      "  location                     = \"West US\"",
      "  resource_group_name          = \"${azurerm_resource_group.test.name}\"",
      "  public_ip_address_allocation = \"static\"",
      "}",
      "",
      "resource \"azurerm_lb\" \"test\" {",
      "  name                = \"TestLoadBalancer\"",
      "  location            = \"West US\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  frontend_ip_configuration {",
      "    name                 = \"PublicIPAddress\"",
      "    public_ip_address_id = \"${azurerm_public_ip.test.id}\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_lb_backend_address_pool\" \"test\" {",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  loadbalancer_id     = \"${azurerm_lb.test.id}\"",
      "  name                = \"BackEndAddressPool\"",
      "}"
    ]
  },
  "azurerm-resource-loadbalancer_nat_pool": {
    "description": "Defines loadbalancer_nat_pool",
    "prefix": "tf-azurerm-resource-loadbalancer_nat_pool",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"LoadBalancerRG\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_public_ip\" \"test\" {",
      "  name                         = \"PublicIPForLB\"",
      "  location                     = \"West US\"",
      "  resource_group_name          = \"${azurerm_resource_group.test.name}\"",
      "  public_ip_address_allocation = \"static\"",
      "}",
      "",
      "resource \"azurerm_lb\" \"test\" {",
      "  name                = \"TestLoadBalancer\"",
      "  location            = \"West US\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  frontend_ip_configuration {",
      "    name                 = \"PublicIPAddress\"",
      "    public_ip_address_id = \"${azurerm_public_ip.test.id}\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_lb_nat_pool\" \"test\" {",
      "  resource_group_name            = \"${azurerm_resource_group.test.name}\"",
      "  loadbalancer_id                = \"${azurerm_lb.test.id}\"",
      "  name                           = \"SampleApplicationPool\"",
      "  protocol                       = \"Tcp\"",
      "  frontend_port_start            = 80",
      "  frontend_port_end              = 81",
      "  backend_port                   = 8080",
      "  frontend_ip_configuration_name = \"PublicIPAddress\"",
      "}"
    ]
  },
  "azurerm-resource-loadbalancer_nat_rule": {
    "description": "Defines loadbalancer_nat_rule",
    "prefix": "tf-azurerm-resource-loadbalancer_nat_rule",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"LoadBalancerRG\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_public_ip\" \"test\" {",
      "  name                         = \"PublicIPForLB\"",
      "  location                     = \"West US\"",
      "  resource_group_name          = \"${azurerm_resource_group.test.name}\"",
      "  public_ip_address_allocation = \"static\"",
      "}",
      "",
      "resource \"azurerm_lb\" \"test\" {",
      "  name                = \"TestLoadBalancer\"",
      "  location            = \"West US\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  frontend_ip_configuration {",
      "    name                 = \"PublicIPAddress\"",
      "    public_ip_address_id = \"${azurerm_public_ip.test.id}\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_lb_nat_rule\" \"test\" {",
      "  resource_group_name            = \"${azurerm_resource_group.test.name}\"",
      "  loadbalancer_id                = \"${azurerm_lb.test.id}\"",
      "  name                           = \"RDPAccess\"",
      "  protocol                       = \"Tcp\"",
      "  frontend_port                  = 3389",
      "  backend_port                   = 3389",
      "  frontend_ip_configuration_name = \"PublicIPAddress\"",
      "}"
    ]
  },
  "azurerm-resource-loadbalancer_probe": {
    "description": "Defines loadbalancer_probe",
    "prefix": "tf-azurerm-resource-loadbalancer_probe",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"LoadBalancerRG\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_public_ip\" \"test\" {",
      "  name                         = \"PublicIPForLB\"",
      "  location                     = \"West US\"",
      "  resource_group_name          = \"${azurerm_resource_group.test.name}\"",
      "  public_ip_address_allocation = \"static\"",
      "}",
      "",
      "resource \"azurerm_lb\" \"test\" {",
      "  name                = \"TestLoadBalancer\"",
      "  location            = \"West US\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  frontend_ip_configuration {",
      "    name                 = \"PublicIPAddress\"",
      "    public_ip_address_id = \"${azurerm_public_ip.test.id}\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_lb_probe\" \"test\" {",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  loadbalancer_id     = \"${azurerm_lb.test.id}\"",
      "  name                = \"ssh-running-probe\"",
      "  port                = 22",
      "}"
    ]
  },
  "azurerm-resource-loadbalancer_rule": {
    "description": "Defines loadbalancer_rule",
    "prefix": "tf-azurerm-resource-loadbalancer_rule",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"LoadBalancerRG\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_public_ip\" \"test\" {",
      "  name                         = \"PublicIPForLB\"",
      "  location                     = \"West US\"",
      "  resource_group_name          = \"${azurerm_resource_group.test.name}\"",
      "  public_ip_address_allocation = \"static\"",
      "}",
      "",
      "resource \"azurerm_lb\" \"test\" {",
      "  name                = \"TestLoadBalancer\"",
      "  location            = \"West US\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  frontend_ip_configuration {",
      "    name                 = \"PublicIPAddress\"",
      "    public_ip_address_id = \"${azurerm_public_ip.test.id}\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_lb_rule\" \"test\" {",
      "  resource_group_name            = \"${azurerm_resource_group.test.name}\"",
      "  loadbalancer_id                = \"${azurerm_lb.test.id}\"",
      "  name                           = \"LBRule\"",
      "  protocol                       = \"Tcp\"",
      "  frontend_port                  = 3389",
      "  backend_port                   = 3389",
      "  frontend_ip_configuration_name = \"PublicIPAddress\"",
      "}"
    ]
  },
  "azurerm-resource-local_network_gateway": {
    "description": "Defines local_network_gateway",
    "prefix": "tf-azurerm-resource-local_network_gateway",
    "body": [
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"localNetworkGWTest\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_local_network_gateway\" \"home\" {",
      "  name                = \"backHome\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  gateway_address     = \"12.13.14.15\"",
      "  address_space       = [\"10.0.0.0/16\"]",
      "}"
    ]
  },
  "azurerm-resource-log_analytics_solution": {
    "description": "Defines log_analytics_solution",
    "prefix": "tf-azurerm-resource-log_analytics_solution",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"k8s-log-analytics-test\"",
      "  location = \"westeurope\"",
      "}",
      "",
      "resource \"random_id\" \"workspace\" {",
      "  keepers = {",
      "    # Generate a new id each time we switch to a new resource group",
      "    group_name = \"${azurerm_resource_group.test.name}\"",
      "  }",
      "",
      "  byte_length = 8",
      "}",
      "",
      "resource \"azurerm_log_analytics_workspace\" \"test\" {",
      "  name                = \"k8s-workspace-${random_id.workspace.hex}\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  sku                 = \"Free\"",
      "}",
      "",
      "resource \"azurerm_log_analytics_solution\" \"test\" {",
      "  solution_name         = \"Containers\"",
      "  location              = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name   = \"${azurerm_resource_group.test.name}\"",
      "  workspace_resource_id = \"${azurerm_log_analytics_workspace.test.id}\"",
      "  workspace_name        = \"${azurerm_log_analytics_workspace.test.name}\"",
      "",
      "  plan {",
      "    publisher = \"Microsoft\"",
      "    product   = \"OMSGallery/Containers\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-log_analytics_workspace": {
    "description": "Defines log_analytics_workspace",
    "prefix": "tf-azurerm-resource-log_analytics_workspace",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acctestRG-01\"",
      "  location = \"East US\"",
      "}",
      "",
      "resource \"azurerm_log_analytics_workspace\" \"test\" {",
      "  name                = \"acctest-01\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  sku                 = \"Standard\"",
      "  retention_in_days   = 30",
      "}"
    ]
  },
  "azurerm-resource-managed_disk": {
    "description": "Defines managed_disk",
    "prefix": "tf-azurerm-resource-managed_disk",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name = \"acctestrg\"",
      "  location = \"West US 2\"",
      "}",
      "",
      "resource \"azurerm_managed_disk\" \"test\" {",
      "  name = \"acctestmd\"",
      "  location = \"West US 2\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  storage_account_type = \"Standard_LRS\"",
      "  create_option = \"Empty\"",
      "  disk_size_gb = \"1\"",
      "",
      "  tags {",
      "    environment = \"staging\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-management_lock": {
    "description": "Defines management_lock",
    "prefix": "tf-azurerm-resource-management_lock",
    "body": [
      "data \"azurerm_subscription\" \"current\" {}",
      "",
      "resource \"azurerm_management_lock\" \"subscription-level\" {",
      "  name       = \"subscription-level\"",
      "  scope      = \"${data.azurerm_subscription.current.id}\"",
      "  lock_level = \"CanNotDelete\"",
      "  notes      = \"Items can't be deleted in this subscription!\"",
      "}"
    ]
  },
  "azurerm-resource-metric_alertrule": {
    "description": "Defines metric_alertrule",
    "prefix": "tf-azurerm-resource-metric_alertrule",
    "body": [
      "resource \"azurerm_metric_alertrule\" \"test\" {",
      "  name = \"${azurerm_virtual_machine.test.name}-cpu\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  location = \"${azurerm_resource_group.test.location}\"",
      "",
      "  description = \"An alert rule to watch the metric Percentage CPU\"",
      "",
      "  enabled = true",
      "",
      "  resource_id = \"${azurerm_virtual_machine.test.id}\"",
      "  metric_name = \"Percentage CPU\"",
      "  operator = \"GreaterThan\"",
      "  threshold = 75",
      "  aggregation = \"Average\"",
      "  period = \"PT5M\"",
      "",
      "  email_action {",
      "    send_to_service_owners = false",
      "    custom_emails = [",
      "      \"some.user@example.com\",",
      "    ]",
      "  }",
      "",
      "  webhook_action {",
      "    service_uri = \"https://example.com/some-url\"",
      "      properties = {",
      "        severity = \"incredible\"",
      "        acceptance_test = \"true\"",
      "      }",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-mysql_configuration": {
    "description": "Defines mysql_configuration",
    "prefix": "tf-azurerm-resource-mysql_configuration",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"api-rg-pro\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_mysql_server\" \"test\" {",
      "  name                = \"mysql-server-1\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  sku {",
      "    name = \"MYSQLB50\"",
      "    capacity = 50",
      "    tier = \"Basic\"",
      "  }",
      "",
      "  administrator_login = \"psqladminun\"",
      "  administrator_login_password = \"H@Sh1CoR3!\"",
      "  version = \"5.7\"",
      "  storage_mb = \"51200\"",
      "  ssl_enforcement = \"Enabled\"",
      "}",
      "",
      "resource \"azurerm_mysql_configuration\" \"test\" {",
      "  name                = \"interactive_timeout\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  server_name         = \"${azurerm_mysql_server.test.name}\"",
      "  value               = \"600\"",
      "}"
    ]
  },
  "azurerm-resource-mysql_database": {
    "description": "Defines mysql_database",
    "prefix": "tf-azurerm-resource-mysql_database",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"api-rg-pro\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_mysql_server\" \"test\" {",
      "  name                = \"mysql-server-1\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  sku {",
      "    name = \"MYSQLB50\"",
      "    capacity = 50",
      "    tier = \"Basic\"",
      "  }",
      "",
      "  administrator_login = \"mysqladminun\"",
      "  administrator_login_password = \"H@Sh1CoR3!\"",
      "  version = \"5.7\"",
      "  storage_mb = \"51200\"",
      "  ssl_enforcement = \"Enabled\"",
      "}",
      "",
      "resource \"azurerm_mysql_database\" \"test\" {",
      "  name                = \"exampledb\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  server_name         = \"${azurerm_mysql_server.test.name}\"",
      "  charset             = \"utf8\"",
      "  collation           = \"utf8_unicode_ci\"",
      "}"
    ]
  },
  "azurerm-resource-mysql_firewall_rule": {
    "description": "Defines mysql_firewall_rule",
    "prefix": "tf-azurerm-resource-mysql_firewall_rule",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"api-rg-pro\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_mysql_server\" \"test\" {",
      "  # ...",
      "}",
      "",
      "resource \"azurerm_mysql_firewall_rule\" \"test\" {",
      "  name                = \"office\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  server_name         = \"${azurerm_mysql_server.test.name}\"",
      "  start_ip_address    = \"40.112.8.12\"",
      "  end_ip_address      = \"40.112.8.12\"",
      "}"
    ]
  },
  "azurerm-resource-mysql_server": {
    "description": "Defines mysql_server",
    "prefix": "tf-azurerm-resource-mysql_server",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"api-rg-pro\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_mysql_server\" \"test\" {",
      "  name                = \"mysql-server-1\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  sku {",
      "    name = \"MYSQLB50\"",
      "    capacity = 50",
      "    tier = \"Basic\"",
      "  }",
      "",
      "  administrator_login = \"mysqladminun\"",
      "  administrator_login_password = \"H@Sh1CoR3!\"",
      "  version = \"5.7\"",
      "  storage_mb = \"51200\"",
      "  ssl_enforcement = \"Enabled\"",
      "}"
    ]
  },
  "azurerm-resource-network_interface": {
    "description": "Defines network_interface",
    "prefix": "tf-azurerm-resource-network_interface",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_virtual_network\" \"test\" {",
      "  name                = \"acceptanceTestVirtualNetwork1\"",
      "  address_space       = [\"10.0.0.0/16\"]",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_subnet\" \"test\" {",
      "  name                 = \"testsubnet\"",
      "  resource_group_name  = \"${azurerm_resource_group.test.name}\"",
      "  virtual_network_name = \"${azurerm_virtual_network.test.name}\"",
      "  address_prefix       = \"10.0.2.0/24\"",
      "}",
      "",
      "resource \"azurerm_network_interface\" \"test\" {",
      "  name                = \"acceptanceTestNetworkInterface1\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  ip_configuration {",
      "    name                          = \"testconfiguration1\"",
      "    subnet_id                     = \"${azurerm_subnet.test.id}\"",
      "    private_ip_address_allocation = \"dynamic\"",
      "  }",
      "",
      "  tags {",
      "    environment = \"staging\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-network_security_group": {
    "description": "Defines network_security_group",
    "prefix": "tf-azurerm-resource-network_security_group",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_network_security_group\" \"test\" {",
      "  name                = \"acceptanceTestSecurityGroup1\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  security_rule {",
      "    name                       = \"test123\"",
      "    priority                   = 100",
      "    direction                  = \"Inbound\"",
      "    access                     = \"Allow\"",
      "    protocol                   = \"Tcp\"",
      "    source_port_range          = \"*\"",
      "    destination_port_range     = \"*\"",
      "    source_address_prefix      = \"*\"",
      "    destination_address_prefix = \"*\"",
      "  }",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-network_security_rule": {
    "description": "Defines network_security_rule",
    "prefix": "tf-azurerm-resource-network_security_rule",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_network_security_group\" \"test\" {",
      "  name                = \"acceptanceTestSecurityGroup1\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_network_security_rule\" \"test\" {",
      "  name                        = \"test123\"",
      "  priority                    = 100",
      "  direction                   = \"Outbound\"",
      "  access                      = \"Allow\"",
      "  protocol                    = \"Tcp\"",
      "  source_port_range           = \"*\"",
      "  destination_port_range      = \"*\"",
      "  source_address_prefix       = \"*\"",
      "  destination_address_prefix  = \"*\"",
      "  resource_group_name         = \"${azurerm_resource_group.test.name}\"",
      "  network_security_group_name = \"${azurerm_network_security_group.test.name}\"",
      "}"
    ]
  },
  "azurerm-resource-network_watcher": {
    "description": "Defines network_watcher",
    "prefix": "tf-azurerm-resource-network_watcher",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"production-nwwatcher\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_network_watcher\" \"test\" {",
      "  name                = \"production-nwwatcher\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}"
    ]
  },
  "azurerm-resource-packet_capture": {
    "description": "Defines packet_capture",
    "prefix": "tf-azurerm-resource-packet_capture",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name = \"packet-capture-rg\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_network_watcher\" \"test\" {",
      "  name                = \"network-watcher\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_virtual_network\" \"test\" {",
      "  name = \"production-network\"",
      "  address_space = [\"10.0.0.0/16\"]",
      "  location = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_subnet\" \"test\" {",
      "  name = \"internal\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  virtual_network_name = \"${azurerm_virtual_network.test.name}\"",
      "  address_prefix = \"10.0.2.0/24\"",
      "}",
      "",
      "resource \"azurerm_network_interface\" \"test\" {",
      "  name = \"pctest-nic\"",
      "  location = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  ip_configuration {",
      "    name = \"testconfiguration1\"",
      "    subnet_id = \"${azurerm_subnet.test.id}\"",
      "    private_ip_address_allocation = \"dynamic\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_virtual_machine\" \"test\" {",
      "  name = \"pctest-vm\"",
      "  location = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  network_interface_ids = [\"${azurerm_network_interface.test.id}\"]",
      "  vm_size = \"Standard_F2\"",
      "",
      "  storage_image_reference {",
      "    publisher = \"Canonical\"",
      "    offer = \"UbuntuServer\"",
      "    sku = \"16.04-LTS\"",
      "    version = \"latest\"",
      "  }",
      "",
      "  storage_os_disk {",
      "    name = \"osdisk\"",
      "    caching = \"ReadWrite\"",
      "    create_option = \"FromImage\"",
      "    managed_disk_type = \"Standard_LRS\"",
      "  }",
      "",
      "  os_profile {",
      "    computer_name = \"pctest-vm\"",
      "    admin_username = \"testadmin\"",
      "    admin_password = \"Password1234!\"",
      "  }",
      "",
      "  os_profile_linux_config {",
      "    disable_password_authentication = false",
      "  }",
      "}",
      "",
      "resource \"azurerm_virtual_machine_extension\" \"test\" {",
      "  name                       = \"network-watcher\"",
      "  location                   = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name        = \"${azurerm_resource_group.test.name}\"",
      "  virtual_machine_name       = \"${azurerm_virtual_machine.test.name}\"",
      "  publisher                  = \"Microsoft.Azure.NetworkWatcher\"",
      "  type                       = \"NetworkWatcherAgentLinux\"",
      "  type_handler_version       = \"1.4\"",
      "  auto_upgrade_minor_version = true",
      "}",
      "",
      "",
      "resource \"azurerm_storage_account\" \"test\" {",
      "  name = \"pctestsa\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  location = \"${azurerm_resource_group.test.location}\"",
      "  account_tier = \"Standard\"",
      "  account_replication_type = \"LRS\"",
      "}",
      "",
      "resource \"azurerm_packet_capture\" \"test\" {",
      "  name                 = \"pctestcapture\"",
      "  network_watcher_name = \"${azurerm_network_watcher.test.name}\"",
      "  resource_group_name  = \"${azurerm_resource_group.test.name}\"",
      "  target_resource_id   = \"${azurerm_virtual_machine.test.id}\"",
      "",
      "  storage_location {",
      "    storage_account_id = \"${azurerm_storage_account.test.id}\"",
      "  }",
      "",
      "  depends_on = [\"azurerm_virtual_machine_extension.test\"]",
      "}"
    ]
  },
  "azurerm-resource-policy_assignment": {
    "description": "Defines policy_assignment",
    "prefix": "tf-azurerm-resource-policy_assignment",
    "body": [
      "resource \"azurerm_policy_definition\" \"test\" {",
      "  name         = \"my-policy-definition\"",
      "  policy_type  = \"Custom\"",
      "  mode         = \"All\"",
      "  display_name = \"acctestpol-%d\"",
      "  policy_rule  = <<POLICY_RULE",
      "\t{",
      "    \"if\": {",
      "      \"not\": {",
      "        \"field\": \"location\",",
      "        \"in\": \"[parameters('allowedLocations')]\"",
      "      }",
      "    },",
      "    \"then\": {",
      "      \"effect\": \"audit\"",
      "    }",
      "  }",
      "POLICY_RULE",
      "",
      "  parameters = <<PARAMETERS",
      "\t{",
      "    \"allowedLocations\": {",
      "      \"type\": \"Array\",",
      "      \"metadata\": {",
      "        \"description\": \"The list of allowed locations for resources.\",",
      "        \"displayName\": \"Allowed locations\",",
      "        \"strongType\": \"location\"",
      "      }",
      "    }",
      "  }",
      "PARAMETERS",
      "}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name = \"test-resources\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_policy_assignment\" \"test\" {",
      "  name                 = \"example-policy-assignment\"",
      "  scope                = \"${azurerm_resource_group.test.id}\"",
      "  policy_definition_id = \"${azurerm_policy_definition.test.id}\"",
      "  description          = \"Policy Assignment created via an Acceptance Test\"",
      "  display_name         = \"Acceptance Test Run %d\"",
      "  parameters = <<PARAMETERS",
      "{",
      "  \"allowedLocations\": {",
      "    \"value\": [ \"West Europe\" ]",
      "  }",
      "}",
      "PARAMETERS",
      "}"
    ]
  },
  "azurerm-resource-policy_definition": {
    "description": "Defines policy_definition",
    "prefix": "tf-azurerm-resource-policy_definition",
    "body": [
      "resource \"azurerm_policy_definition\" \"policy\" {",
      "  name         = \"accTestPolicy\"",
      "  policy_type  = \"BuiltIn\"",
      "  mode         = \"Indexed\"",
      "  display_name = \"acceptance test policy definition\"",
      "  policy_rule  = <<POLICY_RULE",
      "\t{",
      "    \"if\": {",
      "      \"not\": {",
      "        \"field\": \"location\",",
      "        \"in\": \"[parameters('allowedLocations')]\"",
      "      }",
      "    },",
      "    \"then\": {",
      "      \"effect\": \"audit\"",
      "    }",
      "  }",
      "POLICY_RULE",
      "",
      "  parameters = <<PARAMETERS",
      "\t{",
      "    \"allowedLocations\": {",
      "      \"type\": \"Array\",",
      "      \"metadata\": {",
      "        \"description\": \"The list of allowed locations for resources.\",",
      "        \"displayName\": \"Allowed locations\",",
      "        \"strongType\": \"location\"",
      "      }",
      "    }",
      "  }",
      "PARAMETERS",
      "",
      "}"
    ]
  },
  "azurerm-resource-postgresql_configuration": {
    "description": "Defines postgresql_configuration",
    "prefix": "tf-azurerm-resource-postgresql_configuration",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"api-rg-pro\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_postgresql_server\" \"test\" {",
      "  name                = \"postgresql-server-1\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  sku {",
      "    name = \"PGSQLB50\"",
      "    capacity = 50",
      "    tier = \"Basic\"",
      "  }",
      "",
      "  administrator_login = \"psqladminun\"",
      "  administrator_login_password = \"H@Sh1CoR3!\"",
      "  version = \"9.5\"",
      "  storage_mb = \"51200\"",
      "  ssl_enforcement = \"Enabled\"",
      "}",
      "",
      "resource \"azurerm_postgresql_configuration\" \"test\" {",
      "  name                = \"backslash_quote\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  server_name         = \"${azurerm_postgresql_server.test.name}\"",
      "  value               = \"on\"",
      "}"
    ]
  },
  "azurerm-resource-postgresql_database": {
    "description": "Defines postgresql_database",
    "prefix": "tf-azurerm-resource-postgresql_database",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"api-rg-pro\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_postgresql_server\" \"test\" {",
      "  name                = \"postgresql-server-1\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  sku {",
      "    name = \"PGSQLB50\"",
      "    capacity = 50",
      "    tier = \"Basic\"",
      "  }",
      "",
      "  administrator_login = \"psqladminun\"",
      "  administrator_login_password = \"H@Sh1CoR3!\"",
      "  version = \"9.5\"",
      "  storage_mb = \"51200\"",
      "  ssl_enforcement = \"Enabled\"",
      "}",
      "",
      "resource \"azurerm_postgresql_database\" \"test\" {",
      "  name                = \"exampledb\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  server_name         = \"${azurerm_postgresql_server.test.name}\"",
      "  charset             = \"UTF8\"",
      "  collation           = \"English_United States.1252\"",
      "}"
    ]
  },
  "azurerm-resource-postgresql_firewall_rule": {
    "description": "Defines postgresql_firewall_rule",
    "prefix": "tf-azurerm-resource-postgresql_firewall_rule",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"api-rg-pro\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_postgresql_server\" \"test\" {",
      "  # ...",
      "}",
      "",
      "resource \"azurerm_postgresql_firewall_rule\" \"test\" {",
      "  name                = \"office\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  server_name         = \"${azurerm_postgresql_server.test.name}\"",
      "  start_ip_address    = \"40.112.8.12\"",
      "  end_ip_address      = \"40.112.8.12\"",
      "}"
    ]
  },
  "azurerm-resource-postgresql_server": {
    "description": "Defines postgresql_server",
    "prefix": "tf-azurerm-resource-postgresql_server",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"api-rg-pro\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_postgresql_server\" \"test\" {",
      "  name                = \"postgresql-server-1\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  sku {",
      "    name = \"PGSQLB50\"",
      "    capacity = 50",
      "    tier = \"Basic\"",
      "  }",
      "",
      "  administrator_login = \"psqladminun\"",
      "  administrator_login_password = \"H@Sh1CoR3!\"",
      "  version = \"9.5\"",
      "  storage_mb = \"51200\"",
      "  ssl_enforcement = \"Enabled\"",
      "}"
    ]
  },
  "azurerm-resource-public_ip": {
    "description": "Defines public_ip",
    "prefix": "tf-azurerm-resource-public_ip",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"resourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_public_ip\" \"test\" {",
      "  name                         = \"acceptanceTestPublicIp1\"",
      "  location                     = \"West US\"",
      "  resource_group_name          = \"${azurerm_resource_group.test.name}\"",
      "  public_ip_address_allocation = \"static\"",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-recovery_services_vault": {
    "description": "Defines recovery_services_vault",
    "prefix": "tf-azurerm-resource-recovery_services_vault",
    "body": [
      "resource \"azurerm_resource_group\" \"rg\" {",
      "  name     = \"tfex-recovery_vault\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_recovery_services_vault\" \"vault\" {",
      "    name                = \"example_recovery_vault\"",
      "    location            = \"${azurerm_resource_group.rg.location}\"",
      "    resource_group_name = \"${azurerm_resource_group.rg.name}\"",
      "    sku                 = \"standard\"",
      "}",
      ""
    ]
  },
  "azurerm-resource-redis_cache": {
    "description": "Defines redis_cache",
    "prefix": "tf-azurerm-resource-redis_cache",
    "body": [
      "resource \"random_id\" \"server\" {",
      "  keepers = {",
      "    azi_id = 1",
      "  }",
      "",
      "  byte_length = 8",
      "}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_redis_cache\" \"test\" {",
      "  name                = \"${random_id.server.hex}\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  capacity            = 0",
      "  family              = \"C\"",
      "  sku_name            = \"Basic\"",
      "  enable_non_ssl_port = false",
      "",
      "  redis_configuration {",
      "    maxclients = 256",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-redis_firewall_rule": {
    "description": "Defines redis_firewall_rule",
    "prefix": "tf-azurerm-resource-redis_firewall_rule",
    "body": [
      "resource \"random_id\" \"server\" {",
      "  keepers = {",
      "    azi_id = 1",
      "  }",
      "",
      "  byte_length = 8",
      "}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"redis-resourcegroup\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_redis_cache\" \"test\" {",
      "  name                = \"redis${random_id.server.hex}\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  capacity            = 1",
      "  family              = \"P\"",
      "  sku_name            = \"Premium\"",
      "  enable_non_ssl_port = false",
      "",
      "  redis_configuration {",
      "    maxclients         = 256",
      "    maxmemory_reserved = 2",
      "    maxmemory_delta    = 2",
      "    maxmemory_policy   = \"allkeys-lru\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_redis_firewall_rule\" \"test\" {",
      "  name                = \"someIPrange\"",
      "  redis_cache_name    = \"${azurerm_redis_cache.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  start_ip            = \"1.2.3.4\"",
      "  end_ip              = \"2.3.4.5\"",
      "}"
    ]
  },
  "azurerm-resource-relay_namespace": {
    "description": "Defines relay_namespace",
    "prefix": "tf-azurerm-resource-relay_namespace",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"example-resources\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_relay_namespace\" \"test\" {",
      "  name                = \"example-relay\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  sku {",
      "    name = \"Standard\"",
      "  }",
      "",
      "  tags {",
      "    source = \"terraform\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-resource_group": {
    "description": "Defines resource_group",
    "prefix": "tf-azurerm-resource-resource_group",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"testResourceGroup1\"",
      "  location = \"West US\"",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-role_assignment": {
    "description": "Defines role_assignment",
    "prefix": "tf-azurerm-resource-role_assignment",
    "body": [
      "data \"azurerm_subscription\" \"primary\" {}",
      "",
      "data \"azurerm_client_config\" \"test\" {}",
      "",
      "resource \"azurerm_role_assignment\" \"test\" {",
      "  scope                = \"${data.azurerm_subscription.primary.id}\"",
      "  role_definition_name = \"Reader\"",
      "  principal_id         = \"${data.azurerm_client_config.test.service_principal_object_id}\"",
      "}"
    ]
  },
  "azurerm-resource-role_definition": {
    "description": "Defines role_definition",
    "prefix": "tf-azurerm-resource-role_definition",
    "body": [
      "data \"azurerm_subscription\" \"primary\" {}",
      "",
      "resource \"azurerm_role_definition\" \"test\" {",
      "  role_definition_id = \"12345678-1234-5678-1234-123456780123\"",
      "  name               = \"my-custom-role\"",
      "  scope              = \"${data.azurerm_subscription.primary.id}\"",
      "  description        = \"This is a custom role created via Terraform\"",
      "",
      "  permissions {",
      "    actions     = [\"*\"]",
      "    not_actions = []",
      "  }",
      "",
      "  assignable_scopes = [",
      "    \"${data.azurerm_subscription.primary.id}\", # /subscriptions/00000000-0000-0000-0000-000000000000",
      "  ]",
      "}"
    ]
  },
  "azurerm-resource-route": {
    "description": "Defines route",
    "prefix": "tf-azurerm-resource-route",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_route_table\" \"test\" {",
      "  name                = \"acceptanceTestRouteTable1\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_route\" \"test\" {",
      "  name                = \"acceptanceTestRoute1\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  route_table_name    = \"${azurerm_route_table.test.name}\"",
      "  address_prefix      = \"10.1.0.0/16\"",
      "  next_hop_type       = \"vnetlocal\"",
      "}"
    ]
  },
  "azurerm-resource-route_table": {
    "description": "Defines route_table",
    "prefix": "tf-azurerm-resource-route_table",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_route_table\" \"test\" {",
      "  name                = \"acceptanceTestSecurityGroup1\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  route {",
      "    name           = \"route1\"",
      "    address_prefix = \"10.1.0.0/16\"",
      "    next_hop_type  = \"vnetlocal\"",
      "  }",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-scheduler_job_collection": {
    "description": "Defines scheduler_job_collection",
    "prefix": "tf-azurerm-resource-scheduler_job_collection",
    "body": [
      "resource \"azurerm_resource_group\" \"rg\" {",
      "  name     = \"tfex-job_collection\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_scheduler_job_collection\" \"jobs\" {",
      "    name                = \"example_job_collection\"",
      "    location            = \"${azurerm_resource_group.rg.location}\"",
      "    resource_group_name = \"${azurerm_resource_group.rg.name}\"",
      "    sku                 = \"free\"",
      "    state               = \"enabled\"",
      "",
      "    quota {",
      "        max_job_count            = 5",
      "        max_recurrence_interval  = 24",
      "        max_recurrence_frequency = \"hour\"",
      "    }",
      "}",
      ""
    ]
  },
  "azurerm-resource-search_service": {
    "description": "Defines search_service",
    "prefix": "tf-azurerm-resource-search_service",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_search_service\" \"test\" {",
      "  name                = \"acceptanceTestSearchService1\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  sku                 = \"standard\"",
      "",
      "  tags {",
      "    environment = \"staging\"",
      "    database    = \"test\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-servicebus_namespace": {
    "description": "Defines servicebus_namespace",
    "prefix": "tf-azurerm-resource-servicebus_namespace",
    "body": [
      "variable \"location\" {",
      "  description = \"Azure datacenter to deploy to.\"",
      "  default = \"West US\"",
      "}",
      "",
      "variable \"servicebus_name\" {",
      "  description = \"Input your unique Azure service bus name\"",
      "}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"terraform-servicebus\"",
      "  location = \"${var.location}\"",
      "}",
      "",
      "resource \"azurerm_servicebus_namespace\" \"test\" {",
      "  name                = \"${var.servicebus_name}\"",
      "  location            = \"${var.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  sku                 = \"basic\"",
      "",
      "  tags {",
      "    source = \"terraform\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-servicebus_queue": {
    "description": "Defines servicebus_queue",
    "prefix": "tf-azurerm-resource-servicebus_queue",
    "body": [
      "variable \"location\" {",
      "  description = \"Azure datacenter to deploy to.\"",
      "  default = \"West US\"",
      "}",
      "",
      "variable \"servicebus_name\" {",
      "  description = \"Input your unique Azure service bus name\"",
      "}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"terraform-servicebus\"",
      "  location = \"${var.location}\"",
      "}",
      "",
      "resource \"azurerm_servicebus_namespace\" \"test\" {",
      "  name                = \"${var.servicebus_name}\"",
      "  location            = \"${var.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  sku                 = \"standard\"",
      "",
      "  tags {",
      "    source = \"terraform\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_servicebus_queue\" \"test\" {",
      "  name                = \"testQueue\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  namespace_name      = \"${azurerm_servicebus_namespace.test.name}\"",
      "",
      "  enable_partitioning = true",
      "}"
    ]
  },
  "azurerm-resource-servicebus_subscription": {
    "description": "Defines servicebus_subscription",
    "prefix": "tf-azurerm-resource-servicebus_subscription",
    "body": [
      "variable \"location\" {",
      "  description = \"Azure datacenter to deploy to.\"",
      "  default = \"West US\"",
      "}",
      "",
      "variable \"servicebus_name\" {",
      "  description = \"Input your unique Azure service bus name\"",
      "}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"terraform-servicebus\"",
      "  location = \"${var.location}\"",
      "}",
      "",
      "resource \"azurerm_servicebus_namespace\" \"test\" {",
      "  name                = \"${var.servicebus_name}\"",
      "  location            = \"${var.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  sku                 = \"standard\"",
      "",
      "  tags {",
      "    source = \"terraform\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_servicebus_topic\" \"test\" {",
      "  name                = \"testTopic\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  namespace_name      = \"${azurerm_servicebus_namespace.test.name}\"",
      "",
      "  enable_partitioning = true",
      "}",
      "",
      "resource \"azurerm_servicebus_subscription\" \"test\" {",
      "  name                = \"testSubscription\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  namespace_name      = \"${azurerm_servicebus_namespace.test.name}\"",
      "  topic_name          = \"${azurerm_servicebus_topic.test.name}\"",
      "  max_delivery_count  = 1",
      "}"
    ]
  },
  "azurerm-resource-servicebus_subscription_rule": {
    "description": "Defines servicebus_subscription_rule",
    "prefix": "tf-azurerm-resource-servicebus_subscription_rule",
    "body": [
      "variable \"location\" {",
      "  description = \"Azure datacenter to deploy to.\"",
      "  default = \"West US\"",
      "}",
      "",
      "variable \"servicebus_name\" {",
      "  description = \"Input your unique Azure service bus name\"",
      "}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"terraform-servicebus\"",
      "  location = \"${var.location}\"",
      "}",
      "",
      "resource \"azurerm_servicebus_namespace\" \"test\" {",
      "  name                = \"${var.servicebus_name}\"",
      "  location            = \"${var.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  sku                 = \"standard\"",
      "",
      "  tags {",
      "    source = \"terraform\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_servicebus_topic\" \"test\" {",
      "  name                = \"testTopic\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  namespace_name      = \"${azurerm_servicebus_namespace.test.name}\"",
      "",
      "  enable_partitioning = true",
      "}",
      "",
      "resource \"azurerm_servicebus_subscription\" \"test\" {",
      "  name                = \"testSubscription\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  namespace_name      = \"${azurerm_servicebus_namespace.test.name}\"",
      "  topic_name          = \"${azurerm_servicebus_topic.test.name}\"",
      "  max_delivery_count  = 1",
      "}",
      "",
      "resource \"azurerm_servicebus_subscription_rule\" \"test\" {",
      "  name                = \"testSubscriptionRule\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  namespace_name      = \"${azurerm_servicebus_namespace.test.name}\"",
      "  topic_name          = \"${azurerm_servicebus_topic.test.name}\"",
      "  subscription_name   = \"${azurerm_servicebus_subscription.test.name}\"",
      "  filter_type         = \"SqlFilter\"",
      "  sql_filter          = \"color = 'red'\"",
      "}"
    ]
  },
  "azurerm-resource-servicebus_topic": {
    "description": "Defines servicebus_topic",
    "prefix": "tf-azurerm-resource-servicebus_topic",
    "body": [
      "variable \"location\" {",
      "  description = \"Azure datacenter to deploy to.\"",
      "  default = \"West US\"",
      "}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"terraform-servicebus\"",
      "  location = \"${var.location}\"",
      "}",
      "",
      "resource \"azurerm_servicebus_namespace\" \"test\" {",
      "  name                = \"${var.servicebus_name}\"",
      "  location            = \"${var.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  sku                 = \"standard\"",
      "",
      "  tags {",
      "    source = \"terraform\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_servicebus_topic\" \"test\" {",
      "  name                = \"testTopic\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  namespace_name      = \"${azurerm_servicebus_namespace.test.name}\"",
      "",
      "  enable_partitioning = true",
      "}"
    ]
  },
  "azurerm-resource-servicebus_topic_authorization_rule": {
    "description": "Defines servicebus_topic_authorization_rule",
    "prefix": "tf-azurerm-resource-servicebus_topic_authorization_rule",
    "body": [
      "variable \"location\" {",
      "  description = \"Azure datacenter to deploy to.\"",
      "  default = \"West US\"",
      "}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"terraform-servicebus\"",
      "  location = \"${var.location}\"",
      "}",
      "",
      "resource \"azurerm_servicebus_namespace\" \"test\" {",
      "  name                = \"${var.servicebus_name}\"",
      "  location            = \"${var.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  sku                 = \"standard\"",
      "",
      "  tags {",
      "    source = \"terraform\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_servicebus_topic\" \"test\" {",
      "  name                = \"testTopic\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  namespace_name      = \"${azurerm_servicebus_namespace.test.name}\"",
      "}",
      "",
      "resource \"azurerm_servicebus_topic_authorization_rule\" \"test\" {",
      "  name                = \"examplerule\"",
      "  namespace_name      = \"${azurerm_servicebus_namespace.test.name}\"",
      "  topic_name          = \"${azurerm_servicebus_topic.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  listen              = true",
      "  send                = false",
      "  manage              = false",
      "}"
    ]
  },
  "azurerm-resource-snapshot": {
    "description": "Defines snapshot",
    "prefix": "tf-azurerm-resource-snapshot",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"snapshot-rg\"",
      "  location = \"West Europe\"",
      "}",
      "",
      "resource \"azurerm_managed_disk\" \"test\" {",
      "  name                 = \"managed-disk\"",
      "  location             = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name  = \"${azurerm_resource_group.test.name}\"",
      "  storage_account_type = \"Standard_LRS\"",
      "  create_option        = \"Empty\"",
      "  disk_size_gb         = \"10\"",
      "}",
      "",
      "resource \"azurerm_snapshot\" \"test\" {",
      "  name                = \"snapshot\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  create_option       = \"Copy\"",
      "  source_uri          = \"${azurerm_managed_disk.test.id}\"",
      "}"
    ]
  },
  "azurerm-resource-sql_active_directory_administrator": {
    "description": "Defines sql_active_directory_administrator",
    "prefix": "tf-azurerm-resource-sql_active_directory_administrator",
    "body": [
      "data \"azurerm_client_config\" \"current\" {}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_sql_server\" \"test\" {",
      "  name = \"mysqlserver\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  location = \"${azurerm_resource_group.test.location}\"",
      "  version = \"12.0\"",
      "  administrator_login = \"4dm1n157r470r\"",
      "  administrator_login_password = \"4-v3ry-53cr37-p455w0rd\"",
      "}",
      "",
      "resource \"azurerm_sql_active_directory_administrator\" \"test\" {",
      "  server_name = \"${azurerm_sql_server.test.name}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  login = \"sqladmin\"",
      "  tenant_id = \"${data.azurerm_client_config.current.tenant_id}\"",
      "  object_id = \"${data.azurerm_client_config.current.service_principal_object_id}\"",
      "}"
    ]
  },
  "azurerm-resource-sql_database": {
    "description": "Defines sql_database",
    "prefix": "tf-azurerm-resource-sql_database",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_sql_server\" \"test\" {",
      "    name = \"mysqlserver\" ",
      "    resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "    location = \"West US\"",
      "    version = \"12.0\"",
      "    administrator_login = \"4dm1n157r470r\"",
      "    administrator_login_password = \"4-v3ry-53cr37-p455w0rd\"",
      "}",
      "",
      "resource \"azurerm_sql_database\" \"test\" {",
      "  name                = \"mysqldatabase\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "    location = \"West US\"",
      "    server_name = \"${azurerm_sql_server.test.name}\"",
      "",
      "  tags {",
      "    environment = \"production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-sql_elasticpool": {
    "description": "Defines sql_elasticpool",
    "prefix": "tf-azurerm-resource-sql_elasticpool",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name = \"my-resource-group\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_sql_server\" \"test\" {",
      "    name = \"my-sql-server\" # NOTE: needs to be globally unique",
      "    resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "    location = \"${azurerm_resource_group.test.location}\"",
      "    version = \"12.0\"",
      "    administrator_login = \"4dm1n157r470r\"",
      "    administrator_login_password = \"4-v3ry-53cr37-p455w0rd\"",
      "}",
      "",
      "resource \"azurerm_sql_elasticpool\" \"test\" {",
      "    name = \"test\"",
      "    resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "    location = \"${azurerm_resource_group.test.location}\"",
      "    server_name = \"${azurerm_sql_server.test.name}\"",
      "    edition = \"Basic\"",
      "    dtu = 50",
      "    db_dtu_min = 0",
      "    db_dtu_max = 5",
      "    pool_size = 5000",
      "}"
    ]
  },
  "azurerm-resource-sql_firewall_rule": {
    "description": "Defines sql_firewall_rule",
    "prefix": "tf-azurerm-resource-sql_firewall_rule",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_sql_server\" \"test\" {",
      "    name = \"mysqlserver\"",
      "    resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "    location = \"West US\"",
      "    version = \"12.0\"",
      "    administrator_login = \"4dm1n157r470r\"",
      "    administrator_login_password = \"4-v3ry-53cr37-p455w0rd\"",
      "}",
      "",
      "resource \"azurerm_sql_firewall_rule\" \"test\" {",
      "  name                = \"FirewallRule1\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  server_name         = \"${azurerm_sql_server.test.name}\"",
      "  start_ip_address    = \"10.0.17.62\"",
      "  end_ip_address      = \"10.0.17.62\"",
      "}"
    ]
  },
  "azurerm-resource-sql_server": {
    "description": "Defines sql_server",
    "prefix": "tf-azurerm-resource-sql_server",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"database-rg\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_sql_server\" \"test\" {",
      "  name                         = \"mysqlserver\"",
      "  resource_group_name          = \"${azurerm_resource_group.test.name}\"",
      "  location                     = \"${azurerm_resource_group.test.location}\"",
      "  version                      = \"12.0\"",
      "  administrator_login          = \"mradministrator\"",
      "  administrator_login_password = \"thisIsDog11\"",
      "",
      "  tags {",
      "    environment = \"production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-sql_virtual_network_rule": {
    "description": "Defines sql_virtual_network_rule",
    "prefix": "tf-azurerm-resource-sql_virtual_network_rule",
    "body": [
      "resource \"azurerm_resource_group\" \"example\" {",
      "  name     = \"example-sql-server-vnet-rule\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_virtual_network\" \"vnet\" {",
      "  name                = \"example-vnet\"",
      "  address_space       = [\"10.7.29.0/29\"]",
      "  location            = \"${azurerm_resource_group.example.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.example.name}\"",
      "}",
      "",
      "resource \"azurerm_subnet\" \"subnet\" {",
      "  name                 = \"example-subnet\"",
      "  resource_group_name  = \"${azurerm_resource_group.example.name}\"",
      "  virtual_network_name = \"${azurerm_virtual_network.vnet.name}\"",
      "  address_prefix       = \"10.7.29.0/29\"",
      "  service_endpoints    = [\"Microsoft.Sql\"]",
      "}",
      "",
      "resource \"azurerm_sql_server\" \"sqlserver\" {",
      "    name                         = \"unqiueazuresqlserver\"",
      "    resource_group_name          = \"${azurerm_resource_group.example.name}\"",
      "    location                     = \"${azurerm_resource_group.example.location}\"",
      "    version                      = \"12.0\"",
      "    administrator_login          = \"4dm1n157r470r\"",
      "    administrator_login_password = \"4-v3ry-53cr37-p455w0rd\"",
      "}",
      "",
      "resource \"azurerm_sql_virtual_network_rule\" \"sqlvnetrule\" {",
      "  name                = \"sql-vnet-rule\"",
      "  resource_group_name = \"${azurerm_resource_group.example.name}\"",
      "  server_name         = \"${azurerm_sql_server.sqlserver.name}\"",
      "  subnet_id           = \"${azurerm_subnet.subnet.id}\"",
      "}"
    ]
  },
  "azurerm-resource-storage_account": {
    "description": "Defines storage_account",
    "prefix": "tf-azurerm-resource-storage_account",
    "body": [
      "resource \"azurerm_resource_group\" \"testrg\" {",
      "  name     = \"resourceGroupName\"",
      "  location = \"westus\"",
      "}",
      "",
      "resource \"azurerm_storage_account\" \"testsa\" {",
      "  name                     = \"storageaccountname\"",
      "  resource_group_name      = \"${azurerm_resource_group.testrg.name}\"",
      "  location                 = \"westus\"",
      "  account_tier             = \"Standard\"",
      "  account_replication_type = \"GRS\"",
      "",
      "  tags {",
      "    environment = \"staging\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-storage_blob": {
    "description": "Defines storage_blob",
    "prefix": "tf-azurerm-resource-storage_blob",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acctestrg-d\"",
      "  location = \"westus\"",
      "}",
      "",
      "resource \"azurerm_storage_account\" \"test\" {",
      "  name                     = \"acctestaccs\"",
      "  resource_group_name      = \"${azurerm_resource_group.test.name}\"",
      "  location                 = \"westus\"",
      "  account_tier             = \"Standard\"",
      "  account_replication_type = \"LRS\"",
      "}",
      "",
      "resource \"azurerm_storage_container\" \"test\" {",
      "  name                  = \"vhds\"",
      "  resource_group_name   = \"${azurerm_resource_group.test.name}\"",
      "  storage_account_name  = \"${azurerm_storage_account.test.name}\"",
      "  container_access_type = \"private\"",
      "}",
      "",
      "resource \"azurerm_storage_blob\" \"testsb\" {",
      "  name = \"sample.vhd\"",
      "",
      "  resource_group_name    = \"${azurerm_resource_group.test.name}\"",
      "  storage_account_name   = \"${azurerm_storage_account.test.name}\"",
      "  storage_container_name = \"${azurerm_storage_container.test.name}\"",
      "",
      "  type = \"page\"",
      "  size = 5120",
      "}"
    ]
  },
  "azurerm-resource-storage_container": {
    "description": "Defines storage_container",
    "prefix": "tf-azurerm-resource-storage_container",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acctestrg\"",
      "  location = \"westus\"",
      "}",
      "",
      "resource \"azurerm_storage_account\" \"test\" {",
      "  name                     = \"accteststorageaccount\"",
      "  resource_group_name      = \"${azurerm_resource_group.test.name}\"",
      "  location                 = \"westus\"",
      "  account_tier             = \"Standard\"",
      "  account_replication_type = \"LRS\"",
      "",
      "  tags {",
      "    environment = \"staging\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_storage_container\" \"test\" {",
      "  name                  = \"vhds\"",
      "  resource_group_name   = \"${azurerm_resource_group.test.name}\"",
      "  storage_account_name  = \"${azurerm_storage_account.test.name}\"",
      "  container_access_type = \"private\"",
      "}"
    ]
  },
  "azurerm-resource-storage_queue": {
    "description": "Defines storage_queue",
    "prefix": "tf-azurerm-resource-storage_queue",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acctestrg-%d\"",
      "  location = \"westus\"",
      "}",
      "",
      "resource \"azurerm_storage_account\" \"test\" {",
      "  name                     = \"acctestacc%s\"",
      "  resource_group_name      = \"${azurerm_resource_group.test.name}\"",
      "  location                 = \"westus\"",
      "  account_tier             = \"Standard\"",
      "  account_replication_type = \"LRS\"",
      "}",
      "",
      "resource \"azurerm_storage_queue\" \"test\" {",
      "  name                 = \"mysamplequeue\"",
      "  resource_group_name  = \"${azurerm_resource_group.test.name}\"",
      "  storage_account_name = \"${azurerm_storage_account.test.name}\"",
      "}"
    ]
  },
  "azurerm-resource-storage_share": {
    "description": "Defines storage_share",
    "prefix": "tf-azurerm-resource-storage_share",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"azuretest\"",
      "  location = \"westus\"",
      "}",
      "",
      "resource \"azurerm_storage_account\" \"test\" {",
      "  name                     = \"azureteststorage\"",
      "  resource_group_name      = \"${azurerm_resource_group.test.name}\"",
      "  location                 = \"westus\"",
      "  account_tier             = \"Standard\"",
      "  account_replication_type = \"LRS\"",
      "}",
      "",
      "resource \"azurerm_storage_share\" \"testshare\" {",
      "  name = \"sharename\"",
      "",
      "  resource_group_name  = \"${azurerm_resource_group.test.name}\"",
      "  storage_account_name = \"${azurerm_storage_account.test.name}\"",
      "",
      "  quota = 50",
      "}"
    ]
  },
  "azurerm-resource-storage_table": {
    "description": "Defines storage_table",
    "prefix": "tf-azurerm-resource-storage_table",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"azuretest\"",
      "  location = \"westus\"",
      "}",
      "",
      "resource \"azurerm_storage_account\" \"test\" {",
      "  name                     = \"azureteststorage1\"",
      "  resource_group_name      = \"${azurerm_resource_group.test.name}\"",
      "  location                 = \"westus\"",
      "  account_tier             = \"Standard\"",
      "  account_replication_type = \"LRS\"",
      "}",
      "",
      "resource \"azurerm_storage_table\" \"test\" {",
      "  name                 = \"mysampletable\"",
      "  resource_group_name  = \"${azurerm_resource_group.test.name}\"",
      "  storage_account_name = \"${azurerm_storage_account.test.name}\"",
      "}"
    ]
  },
  "azurerm-resource-subnet": {
    "description": "Defines subnet",
    "prefix": "tf-azurerm-resource-subnet",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_virtual_network\" \"test\" {",
      "  name                = \"acceptanceTestVirtualNetwork1\"",
      "  address_space       = [\"10.0.0.0/16\"]",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_subnet\" \"test\" {",
      "  name                 = \"testsubnet\"",
      "  resource_group_name  = \"${azurerm_resource_group.test.name}\"",
      "  virtual_network_name = \"${azurerm_virtual_network.test.name}\"",
      "  address_prefix       = \"10.0.1.0/24\"",
      "}"
    ]
  },
  "azurerm-resource-template_deployment": {
    "description": "Defines template_deployment",
    "prefix": "tf-azurerm-resource-template_deployment",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acctestrg-01\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_template_deployment\" \"test\" {",
      "  name                = \"acctesttemplate-01\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  template_body = <<DEPLOY",
      "{",
      "  \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",",
      "  \"contentVersion\": \"1.0.0.0\",",
      "  \"parameters\": {",
      "    \"storageAccountType\": {",
      "      \"type\": \"string\",",
      "      \"defaultValue\": \"Standard_LRS\",",
      "      \"allowedValues\": [",
      "        \"Standard_LRS\",",
      "        \"Standard_GRS\",",
      "        \"Standard_ZRS\"",
      "      ],",
      "      \"metadata\": {",
      "        \"description\": \"Storage Account type\"",
      "      }",
      "    }",
      "  },",
      "  \"variables\": {",
      "    \"location\": \"[resourceGroup().location]\",",
      "    \"storageAccountName\": \"[concat(uniquestring(resourceGroup().id), 'storage')]\",",
      "    \"publicIPAddressName\": \"[concat('myPublicIp', uniquestring(resourceGroup().id))]\",",
      "    \"publicIPAddressType\": \"Dynamic\",",
      "    \"apiVersion\": \"2015-06-15\",",
      "    \"dnsLabelPrefix\": \"terraform-acctest\"",
      "  },",
      "  \"resources\": [",
      "    {",
      "      \"type\": \"Microsoft.Storage/storageAccounts\",",
      "      \"name\": \"[variables('storageAccountName')]\",",
      "      \"apiVersion\": \"[variables('apiVersion')]\",",
      "      \"location\": \"[variables('location')]\",",
      "      \"properties\": {",
      "        \"accountType\": \"[parameters('storageAccountType')]\"",
      "      }",
      "    },",
      "    {",
      "      \"type\": \"Microsoft.Network/publicIPAddresses\",",
      "      \"apiVersion\": \"[variables('apiVersion')]\",",
      "      \"name\": \"[variables('publicIPAddressName')]\",",
      "      \"location\": \"[variables('location')]\",",
      "      \"properties\": {",
      "        \"publicIPAllocationMethod\": \"[variables('publicIPAddressType')]\",",
      "        \"dnsSettings\": {",
      "          \"domainNameLabel\": \"[variables('dnsLabelPrefix')]\"",
      "        }",
      "      }",
      "    }",
      "  ],",
      "  \"outputs\": {",
      "    \"storageAccountName\": {",
      "      \"type\": \"string\",",
      "      \"value\": \"[variables('storageAccountName')]\"",
      "    }",
      "  }",
      "}",
      "DEPLOY",
      "",
      "  # these key-value pairs are passed into the ARM Template's `parameters` block",
      "  parameters {",
      "    \"storageAccountType\" = \"Standard_GRS\"",
      "  }",
      "",
      "  deployment_mode = \"Incremental\"",
      "}",
      "",
      "output \"storageAccountName\" {",
      "  value = \"${azurerm_template_deployment.test.outputs[\"storageAccountName\"]}\"",
      "}"
    ]
  },
  "azurerm-resource-traffic_manager_endpoint": {
    "description": "Defines traffic_manager_endpoint",
    "prefix": "tf-azurerm-resource-traffic_manager_endpoint",
    "body": [
      "resource \"random_id\" \"server\" {",
      "  keepers = {",
      "    azi_id = 1",
      "  }",
      "  byte_length = 8",
      "}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"trafficmanagerendpointTest\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_traffic_manager_profile\" \"test\" {",
      "  name                = \"${random_id.server.hex}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  traffic_routing_method = \"Weighted\"",
      "",
      "  dns_config {",
      "    relative_name = \"${random_id.server.hex}\"",
      "    ttl           = 100",
      "  }",
      "",
      "  monitor_config {",
      "    protocol = \"http\"",
      "    port     = 80",
      "    path     = \"/\"",
      "  }",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_traffic_manager_endpoint\" \"test\" {",
      "  name                = \"${random_id.server.hex}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  profile_name        = \"${azurerm_traffic_manager_profile.test.name}\"",
      "  target              = \"terraform.io\"",
      "  type                = \"externalEndpoints\"",
      "  weight              = 100",
      "}"
    ]
  },
  "azurerm-resource-traffic_manager_profile": {
    "description": "Defines traffic_manager_profile",
    "prefix": "tf-azurerm-resource-traffic_manager_profile",
    "body": [
      "resource \"random_id\" \"server\" {",
      "  keepers = {",
      "    azi_id = 1",
      "  }",
      "  byte_length = 8",
      "}",
      "",
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"trafficmanagerProfile\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_traffic_manager_profile\" \"test\" {",
      "  name                   = \"${random_id.server.hex}\"",
      "  resource_group_name    = \"${azurerm_resource_group.test.name}\"",
      "  traffic_routing_method = \"Weighted\"",
      "",
      "  dns_config {",
      "    relative_name = \"${random_id.server.hex}\"",
      "    ttl           = 100",
      "  }",
      "",
      "  monitor_config {",
      "    protocol = \"http\"",
      "    port     = 80",
      "    path     = \"/\"",
      "  }",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-virtual_machine": {
    "description": "Defines virtual_machine",
    "prefix": "tf-azurerm-resource-virtual_machine",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acctestrg\"",
      "  location = \"West US 2\"",
      "}",
      "",
      "resource \"azurerm_virtual_network\" \"test\" {",
      "  name                = \"acctvn\"",
      "  address_space       = [\"10.0.0.0/16\"]",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_subnet\" \"test\" {",
      "  name                 = \"acctsub\"",
      "  resource_group_name  = \"${azurerm_resource_group.test.name}\"",
      "  virtual_network_name = \"${azurerm_virtual_network.test.name}\"",
      "  address_prefix       = \"10.0.2.0/24\"",
      "}",
      "",
      "resource \"azurerm_network_interface\" \"test\" {",
      "  name                = \"acctni\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  ip_configuration {",
      "    name                          = \"testconfiguration1\"",
      "    subnet_id                     = \"${azurerm_subnet.test.id}\"",
      "    private_ip_address_allocation = \"dynamic\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_managed_disk\" \"test\" {",
      "  name                 = \"datadisk_existing\"",
      "  location             = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name  = \"${azurerm_resource_group.test.name}\"",
      "  storage_account_type = \"Standard_LRS\"",
      "  create_option        = \"Empty\"",
      "  disk_size_gb         = \"1023\"",
      "}",
      "",
      "resource \"azurerm_virtual_machine\" \"test\" {",
      "  name                  = \"acctvm\"",
      "  location              = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name   = \"${azurerm_resource_group.test.name}\"",
      "  network_interface_ids = [\"${azurerm_network_interface.test.id}\"]",
      "  vm_size               = \"Standard_DS1_v2\"",
      "",
      "  # Uncomment this line to delete the OS disk automatically when deleting the VM",
      "  # delete_os_disk_on_termination = true",
      "",
      "  # Uncomment this line to delete the data disks automatically when deleting the VM",
      "  # delete_data_disks_on_termination = true",
      "",
      "  storage_image_reference {",
      "    publisher = \"Canonical\"",
      "    offer     = \"UbuntuServer\"",
      "    sku       = \"16.04-LTS\"",
      "    version   = \"latest\"",
      "  }",
      "",
      "  storage_os_disk {",
      "    name              = \"myosdisk1\"",
      "    caching           = \"ReadWrite\"",
      "    create_option     = \"FromImage\"",
      "    managed_disk_type = \"Standard_LRS\"",
      "  }",
      "",
      "  # Optional data disks",
      "  storage_data_disk {",
      "    name              = \"datadisk_new\"",
      "    managed_disk_type = \"Standard_LRS\"",
      "    create_option     = \"Empty\"",
      "    lun               = 0",
      "    disk_size_gb      = \"1023\"",
      "  }",
      "",
      "  storage_data_disk {",
      "    name            = \"${azurerm_managed_disk.test.name}\"",
      "    managed_disk_id = \"${azurerm_managed_disk.test.id}\"",
      "    create_option   = \"Attach\"",
      "    lun             = 1",
      "    disk_size_gb    = \"${azurerm_managed_disk.test.disk_size_gb}\"",
      "  }",
      "",
      "  os_profile {",
      "    computer_name  = \"hostname\"",
      "    admin_username = \"testadmin\"",
      "    admin_password = \"Password1234!\"",
      "  }",
      "",
      "  os_profile_linux_config {",
      "    disable_password_authentication = false",
      "  }",
      "",
      "  tags {",
      "    environment = \"staging\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-virtual_machine_extension": {
    "description": "Defines virtual_machine_extension",
    "prefix": "tf-azurerm-resource-virtual_machine_extension",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acctestrg\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_virtual_network\" \"test\" {",
      "  name                = \"acctvn\"",
      "  address_space       = [\"10.0.0.0/16\"]",
      "  location            = \"West US\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_subnet\" \"test\" {",
      "  name                 = \"acctsub\"",
      "  resource_group_name  = \"${azurerm_resource_group.test.name}\"",
      "  virtual_network_name = \"${azurerm_virtual_network.test.name}\"",
      "  address_prefix       = \"10.0.2.0/24\"",
      "}",
      "",
      "resource \"azurerm_network_interface\" \"test\" {",
      "  name                = \"acctni\"",
      "  location            = \"West US\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  ip_configuration {",
      "    name                          = \"testconfiguration1\"",
      "    subnet_id                     = \"${azurerm_subnet.test.id}\"",
      "    private_ip_address_allocation = \"dynamic\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_storage_account\" \"test\" {",
      "  name                     = \"accsa\"",
      "  resource_group_name      = \"${azurerm_resource_group.test.name}\"",
      "  location                 = \"westus\"",
      "  account_tier             = \"Standard\"",
      "  account_replication_type = \"LRS\"",
      "",
      "  tags {",
      "    environment = \"staging\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_storage_container\" \"test\" {",
      "  name                  = \"vhds\"",
      "  resource_group_name   = \"${azurerm_resource_group.test.name}\"",
      "  storage_account_name  = \"${azurerm_storage_account.test.name}\"",
      "  container_access_type = \"private\"",
      "}",
      "",
      "resource \"azurerm_virtual_machine\" \"test\" {",
      "  name                  = \"acctvm\"",
      "  location              = \"West US\"",
      "  resource_group_name   = \"${azurerm_resource_group.test.name}\"",
      "  network_interface_ids = [\"${azurerm_network_interface.test.id}\"]",
      "  vm_size               = \"Standard_A0\"",
      "",
      "  storage_image_reference {",
      "    publisher = \"Canonical\"",
      "    offer     = \"UbuntuServer\"",
      "    sku       = \"16.04-LTS\"",
      "    version   = \"latest\"",
      "  }",
      "",
      "  storage_os_disk {",
      "    name          = \"myosdisk1\"",
      "    vhd_uri       = \"${azurerm_storage_account.test.primary_blob_endpoint}${azurerm_storage_container.test.name}/myosdisk1.vhd\"",
      "    caching       = \"ReadWrite\"",
      "    create_option = \"FromImage\"",
      "  }",
      "",
      "  os_profile {",
      "    computer_name  = \"hostname\"",
      "    admin_username = \"testadmin\"",
      "    admin_password = \"Password1234!\"",
      "  }",
      "",
      "  os_profile_linux_config {",
      "    disable_password_authentication = false",
      "  }",
      "",
      "  tags {",
      "    environment = \"staging\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_virtual_machine_extension\" \"test\" {",
      "  name                 = \"hostname\"",
      "  location             = \"West US\"",
      "  resource_group_name  = \"${azurerm_resource_group.test.name}\"",
      "  virtual_machine_name = \"${azurerm_virtual_machine.test.name}\"",
      "  publisher            = \"Microsoft.Azure.Extensions\"",
      "  type                 = \"CustomScript\"",
      "  type_handler_version = \"2.0\"",
      "",
      "  settings = <<SETTINGS",
      "\t{",
      "\t\t\"commandToExecute\": \"hostname && uptime\"",
      "\t}",
      "SETTINGS",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-virtual_machine_scale_set": {
    "description": "Defines virtual_machine_scale_set",
    "prefix": "tf-azurerm-resource-virtual_machine_scale_set",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acctestrg\"",
      "  location = \"West US 2\"",
      "}",
      "",
      "resource \"azurerm_virtual_network\" \"test\" {",
      "  name                = \"acctvn\"",
      "  address_space       = [\"10.0.0.0/16\"]",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_subnet\" \"test\" {",
      "  name                 = \"acctsub\"",
      "  resource_group_name  = \"${azurerm_resource_group.test.name}\"",
      "  virtual_network_name = \"${azurerm_virtual_network.test.name}\"",
      "  address_prefix       = \"10.0.2.0/24\"",
      "}",
      "",
      "resource \"azurerm_public_ip\" \"test\" {",
      "  name                         = \"test\"",
      "  location                     = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name          = \"${azurerm_resource_group.test.name}\"",
      "  public_ip_address_allocation = \"static\"",
      "  domain_name_label            = \"${azurerm_resource_group.test.name}\"",
      "",
      "  tags {",
      "    environment = \"staging\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_lb\" \"test\" {",
      "  name                = \"test\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  frontend_ip_configuration {",
      "    name                 = \"PublicIPAddress\"",
      "    public_ip_address_id = \"${azurerm_public_ip.test.id}\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_lb_backend_address_pool\" \"bpepool\" {",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  loadbalancer_id     = \"${azurerm_lb.test.id}\"",
      "  name                = \"BackEndAddressPool\"",
      "}",
      "",
      "resource \"azurerm_lb_nat_pool\" \"lbnatpool\" {",
      "  count                          = 3",
      "  resource_group_name            = \"${azurerm_resource_group.test.name}\"",
      "  name                           = \"ssh\"",
      "  loadbalancer_id                = \"${azurerm_lb.test.id}\"",
      "  protocol                       = \"Tcp\"",
      "  frontend_port_start            = 50000",
      "  frontend_port_end              = 50119",
      "  backend_port                   = 22",
      "  frontend_ip_configuration_name = \"PublicIPAddress\"",
      "}",
      "",
      "resource \"azurerm_virtual_machine_scale_set\" \"test\" {",
      "  name                = \"mytestscaleset-1\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  upgrade_policy_mode = \"Manual\"",
      "",
      "  sku {",
      "    name     = \"Standard_A0\"",
      "    tier     = \"Standard\"",
      "    capacity = 2",
      "  }",
      "",
      "  storage_profile_image_reference {",
      "    publisher = \"Canonical\"",
      "    offer     = \"UbuntuServer\"",
      "    sku       = \"16.04-LTS\"",
      "    version   = \"latest\"",
      "  }",
      "",
      "  storage_profile_os_disk {",
      "    name              = \"\"",
      "    caching           = \"ReadWrite\"",
      "    create_option     = \"FromImage\"",
      "    managed_disk_type = \"Standard_LRS\"",
      "  }",
      "",
      "  storage_profile_data_disk {",
      "    lun \t\t   = 0",
      "    caching        = \"ReadWrite\"",
      "    create_option  = \"Empty\"",
      "    disk_size_gb   = 10",
      "  }",
      "",
      "  os_profile {",
      "    computer_name_prefix = \"testvm\"",
      "    admin_username       = \"myadmin\"",
      "    admin_password       = \"Passwword1234\"",
      "  }",
      "",
      "  os_profile_linux_config {",
      "    disable_password_authentication = true",
      "",
      "    ssh_keys {",
      "      path     = \"/home/myadmin/.ssh/authorized_keys\"",
      "      key_data = \"${file(\"~/.ssh/demo_key.pub\")}\"",
      "    }",
      "  }",
      "",
      "  network_profile {",
      "    name    = \"terraformnetworkprofile\"",
      "    primary = true",
      "",
      "    ip_configuration {",
      "      name                                   = \"TestIPConfiguration\"",
      "      subnet_id                              = \"${azurerm_subnet.test.id}\"",
      "      load_balancer_backend_address_pool_ids = [\"${azurerm_lb_backend_address_pool.bpepool.id}\"]",
      "      load_balancer_inbound_nat_rules_ids    = [\"${element(azurerm_lb_nat_pool.lbnatpool.*.id, count.index)}\"]",
      "    }",
      "  }",
      "",
      "  tags {",
      "    environment = \"staging\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-virtual_network": {
    "description": "Defines virtual_network",
    "prefix": "tf-azurerm-resource-virtual_network",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"acceptanceTestResourceGroup1\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_network_security_group\" \"test\" {",
      "  name                = \"acceptanceTestSecurityGroup1\"",
      "  location            = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "}",
      "",
      "resource \"azurerm_virtual_network\" \"test\" {",
      "  name                = \"virtualNetwork1\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  address_space       = [\"10.0.0.0/16\"]",
      "  location            = \"West US\"",
      "  dns_servers         = [\"10.0.0.4\", \"10.0.0.5\"]",
      "",
      "  subnet {",
      "    name           = \"subnet1\"",
      "    address_prefix = \"10.0.1.0/24\"",
      "  }",
      "",
      "  subnet {",
      "    name           = \"subnet2\"",
      "    address_prefix = \"10.0.2.0/24\"",
      "  }",
      "",
      "  subnet {",
      "    name           = \"subnet3\"",
      "    address_prefix = \"10.0.3.0/24\"",
      "    security_group = \"${azurerm_network_security_group.test.id}\"",
      "  }",
      "",
      "  tags {",
      "    environment = \"Production\"",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-virtual_network_gateway": {
    "description": "Defines virtual_network_gateway",
    "prefix": "tf-azurerm-resource-virtual_network_gateway",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name = \"test\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_virtual_network\" \"test\" {",
      "  name = \"test\"",
      "  location = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  address_space = [\"10.0.0.0/16\"]",
      "}",
      "",
      "resource \"azurerm_subnet\" \"test\" {",
      "  name = \"GatewaySubnet\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  virtual_network_name = \"${azurerm_virtual_network.test.name}\"",
      "  address_prefix = \"10.0.1.0/24\"",
      "}",
      "",
      "resource \"azurerm_public_ip\" \"test\" {",
      "  name = \"test\"",
      "  location = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  public_ip_address_allocation = \"Dynamic\"",
      "}",
      "",
      "resource \"azurerm_virtual_network_gateway\" \"test\" {",
      "  name = \"test\"",
      "  location = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  type = \"Vpn\"",
      "  vpn_type = \"RouteBased\"",
      "",
      "  active_active = false",
      "  enable_bgp = false",
      "\tsku = \"Basic\"",
      "",
      "  ip_configuration {",
      "    name = \"vnetGatewayConfig\"",
      "    public_ip_address_id = \"${azurerm_public_ip.test.id}\"",
      "    private_ip_address_allocation = \"Dynamic\"",
      "    subnet_id = \"${azurerm_subnet.test.id}\"",
      "  }",
      "",
      "  vpn_client_configuration {",
      "    address_space = [ \"10.2.0.0/24\" ]",
      "",
      "    root_certificate {",
      "      name = \"DigiCert-Federated-ID-Root-CA\"",
      "      public_cert_data = <<EOF",
      "MIIDuzCCAqOgAwIBAgIQCHTZWCM+IlfFIRXIvyKSrjANBgkqhkiG9w0BAQsFADBn",
      "MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3",
      "d3cuZGlnaWNlcnQuY29tMSYwJAYDVQQDEx1EaWdpQ2VydCBGZWRlcmF0ZWQgSUQg",
      "Um9vdCBDQTAeFw0xMzAxMTUxMjAwMDBaFw0zMzAxMTUxMjAwMDBaMGcxCzAJBgNV",
      "BAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdp",
      "Y2VydC5jb20xJjAkBgNVBAMTHURpZ2lDZXJ0IEZlZGVyYXRlZCBJRCBSb290IENB",
      "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvAEB4pcCqnNNOWE6Ur5j",
      "QPUH+1y1F9KdHTRSza6k5iDlXq1kGS1qAkuKtw9JsiNRrjltmFnzMZRBbX8Tlfl8",
      "zAhBmb6dDduDGED01kBsTkgywYPxXVTKec0WxYEEF0oMn4wSYNl0lt2eJAKHXjNf",
      "GTwiibdP8CUR2ghSM2sUTI8Nt1Omfc4SMHhGhYD64uJMbX98THQ/4LMGuYegou+d",
      "GTiahfHtjn7AboSEknwAMJHCh5RlYZZ6B1O4QbKJ+34Q0eKgnI3X6Vc9u0zf6DH8",
      "Dk+4zQDYRRTqTnVO3VT8jzqDlCRuNtq6YvryOWN74/dq8LQhUnXHvFyrsdMaE1X2",
      "DwIDAQABo2MwYTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBhjAdBgNV",
      "HQ4EFgQUGRdkFnbGt1EWjKwbUne+5OaZvRYwHwYDVR0jBBgwFoAUGRdkFnbGt1EW",
      "jKwbUne+5OaZvRYwDQYJKoZIhvcNAQELBQADggEBAHcqsHkrjpESqfuVTRiptJfP",
      "9JbdtWqRTmOf6uJi2c8YVqI6XlKXsD8C1dUUaaHKLUJzvKiazibVuBwMIT84AyqR",
      "QELn3e0BtgEymEygMU569b01ZPxoFSnNXc7qDZBDef8WfqAV/sxkTi8L9BkmFYfL",
      "uGLOhRJOFprPdoDIUBB+tmCl3oDcBy3vnUeOEioz8zAkprcb3GHwHAK+vHmmfgcn",
      "WsfMLH4JCLa/tRYL+Rw/N3ybCkDp00s0WUZ+AoDywSl0Q/ZEnNY0MsFiw6LyIdbq",
      "M/s/1JRtO3bDSzD9TazRVzn2oBqzSa8VgIo5C1nOnoAKJTlsClJKvIhnRlaLQqk=",
      "EOF",
      "    }",
      "",
      "    revoked_certificate {",
      "      name = \"Verizon-Global-Root-CA\"",
      "      thumbprint = \"912198EEF23DCAC40939312FEE97DD560BAE49B1\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "azurerm-resource-virtual_network_gateway_connection": {
    "description": "Defines virtual_network_gateway_connection",
    "prefix": "tf-azurerm-resource-virtual_network_gateway_connection",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name = \"test\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_virtual_network\" \"test\" {",
      "  name = \"test\"",
      "  location = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  address_space = [\"10.0.0.0/16\"]",
      "}",
      "",
      "resource \"azurerm_subnet\" \"test\" {",
      "  name = \"GatewaySubnet\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  virtual_network_name = \"${azurerm_virtual_network.test.name}\"",
      "  address_prefix = \"10.0.1.0/24\"",
      "}",
      "",
      "resource \"azurerm_local_network_gateway\" \"onpremise\" {",
      "  name = \"onpremise\"",
      "  location = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  gateway_address = \"168.62.225.23\"",
      "  address_space = [\"10.1.1.0/24\"]",
      "}",
      "",
      "resource \"azurerm_public_ip\" \"test\" {",
      "  name = \"test\"",
      "  location = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  public_ip_address_allocation = \"Dynamic\"",
      "}",
      "",
      "resource \"azurerm_virtual_network_gateway\" \"test\" {",
      "  name = \"test\"",
      "  location = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  type = \"Vpn\"",
      "  vpn_type = \"RouteBased\"",
      "",
      "  active_active = false",
      "  enable_bgp = false",
      "\tsku = \"Basic\"",
      "",
      "  ip_configuration {",
      "    public_ip_address_id = \"${azurerm_public_ip.test.id}\"",
      "    private_ip_address_allocation = \"Dynamic\"",
      "    subnet_id = \"${azurerm_subnet.test.id}\"",
      "  }",
      "}",
      "",
      "resource \"azurerm_virtual_network_gateway_connection\" \"onpremise\" {",
      "  name = \"onpremise\"",
      "  location = \"${azurerm_resource_group.test.location}\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "",
      "  type = \"IPsec\"",
      "  virtual_network_gateway_id = \"${azurerm_virtual_network_gateway.test.id}\"",
      "  local_network_gateway_id = \"${azurerm_local_network_gateway.onpremise.id}\"",
      "",
      "  shared_key = \"4-v3ry-53cr37-1p53c-5h4r3d-k3y\"",
      "}"
    ]
  },
  "azurerm-resource-virtual_network_peering": {
    "description": "Defines virtual_network_peering",
    "prefix": "tf-azurerm-resource-virtual_network_peering",
    "body": [
      "resource \"azurerm_resource_group\" \"test\" {",
      "  name     = \"peeredvnets-rg\"",
      "  location = \"West US\"",
      "}",
      "",
      "resource \"azurerm_virtual_network\" \"test1\" {",
      "  name                = \"peternetwork1\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  address_space       = [\"10.0.1.0/24\"]",
      "  location            = \"West US\"",
      "}",
      "",
      "resource \"azurerm_virtual_network\" \"test2\" {",
      "  name                = \"peternetwork2\"",
      "  resource_group_name = \"${azurerm_resource_group.test.name}\"",
      "  address_space       = [\"10.0.2.0/24\"]",
      "  location            = \"West US\"",
      "}",
      "",
      "resource \"azurerm_virtual_network_peering\" \"test1\" {",
      "  name                      = \"peer1to2\"",
      "  resource_group_name       = \"${azurerm_resource_group.test.name}\"",
      "  virtual_network_name      = \"${azurerm_virtual_network.test1.name}\"",
      "  remote_virtual_network_id = \"${azurerm_virtual_network.test2.id}\"",
      "}",
      "",
      "resource \"azurerm_virtual_network_peering\" \"test2\" {",
      "  name                      = \"peer2to1\"",
      "  resource_group_name       = \"${azurerm_resource_group.test.name}\"",
      "  virtual_network_name      = \"${azurerm_virtual_network.test2.name}\"",
      "  remote_virtual_network_id = \"${azurerm_virtual_network.test1.id}\"",
      "}"
    ]
  },
  "bitbucket-resource-default_reviewers": {
    "description": "Defines default_reviewers",
    "prefix": "tf-bitbucket-resource-default_reviewers",
    "body": [
      "# Manage your repository",
      "resource \"bitbucket_default_reviewers\" \"infrastructure\" {",
      "  owner      = \"myteam\"",
      "  repository = \"terraform-code\"",
      "",
      "  reviewers = [",
      "    \"gob\",",
      "    \"michael\",",
      "    \"michalejr\",",
      "  ]",
      "}"
    ]
  },
  "bitbucket-resource-hook": {
    "description": "Defines hook",
    "prefix": "tf-bitbucket-resource-hook",
    "body": [
      "# Manage your repositories hooks",
      "resource \"bitbucket_hook\" \"deploy_on_push\" {",
      "  owner       = \"myteam\"",
      "  repository  = \"terraform-code\"",
      "  url         = \"https://mywebhookservice.mycompany.com/deploy-on-push\"",
      "  description = \"Deploy the code via my webhook\"",
      "",
      "  events = [",
      "    \"repo:push\",",
      "  ]",
      "}"
    ]
  },
  "bitbucket-resource-repository": {
    "description": "Defines repository",
    "prefix": "tf-bitbucket-resource-repository",
    "body": [
      "# Manage your repository",
      "resource \"bitbucket_repository\" \"infrastructure\" {",
      "  owner = \"myteam\"",
      "  name  = \"terraform-code\"",
      "}"
    ]
  },
  "chef-resource-data_bag": {
    "description": "Defines data_bag",
    "prefix": "tf-chef-resource-data_bag",
    "body": [
      "resource \"chef_data_bag\" \"example\" {",
      "  name = \"example-data-bag\"",
      "}"
    ]
  },
  "chef-resource-data_bag_item": {
    "description": "Defines data_bag_item",
    "prefix": "tf-chef-resource-data_bag_item",
    "body": [
      "resource \"chef_data_bag_item\" \"example\" {",
      "  data_bag_name = \"example-data-bag\"",
      "",
      "  content_json = <<EOT",
      "{",
      "    \"id\": \"example-item\",",
      "    \"any_arbitrary_data\": true",
      "}",
      "EOT",
      "}"
    ]
  },
  "chef-resource-environment": {
    "description": "Defines environment",
    "prefix": "tf-chef-resource-environment",
    "body": [
      "resource \"chef_environment\" \"example\" {",
      "  name = \"example-environment\"",
      "}"
    ]
  },
  "chef-resource-node": {
    "description": "Defines node",
    "prefix": "tf-chef-resource-node",
    "body": [
      "resource \"chef_node\" \"example\" {",
      "  name             = \"example-environment\"",
      "  environment_name = \"${chef_environment.example.name}\"",
      "  run_list         = [\"recipe[example]\", \"role[app_server]\"]",
      "}"
    ]
  },
  "chef-resource-role": {
    "description": "Defines role",
    "prefix": "tf-chef-resource-role",
    "body": [
      "resource \"chef_role\" \"example\" {",
      "  name     = \"example-role\"",
      "  run_list = [\"recipe[example]\"]",
      "}"
    ]
  },
  "circonus-data-account": {
    "description": "Defines account",
    "prefix": "tf-circonus-data-account",
    "body": [
      "data \"circonus_account\" \"current\" {",
      "  current = true",
      "}"
    ]
  },
  "circonus-data-collector": {
    "description": "Defines collector",
    "prefix": "tf-circonus-data-collector",
    "body": [
      "data \"circonus_collector\" \"ashburn\" {",
      "  id = \"/broker/1\"",
      "}"
    ]
  },
  "circonus-resource-check": {
    "description": "Defines check",
    "prefix": "tf-circonus-resource-check",
    "body": [
      "variable api_token {",
      "  default = \"my-token\"",
      "}",
      "",
      "resource \"circonus_check\" \"usage\" {",
      "  name = \"Circonus Usage Check\"",
      "",
      "  notes = <<-EOF",
      "A check to extract a usage metric.",
      "EOF",
      "",
      "  collector {",
      "    id = \"/broker/1\"",
      "  }",
      "",
      "  metric {",
      "    name = \"${circonus_metric.used.name}\"",
      "    tags = \"${circonus_metric.used.tags}\"",
      "    type = \"${circonus_metric.used.type}\"",
      "    unit = \"${circonus_metric.used.unit}\"",
      "  }",
      "",
      "  json {",
      "    url = \"https://api.circonus.com/v2\"",
      "",
      "    headers = {",
      "      Accept                = \"application/json\"",
      "      X-Circonus-App-Name   = \"TerraformCheck\"",
      "      X-Circonus-Auth-Token = \"${var.api_token}\"",
      "    }",
      "  }",
      "",
      "  period       = 60",
      "  tags         = [\"source:circonus\", \"author:terraform\"]",
      "  timeout      = 10",
      "}",
      "",
      "resource \"circonus_metric\" \"used\" {",
      "  name = \"_usage`0`_used\"",
      "  type = \"numeric\"",
      "  unit = \"qty\"",
      "",
      "  tags = {",
      "    source = \"circonus\"",
      "  }",
      "}"
    ]
  },
  "circonus-resource-contact_group": {
    "description": "Defines contact_group",
    "prefix": "tf-circonus-resource-contact_group",
    "body": [
      "resource \"circonus_contact_group\" \"myteam-alerts\" {",
      "  name = \"MyTeam Alerts\"",
      "",
      "  email {",
      "    user = \"/user/1234\"",
      "  }",
      "",
      "  email {",
      "    user = \"/user/5678\"",
      "  }",
      "",
      "  email {",
      "    address = \"user@example.com\"",
      "  }",
      "",
      "  http {",
      "    address = \"https://www.example.org/post/endpoint\"",
      "    format = \"json\"",
      "    method = \"POST\"",
      "  }",
      "",
      "  irc {",
      "    user = \"/user/6331\"",
      "  }",
      "",
      "  slack {",
      "    channel = \"#myteam\"",
      "    team = \"T038UT13D\"",
      "  }",
      "",
      "  sms {",
      "    user = \"/user/1234\"",
      "  }",
      "",
      "  sms {",
      "    address = \"8005551212\"",
      "  }",
      "",
      "  victorops {",
      "    api_key = \"xxxx\"",
      "    critical = 2",
      "    info = 5",
      "    team = \"myteam\"",
      "    warning = 3",
      "  }",
      "",
      "  xmpp {",
      "    user = \"/user/9876\"",
      "  }",
      "",
      "  aggregation_window = \"5m\"",
      "",
      "  alert_option {",
      "    severity = 1",
      "    reminder = \"5m\"",
      "    escalate_to = \"/contact_group/4444\"",
      "  }",
      "",
      "  alert_option {",
      "    severity = 2",
      "    reminder = \"15m\"",
      "    escalate_after = \"2h\"",
      "    escalate_to = \"/contact_group/4444\"",
      "  }",
      "",
      "  alert_option {",
      "    severity = 3",
      "    reminder = \"24m\"",
      "    escalate_after = \"3d\"",
      "    escalate_to = \"/contact_group/4444\"",
      "  }",
      "}"
    ]
  },
  "circonus-resource-graph": {
    "description": "Defines graph",
    "prefix": "tf-circonus-resource-graph",
    "body": [
      "variable \"myapp-tags\" {",
      "  type    = \"list\"",
      "  default = [ \"app:myapp\", \"owner:myteam\" ]",
      "}",
      "",
      "resource \"circonus_graph\" \"latency-graph\" {",
      "  name        = \"Latency Graph\"",
      "  description = \"A sample graph showing off two data points\"",
      "  notes       = \"Misc notes about this graph\"",
      "  graph_style = \"line\"",
      "  line_style  = \"stepped\"",
      "",
      "  metric {",
      "    check       = \"${circonus_check.api_latency.checks[0]}\"",
      "    metric_name = \"maximum\"",
      "    metric_type = \"numeric\"",
      "    name        = \"Maximum Latency\"",
      "    axis        = \"left\"",
      "    color       = \"#657aa6\"",
      "  }",
      "",
      "  metric {",
      "    check       = \"${circonus_check.api_latency.checks[0]}\"",
      "    metric_name = \"minimum\"",
      "    metric_type = \"numeric\"",
      "    name        = \"Minimum Latency\"",
      "    axis        = \"right\"",
      "    color       = \"#0000ff\"",
      "  }",
      "",
      "  tags = [ \"${var.myapp-tags}\" ]",
      "}"
    ]
  },
  "circonus-resource-metric": {
    "description": "Defines metric",
    "prefix": "tf-circonus-resource-metric",
    "body": [
      "resource \"circonus_metric\" \"used\" {",
      "  name  = \"_usage`0`_used\"",
      "  type  = \"numeric\"",
      "  units = \"qty\"",
      "",
      "  tags = {",
      "    author = \"terraform\"",
      "    source = \"circonus\"",
      "  }",
      "}"
    ]
  },
  "circonus-resource-metric_cluster": {
    "description": "Defines metric_cluster",
    "prefix": "tf-circonus-resource-metric_cluster",
    "body": [
      "resource \"circonus_metric_cluster\" \"nomad-job-memory-rss\" {",
      "  name = \"My Job's Resident Memory\"",
      "  description = <<-EOF",
      "An aggregation of all resident memory metric streams across allocations in a Nomad job.",
      "EOF",
      "",
      "  query {",
      "    definition = \"*`nomad-jobname`memory`rss\"",
      "    type       = \"average\"",
      "  }",
      "  tags = [\"source:nomad\",\"resource:memory\"]",
      "}"
    ]
  },
  "circonus-resource-rule_set": {
    "description": "Defines rule_set",
    "prefix": "tf-circonus-resource-rule_set",
    "body": [
      "variable \"myapp-tags\" {",
      "  type    = \"list\"",
      "  default = [ \"app:myapp\", \"owner:myteam\" ]",
      "}",
      "",
      "resource \"circonus_rule_set\" \"myapp-cert-ttl-alert\" {",
      "  check       = \"${circonus_check.myapp-https.checks[0]}\"",
      "  metric_name = \"cert_end_in\"",
      "  link        = \"https://wiki.example.org/playbook/how-to-renew-cert\"",
      "",
      "  if {",
      "    value {",
      "      min_value = \"${2 * 24 * 3600}\"",
      "    }",
      "",
      "    then {",
      "      notify = [ \"${circonus_contact_group.myapp-owners.id}\" ]",
      "      severity = 1",
      "    }",
      "  }",
      "",
      "  if {",
      "    value {",
      "      min_value = \"${7 * 24 * 3600}\"",
      "    }",
      "",
      "    then {",
      "      notify = [ \"${circonus_contact_group.myapp-owners.id}\" ]",
      "      severity = 2",
      "    }",
      "  }",
      "",
      "  if {",
      "    value {",
      "      min_value = \"${21 * 24 * 3600}\"",
      "    }",
      "",
      "    then {",
      "      notify = [ \"${circonus_contact_group.myapp-owners.id}\" ]",
      "      severity = 3",
      "    }",
      "  }",
      "",
      "  if {",
      "    value {",
      "      absent = \"24h\"",
      "    }",
      "",
      "    then {",
      "      notify = [ \"${circonus_contact_group.myapp-owners.id}\" ]",
      "      severity = 1",
      "    }",
      "  }",
      "",
      "  tags = [ \"${var.myapp-tags}\" ]",
      "}",
      "",
      "resource \"circonus_rule_set\" \"myapp-healthy-alert\" {",
      "  check = \"${circonus_check.myapp-https.checks[0]}\"",
      "  metric_name = \"duration\"",
      "  link = \"https://wiki.example.org/playbook/debug-down-app\"",
      "",
      "  if {",
      "    value {",
      "      # SEV1 if it takes more than 9.5s for us to complete an HTTP request",
      "      max_value = \"${9.5 * 1000}\"",
      "    }",
      "",
      "    then {",
      "      notify = [ \"${circonus_contact_group.myapp-owners.id}\" ]",
      "      severity = 1",
      "    }",
      "  }",
      "",
      "  if {",
      "    value {",
      "      # SEV2 if it takes more than 5s for us to complete an HTTP request",
      "      max_value = \"${5 * 1000}\"",
      "    }",
      "",
      "    then {",
      "      notify = [ \"${circonus_contact_group.myapp-owners.id}\" ]",
      "      severity = 2",
      "    }",
      "  }",
      "",
      "  if {",
      "    value {",
      "      # SEV3 if the average response time is more than 500ms using a moving",
      "      # average over the last 10min.  Any transient problems should have",
      "      # resolved themselves by now.  Something's wrong, need to page someone.",
      "      over {",
      "        last  = \"10m\"",
      "        using = \"average\"",
      "      }",
      "      max_value = \"500\"",
      "    }",
      "",
      "    then {",
      "      notify = [ \"${circonus_contact_group.myapp-owners.id}\" ]",
      "      severity = 3",
      "    }",
      "  }",
      "",
      "  if {",
      "    value {",
      "      # SEV4 if it takes more than 500ms for us to complete an HTTP request.  We",
      "      # want to record that things were slow, but not wake anyone up if it",
      "      # momentarily pops above 500ms.",
      "      min_value = \"500\"",
      "    }",
      "",
      "    then {",
      "      notify   = [ \"${circonus_contact_group.myapp-owners.id}\" ]",
      "      severity = 3",
      "    }",
      "  }",
      "",
      "  if {",
      "    value {",
      "      # If for whatever reason we're not recording any values for the last",
      "      # 24hrs, fire off a SEV1.",
      "      absent = \"24h\"",
      "    }",
      "",
      "    then {",
      "      notify = [ \"${circonus_contact_group.myapp-owners.id}\" ]",
      "      severity = 1",
      "    }",
      "  }",
      "",
      "  tags = [ \"${var.myapp-tags}\" ]",
      "}",
      "",
      "resource \"circonus_contact_group\" \"myapp-owners\" {",
      "  name = \"My App Owners\"",
      "  tags = [ \"${var.myapp-tags}\" ]",
      "}",
      "",
      "resource \"circonus_check\" \"myapp-https\" {",
      "  name = \"My App's HTTPS Check\"",
      "",
      "  notes = <<-EOF",
      "A check to create metric streams for Time to First Byte, HTTP transaction",
      "duration, and the TTL of a TLS cert.",
      "EOF",
      "",
      "  collector {",
      "    id = \"/broker/1\"",
      "  }",
      "",
      "  http {",
      "    code = \"^200$\"",
      "    headers = {",
      "      X-Request-Type = \"health-check\",",
      "    }",
      "    url = \"https://www.example.com/myapp/healthz\"",
      "  }",
      "",
      "  metric {",
      "    name = \"${circonus_metric.myapp-cert-ttl.name}\"",
      "    tags = \"${circonus_metric.myapp-cert-ttl.tags}\"",
      "    type = \"${circonus_metric.myapp-cert-ttl.type}\"",
      "    unit = \"${circonus_metric.myapp-cert-ttl.unit}\"",
      "  }",
      "",
      "  metric {",
      "    name = \"${circonus_metric.myapp-duration.name}\"",
      "    tags = \"${circonus_metric.myapp-duration.tags}\"",
      "    type = \"${circonus_metric.myapp-duration.type}\"",
      "    unit = \"${circonus_metric.myapp-duration.unit}\"",
      "  }",
      "",
      "  period       = 60",
      "  tags         = [\"source:circonus\", \"author:terraform\"]",
      "  timeout      = 10",
      "}",
      "",
      "resource \"circonus_metric\" \"myapp-cert-ttl\" {",
      "  name = \"cert_end_in\"",
      "  type = \"numeric\"",
      "  unit = \"seconds\"",
      "  tags = [ \"${var.myapp-tags}\", \"resource:tls\" ]",
      "}",
      "",
      "resource \"circonus_metric\" \"myapp-duration\" {",
      "  name = \"duration\"",
      "  type = \"numeric\"",
      "  unit = \"miliseconds\"",
      "  tags = [ \"${var.myapp-tags}\" ]",
      "}"
    ]
  },
  "clc-resource-group": {
    "description": "Defines group",
    "prefix": "tf-clc-resource-group",
    "body": [
      "# Provision/Resolve a server group",
      "resource \"clc_group\" \"frontends\" {",
      "  location_id = \"WA1\"",
      "  name        = \"frontends\"",
      "  parent      = \"Default Group\"",
      "}",
      "",
      "output \"group_id\" {",
      "  value = \"clc_group.frontends.id\"",
      "}"
    ]
  },
  "clc-resource-load_balancer": {
    "description": "Defines load_balancer",
    "prefix": "tf-clc-resource-load_balancer",
    "body": [
      "# Provision a load balancer",
      "resource \"clc_load_balancer\" \"api\" {",
      "  data_center = \"${clc_group.frontends.location_id}\"",
      "  name        = \"api\"",
      "  description = \"api load balancer\"",
      "  status      = \"enabled\"",
      "}",
      "",
      "output \"api_ip\" {",
      "  value = \"clc_load_balancer.api.ip_address\"",
      "}"
    ]
  },
  "clc-resource-load_balancer_pool": {
    "description": "Defines load_balancer_pool",
    "prefix": "tf-clc-resource-load_balancer_pool",
    "body": [
      "# Provision a load balancer pool",
      "resource \"clc_load_balancer_pool\" \"pool\" {",
      "  data_center   = \"${clc_group.frontends.location_id}\"",
      "  load_balancer = \"${clc_load_balancer.api.id}\"",
      "  method        = \"roundRobin\"",
      "  persistence   = \"standard\"",
      "  port          = 80",
      "",
      "  nodes {",
      "    status      = \"enabled\"",
      "    ipAddress   = \"${clc_server.node.0.private_ip_address}\"",
      "    privatePort = 3000",
      "  }",
      "",
      "  nodes {",
      "    status      = \"enabled\"",
      "    ipAddress   = \"${clc_server.node.1.private_ip_address}\"",
      "    privatePort = 3000",
      "  }",
      "}",
      "",
      "output \"pool\" {",
      "  value = \"${join(\" \", clc_load_balancer.pool.nodes)}\"",
      "}"
    ]
  },
  "clc-resource-public_ip": {
    "description": "Defines public_ip",
    "prefix": "tf-clc-resource-public_ip",
    "body": [
      "# Provision a public ip",
      "resource \"clc_public_ip\" \"backdoor\" {",
      "  server_id           = \"${clc_server.node.0.id}\"",
      "  internal_ip_address = \"${clc_server.node.0.private_ip_address}\"",
      "",
      "  ports {",
      "    protocol = \"ICMP\"",
      "    port     = -1",
      "  }",
      "",
      "  ports {",
      "    protocol = \"TCP\"",
      "    port     = 22",
      "  }",
      "",
      "  ports {",
      "    protocol = \"TCP\"",
      "    port     = 2000",
      "    port_to  = 9000",
      "  }",
      "",
      "  source_restrictions {",
      "    cidr = \"85.39.22.15/30\"",
      "  }",
      "}",
      "",
      "output \"ip\" {",
      "  value = \"clc_public_ip.backdoor.id\"",
      "}"
    ]
  },
  "clc-resource-server": {
    "description": "Defines server",
    "prefix": "tf-clc-resource-server",
    "body": [
      "# Provision a server",
      "resource \"clc_server\" \"node\" {",
      "  name_template    = \"trusty\"",
      "  source_server_id = \"UBUNTU-14-64-TEMPLATE\"",
      "  group_id         = \"${clc_group.frontends.id}\"",
      "  cpu              = 2",
      "  memory_mb        = 2048",
      "  password         = \"Green123$\"",
      "",
      "  additional_disks {",
      "    path    = \"/var\"",
      "    size_gb = 100",
      "    type    = \"partitioned\"",
      "  }",
      "",
      "  additional_disks {",
      "    size_gb = 10",
      "    type    = \"raw\"",
      "  }",
      "}",
      "",
      "output \"server_id\" {",
      "  value = \"clc_server.node.id\"",
      "}"
    ]
  },
  "cloudflare-data-ip_ranges": {
    "description": "Defines ip_ranges",
    "prefix": "tf-cloudflare-data-ip_ranges",
    "body": [
      "data \"cloudflare_ip_ranges\" \"cloudflare\" {}",
      "",
      "resource \"google_compute_firewall\" \"allow_cloudflare_ingress\" {",
      "  name    = \"from_cloudflare\"",
      "  network = \"default\"",
      "",
      "  ingress {",
      "    ports         = \"443\"",
      "    protocol      = \"tcp\"",
      "    source_ranges = [\"${data.cloudflare_ip_ranges.cloudflare.cidr_blocks}\"]",
      "  }",
      "}"
    ]
  },
  "cloudflare-resource-load_balancer": {
    "description": "Defines load_balancer",
    "prefix": "tf-cloudflare-resource-load_balancer",
    "body": [
      "# Define a load balancer which always points to a pool we define below",
      "# In normal usage, would have different pools set for different pops (cloudflare points-of-presence) and/or for different regions",
      "# Within each pop or region we can define multiple pools in failover order",
      "resource \"cloudflare_load_balancer\" \"bar\" {",
      "  zone = \"example.com\"",
      "  name = \"example-load-balancer\"",
      "  fallback_pool_id = \"${cloudflare_load_balancer_pool.foo.id}\"",
      "  default_pool_ids = [\"${cloudflare_load_balancer_pool.foo.id}\"]",
      "  description = \"example load balancer using geo-balancing\"",
      "  proxied = true",
      "  pop_pools {",
      "    pop = \"LAX\"",
      "    pool_ids = [\"${cloudflare_load_balancer_pool.foo.id}\"]",
      "  }",
      "  region_pools {",
      "    region = \"WNAM\"",
      "    pool_ids = [\"${cloudflare_load_balancer_pool.foo.id}\"]",
      "  }",
      "}",
      "",
      "resource \"cloudflare_load_balancer_pool\" \"foo\" {",
      "  name = \"example-lb-pool\"",
      "  origins {",
      "    name = \"example-1\"",
      "    address = \"192.0.2.1\"",
      "    enabled = false",
      "  }",
      "}"
    ]
  },
  "cloudflare-resource-load_balancer_monitor": {
    "description": "Defines load_balancer_monitor",
    "prefix": "tf-cloudflare-resource-load_balancer_monitor",
    "body": [
      "resource \"cloudflare_load_balancer_monitor\" \"test\" {",
      "  expected_body = \"alive\"",
      "  expected_codes = \"2xx\"",
      "  method = \"GET\"",
      "  timeout = 7",
      "  path = \"/health\"",
      "  interval = 55",
      "  retries = 5",
      "  description = \"example load balancer\"",
      "  header {",
      "    header = \"Host\"",
      "    values = [\"example.com\"]",
      "  }",
      "}"
    ]
  },
  "cloudflare-resource-load_balancer_pool": {
    "description": "Defines load_balancer_pool",
    "prefix": "tf-cloudflare-resource-load_balancer_pool",
    "body": [
      "resource \"cloudflare_load_balancer_pool\" \"foo\" {",
      "  name = \"example-pool\"",
      "  origins {",
      "    name = \"example-1\"",
      "    address = \"192.0.2.1\"",
      "    enabled = false",
      "  }",
      "  origins {",
      "    name = \"example-2\"",
      "    address = \"192.0.2.2\"",
      "  }",
      "  description = \"example load balancer pool\"",
      "  enabled = false",
      "  minimum_origins = 1",
      "  notification_email = \"someone@example.com\"",
      "}"
    ]
  },
  "cloudflare-resource-page_rule": {
    "description": "Defines page_rule",
    "prefix": "tf-cloudflare-resource-page_rule",
    "body": [
      "# Add a page rule to the domain",
      "resource \"cloudflare_page_rule\" \"foobar\" {",
      "  domain = \"${var.cloudflare_domain}\"",
      "  target = \"sub.${self.domain}/page\"",
      "  priority = 1",
      "",
      "  actions = {",
      "    ssl = \"flexible\",",
      "    email_obfuscation = \"on\",",
      "  }",
      "}"
    ]
  },
  "cloudflare-resource-rate_limit": {
    "description": "Defines rate_limit",
    "prefix": "tf-cloudflare-resource-rate_limit",
    "body": [
      "resource \"cloudflare_rate_limit\" \"example\" {",
      "  zone = \"${var.cloudflare_zone}\"",
      "  threshold = 2000",
      "  period = 2",
      "  match {",
      "    request {",
      "      url_pattern = \"${var.cloudflare_zone}/*\"",
      "      schemes = [\"HTTP\", \"HTTPS\"]",
      "      methods = [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\", \"HEAD\"]",
      "    }",
      "    response {",
      "      statuses = [200, 201, 202, 301, 429]",
      "      origin_traffic = false",
      "    }",
      "  }",
      "  action {",
      "    mode = \"simulate\"",
      "    timeout = 43200",
      "    response {",
      "      content_type = \"text/plain\"",
      "      body = \"custom response body\"",
      "    }",
      "  }",
      "  disabled = false",
      "  description = \"example rate limit for a zone\"",
      "  bypass_url_patterns = [\"${var.cloudflare_zone}/bypass1\",\"${var.cloudflare_zone}/bypass2\"]",
      "}"
    ]
  },
  "cloudflare-resource-record": {
    "description": "Defines record",
    "prefix": "tf-cloudflare-resource-record",
    "body": [
      "# Add a record to the domain",
      "resource \"cloudflare_record\" \"foobar\" {",
      "  domain = \"${var.cloudflare_domain}\"",
      "  name   = \"terraform\"",
      "  value  = \"192.168.0.11\"",
      "  type   = \"A\"",
      "  ttl    = 3600",
      "}"
    ]
  },
  "cloudflare-resource-zone_settings_override": {
    "description": "Defines zone_settings_override",
    "prefix": "tf-cloudflare-resource-zone_settings_override",
    "body": [
      "resource \"cloudflare_zone_settings_override\" \"test\" {",
      "\tname = \"${var.cloudflare_zone}\"",
      "\tsettings {",
      "\t\tbrotli = \"on\",",
      "\t\tchallenge_ttl = 2700",
      "\t\tsecurity_level = \"high\"",
      "\t\topportunistic_encryption = \"on\"",
      "\t\tautomatic_https_rewrites = \"on\"",
      "\t\tmirage = \"on\"",
      "\t\twaf = \"on\"",
      "\t\tminify {",
      "\t\t\tcss = \"on\"",
      "\t\t\tjs = \"off\"",
      "\t\t\thtml = \"off\"",
      "\t\t}",
      "\t\tsecurity_header {",
      "\t\t\tenabled = true",
      "\t\t}",
      "\t}",
      "}"
    ]
  },
  "cloudscale-resource-floating_ip": {
    "description": "Defines floating_ip",
    "prefix": "tf-cloudscale-resource-floating_ip",
    "body": [
      "# Create a new Server",
      "resource \"cloudscale_server\" \"web-worker01\" {",
      "  name        = \"web-worker01\"",
      "  flavor_slug = \"flex-4\"",
      "  image_slug  = \"debian-9\"",
      "  ssh_keys    = [\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIL2jzgla23DfRVLQr3KT20QQYovqCCN3clHrjm2ZuQFW user@example.com\"]",
      "}",
      "",
      "# Add a Floating IPv4 address to web-worker01",
      "resource \"cloudscale_floating_ip\" \"web-worker01-vip\" {",
      "  server      = \"${cloudscale_server.web-worker01.id}\"",
      "  ip_version  = 4",
      "  reverse_ptr = \"vip.web-worker01.example.com\"",
      "}",
      "",
      "# Add a Floating IPv6 network to web-worker01",
      "resource \"cloudscale_floating_ip\" \"web-worker01-net\" {",
      "  server        = \"${cloudscale_server.web-worker01.id}\"",
      "  ip_version    = 6",
      "  prefix_length = 56",
      "}"
    ]
  },
  "cloudscale-resource-server": {
    "description": "Defines server",
    "prefix": "tf-cloudscale-resource-server",
    "body": [
      "# Create a new Server",
      "resource \"cloudscale_server\" \"web-worker01\" {",
      "  name                = \"web-worker01\"",
      "  flavor_slug         = \"flex-4\"",
      "  image_slug          = \"debian-9\"",
      "  volume_size_gb      = 10",
      "  bulk_volume_size_gb = 200",
      "  ssh_keys            = [\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIL2jzgla23DfRVLQr3KT20QQYovqCCN3clHrjm2ZuQFW user@example.com\"]",
      "}"
    ]
  },
  "cloudstack-data-template": {
    "description": "Defines template",
    "prefix": "tf-cloudstack-data-template",
    "body": [
      "data \"cloudstack_template\" \"my_template\" {",
      "  template_filter = \"featured\"",
      "",
      "  filter {",
      "    name = \"name\"",
      "    value = \"CentOS 7\\\\.1\"",
      "  }",
      "",
      "  filter {",
      "    name = \"hypervisor\"",
      "    value = \"KVM\"",
      "  }",
      "}"
    ]
  },
  "cloudstack-resource-affinity_group": {
    "description": "Defines affinity_group",
    "prefix": "tf-cloudstack-resource-affinity_group",
    "body": [
      "resource \"cloudstack_affinity_group\" \"default\" {",
      "  name = \"test-affinity-group\"",
      "  type = \"host anti-affinity\"",
      "}"
    ]
  },
  "cloudstack-resource-disk": {
    "description": "Defines disk",
    "prefix": "tf-cloudstack-resource-disk",
    "body": [
      "resource \"cloudstack_disk\" \"default\" {",
      "  name               = \"test-disk\"",
      "  attach             = \"true\"",
      "  disk_offering      = \"custom\"",
      "  size               = 50",
      "  virtual_machine_id = \"server-1\"",
      "  zone               = \"zone-1\"",
      "}"
    ]
  },
  "cloudstack-resource-egress_firewall": {
    "description": "Defines egress_firewall",
    "prefix": "tf-cloudstack-resource-egress_firewall",
    "body": [
      "resource \"cloudstack_egress_firewall\" \"default\" {",
      "  network_id = \"6eb22f91-7454-4107-89f4-36afcdf33021\"",
      "",
      "  rule {",
      "    cidr_list = [\"10.0.0.0/8\"]",
      "    protocol  = \"tcp\"",
      "    ports     = [\"80\", \"1000-2000\"]",
      "  }",
      "}"
    ]
  },
  "cloudstack-resource-firewall": {
    "description": "Defines firewall",
    "prefix": "tf-cloudstack-resource-firewall",
    "body": [
      "resource \"cloudstack_firewall\" \"default\" {",
      "  ip_address_id = \"30b21801-d4b3-4174-852b-0c0f30bdbbfb\"",
      "",
      "  rule {",
      "    cidr_list = [\"10.0.0.0/8\"]",
      "    protocol  = \"tcp\"",
      "    ports     = [\"80\", \"1000-2000\"]",
      "  }",
      "}"
    ]
  },
  "cloudstack-resource-instance": {
    "description": "Defines instance",
    "prefix": "tf-cloudstack-resource-instance",
    "body": [
      "resource \"cloudstack_instance\" \"web\" {",
      "  name             = \"server-1\"",
      "  service_offering = \"small\"",
      "  network_id       = \"6eb22f91-7454-4107-89f4-36afcdf33021\"",
      "  template         = \"CentOS 6.5\"",
      "  zone             = \"zone-1\"",
      "}"
    ]
  },
  "cloudstack-resource-ipaddress": {
    "description": "Defines ipaddress",
    "prefix": "tf-cloudstack-resource-ipaddress",
    "body": [
      "resource \"cloudstack_ipaddress\" \"default\" {",
      "  network_id = \"6eb22f91-7454-4107-89f4-36afcdf33021\"",
      "}"
    ]
  },
  "cloudstack-resource-loadbalancer_rule": {
    "description": "Defines loadbalancer_rule",
    "prefix": "tf-cloudstack-resource-loadbalancer_rule",
    "body": [
      "resource \"cloudstack_loadbalancer_rule\" \"default\" {",
      "  name          = \"loadbalancer-rule-1\"",
      "  description   = \"Loadbalancer rule 1\"",
      "  ip_address_id = \"30b21801-d4b3-4174-852b-0c0f30bdbbfb\"",
      "  algorithm     = \"roundrobin\"",
      "  private_port  = 80",
      "  public_port   = 80",
      "  member_ids    = [\"f8141e2f-4e7e-4c63-9362-986c908b7ea7\"]",
      "}"
    ]
  },
  "cloudstack-resource-network": {
    "description": "Defines network",
    "prefix": "tf-cloudstack-resource-network",
    "body": [
      "resource \"cloudstack_network\" \"default\" {",
      "  name             = \"test-network\"",
      "  cidr             = \"10.0.0.0/16\"",
      "  network_offering = \"Default Network\"",
      "  zone             = \"zone-1\"",
      "}"
    ]
  },
  "cloudstack-resource-network_acl": {
    "description": "Defines network_acl",
    "prefix": "tf-cloudstack-resource-network_acl",
    "body": [
      "resource \"cloudstack_network_acl\" \"default\" {",
      "  name   = \"test-acl\"",
      "  vpc_id = \"76f6e8dc-07e3-4971-b2a2-8831b0cc4cb4\"",
      "}"
    ]
  },
  "cloudstack-resource-network_acl_rule": {
    "description": "Defines network_acl_rule",
    "prefix": "tf-cloudstack-resource-network_acl_rule",
    "body": [
      "resource \"cloudstack_network_acl_rule\" \"default\" {",
      "  acl_id = \"f3843ce0-334c-4586-bbd3-0c2e2bc946c6\"",
      "",
      "  rule {",
      "    action       = \"allow\"",
      "    cidr_list    = [\"10.0.0.0/8\"]",
      "    protocol     = \"tcp\"",
      "    ports        = [\"80\", \"1000-2000\"]",
      "    traffic_type = \"ingress\"",
      "  }",
      "}"
    ]
  },
  "cloudstack-resource-nic": {
    "description": "Defines nic",
    "prefix": "tf-cloudstack-resource-nic",
    "body": [
      "resource \"cloudstack_nic\" \"test\" {",
      "  network_id         = \"6eb22f91-7454-4107-89f4-36afcdf33021\"",
      "  ip_address         = \"192.168.1.1\"",
      "  virtual_machine_id = \"f8141e2f-4e7e-4c63-9362-986c908b7ea7\"",
      "}"
    ]
  },
  "cloudstack-resource-port_forward": {
    "description": "Defines port_forward",
    "prefix": "tf-cloudstack-resource-port_forward",
    "body": [
      "resource \"cloudstack_port_forward\" \"default\" {",
      "  ip_address_id = \"30b21801-d4b3-4174-852b-0c0f30bdbbfb\"",
      "",
      "  forward {",
      "    protocol           = \"tcp\"",
      "    private_port       = 80",
      "    public_port        = 8080",
      "    virtual_machine_id = \"f8141e2f-4e7e-4c63-9362-986c908b7ea7\"",
      "  }",
      "}"
    ]
  },
  "cloudstack-resource-private_gateway": {
    "description": "Defines private_gateway",
    "prefix": "tf-cloudstack-resource-private_gateway",
    "body": [
      "resource \"cloudstack_private_gateway\" \"default\" {",
      "  gateway    = \"10.0.0.1\"",
      "  ip_address = \"10.0.0.2\"",
      "  netmask    = \"255.255.255.252\"",
      "  vlan       = \"200\"",
      "  vpc_id     = \"76f6e8dc-07e3-4971-b2a2-8831b0cc4cb4\"",
      "}"
    ]
  },
  "cloudstack-resource-secondary_ipaddress": {
    "description": "Defines secondary_ipaddress",
    "prefix": "tf-cloudstack-resource-secondary_ipaddress",
    "body": [
      "resource \"cloudstack_secondary_ipaddress\" \"default\" {",
      "  virtual_machine_id = \"server-1\"",
      "}"
    ]
  },
  "cloudstack-resource-security_group": {
    "description": "Defines security_group",
    "prefix": "tf-cloudstack-resource-security_group",
    "body": [
      "resource \"cloudstack_security_group\" \"default\" {",
      "  name        = \"allow_web\"",
      "  description = \"Allow access to HTTP and HTTPS\"",
      "}"
    ]
  },
  "cloudstack-resource-security_group_rule": {
    "description": "Defines security_group_rule",
    "prefix": "tf-cloudstack-resource-security_group_rule",
    "body": [
      "resource \"cloudstack_security_group_rule\" \"web\" {",
      "  security_group_id = \"e340b62b-fbc2-4081-8f67-e40455c44bce\"",
      "",
      "  rule {",
      "    cidr_list = [\"0.0.0.0/0\"]",
      "    protocol  = \"tcp\"",
      "    ports     = [\"80\", \"443\"]",
      "  }",
      "",
      "  rule {",
      "    cidr_list                = [\"192.168.0.0/24\", \"192.168.1.0/25\"]",
      "    protocol                 = \"tcp\"",
      "    ports                    = [\"80-90\", \"443\"]",
      "    traffic_type             = \"egress\"",
      "    user_security_group_list = [\"group01\", \"group02\"]",
      "  }",
      "}"
    ]
  },
  "cloudstack-resource-ssh_keypair": {
    "description": "Defines ssh_keypair",
    "prefix": "tf-cloudstack-resource-ssh_keypair",
    "body": [
      "resource \"cloudstack_ssh_keypair\" \"default\" {",
      "  name       = \"myKey\"",
      "  public_key = \"${file(\"~/.ssh/id_rsa.pub\")}\"",
      "  project    = \"myProject\"",
      "}"
    ]
  },
  "cloudstack-resource-static_nat": {
    "description": "Defines static_nat",
    "prefix": "tf-cloudstack-resource-static_nat",
    "body": [
      "resource \"cloudstack_static_nat\" \"default\" {",
      "  ip_address_id      = \"f8141e2f-4e7e-4c63-9362-986c908b7ea7\"",
      "  virtual_machine_id = \"6ca2a163-bc68-429c-adc8-ab4a620b1bb3\"",
      "}"
    ]
  },
  "cloudstack-resource-static_route": {
    "description": "Defines static_route",
    "prefix": "tf-cloudstack-resource-static_route",
    "body": [
      "resource \"cloudstack_static_route\" \"default\" {",
      "  cidr       = \"10.0.0.0/16\"",
      "  gateway_id = \"76f607e3-e8dc-4971-8831-b2a2b0cc4cb4\"",
      "}"
    ]
  },
  "cloudstack-resource-template": {
    "description": "Defines template",
    "prefix": "tf-cloudstack-resource-template",
    "body": [
      "resource \"cloudstack_template\" \"centos64\" {",
      "  name       = \"CentOS 6.4 x64\"",
      "  format     = \"VHD\"",
      "  hypervisor = \"XenServer\"",
      "  os_type    = \"CentOS 6.4 (64bit)\"",
      "  url        = \"http://someurl.com/template.vhd\"",
      "  zone       = \"zone-1\"",
      "}"
    ]
  },
  "cloudstack-resource-vpc": {
    "description": "Defines vpc",
    "prefix": "tf-cloudstack-resource-vpc",
    "body": [
      "resource \"cloudstack_vpc\" \"default\" {",
      "  name         = \"test-vpc\"",
      "  cidr         = \"10.0.0.0/16\"",
      "  vpc_offering = \"Default VPC Offering\"",
      "  zone         = \"zone-1\"",
      "}"
    ]
  },
  "cloudstack-resource-vpn_connection": {
    "description": "Defines vpn_connection",
    "prefix": "tf-cloudstack-resource-vpn_connection",
    "body": [
      "resource \"cloudstack_vpn_connection\" \"default\" {",
      "  customer_gateway_id = \"8dab9381-ae73-48b8-9a3d-c460933ef5f7\"",
      "  vpn_gateway_id      = \"a7900060-f8a8-44eb-be15-ea54cf499703\"",
      "}"
    ]
  },
  "cloudstack-resource-vpn_customer_gateway": {
    "description": "Defines vpn_customer_gateway",
    "prefix": "tf-cloudstack-resource-vpn_customer_gateway",
    "body": [
      "resource \"cloudstack_vpn_customer_gateway\" \"default\" {",
      "  name       = \"test-vpc\"",
      "  cidr       = \"10.0.0.0/8\"",
      "  esp_policy = \"aes256-sha1;modp1024\"",
      "  gateway    = \"192.168.0.1\"",
      "  ike_policy = \"aes256-sha1;modp1024\"",
      "  ipsec_psk  = \"terraform\"",
      "}"
    ]
  },
  "cloudstack-resource-vpn_gateway": {
    "description": "Defines vpn_gateway",
    "prefix": "tf-cloudstack-resource-vpn_gateway",
    "body": [
      "resource \"cloudstack_vpn_gateway\" \"default\" {",
      "  vpc_id = \"f8141e2f-4e7e-4c63-9362-986c908b7ea7\"",
      "}"
    ]
  },
  "cobbler-resource-distro": {
    "description": "Defines distro",
    "prefix": "tf-cobbler-resource-distro",
    "body": [
      "resource \"cobbler_distro\" \"ubuntu-1404-x86_64\" {",
      "  name       = \"foo\"",
      "  breed      = \"ubuntu\"",
      "  os_version = \"trusty\"",
      "  arch       = \"x86_64\"",
      "  kernel     = \"/var/www/cobbler/ks_mirror/Ubuntu-14.04/install/netboot/ubuntu-installer/amd64/linux\"",
      "  initrd     = \"/var/www/cobbler/ks_mirror/Ubuntu-14.04/install/netboot/ubuntu-installer/amd64/initrd.gz\"",
      "}"
    ]
  },
  "cobbler-resource-kickstart_file": {
    "description": "Defines kickstart_file",
    "prefix": "tf-cobbler-resource-kickstart_file",
    "body": [
      "resource \"cobbler_kickstart_file\" \"my_kickstart\" {",
      "  name = \"/var/lib/cobbler/kickstarts/my_kickstart.ks\"",
      "  body = \"<content of kickstart file>\"",
      "}"
    ]
  },
  "cobbler-resource-profile": {
    "description": "Defines profile",
    "prefix": "tf-cobbler-resource-profile",
    "body": [
      "resource \"cobbler_profile\" \"my_profile\" {",
      "  name   = \"/var/lib/cobbler/snippets/my_snippet\"",
      "  distro = \"ubuntu-1404-x86_64\"",
      "}"
    ]
  },
  "cobbler-resource-repo": {
    "description": "Defines repo",
    "prefix": "tf-cobbler-resource-repo",
    "body": [
      "resource \"cobbler_repo\" \"my_repo\" {",
      "  name           = \"my_repo\"",
      "  breed          = \"apt\"",
      "  arch           = \"x86_64\"",
      "  apt_components = [\"main\"]",
      "  apt_dists      = [\"trusty\"]",
      "  mirror         = \"http://us.archive.ubuntu.com/ubuntu/\"",
      "}"
    ]
  },
  "cobbler-resource-snippet": {
    "description": "Defines snippet",
    "prefix": "tf-cobbler-resource-snippet",
    "body": [
      "resource \"cobbler_snippet\" \"my_snippet\" {",
      "  name = \"/var/lib/cobbler/snippets/my_snippet\"",
      "  body = \"<content of snippet>\"",
      "}"
    ]
  },
  "cobbler-resource-system": {
    "description": "Defines system",
    "prefix": "tf-cobbler-resource-system",
    "body": [
      "resource \"cobbler_system\" \"my_system\" {",
      "  name         = \"my_system\"",
      "  profile      = \"${cobbler_profile.my_profile.name}\"",
      "  name_servers = [\"8.8.8.8\", \"8.8.4.4\"]",
      "  comment      = \"I'm a system\"",
      "",
      "  interface {",
      "    name        = \"eth0\"",
      "    mac_address = \"aa:bb:cc:dd:ee:ff\"",
      "    static      = true",
      "    ip_address  = \"1.2.3.4\"",
      "    netmask     = \"255.255.255.0\"",
      "  }",
      "",
      "  interface {",
      "    name        = \"eth1\"",
      "    mac_address = \"aa:bb:cc:dd:ee:fa\"",
      "    static      = true",
      "    ip_address  = \"1.2.3.5\"",
      "    netmask     = \"255.255.255.0\"",
      "  }",
      "}"
    ]
  },
  "consul-data-agent_config": {
    "description": "Defines agent_config",
    "prefix": "tf-consul-data-agent_config",
    "body": [
      "data \"consul_agent_config\" \"remote_agent\" {}",
      "",
      "output \"info\" {",
      "  consul_version = \"${data.consul_agent_config.version}\"",
      "}"
    ]
  },
  "consul-data-agent_self": {
    "description": "Defines agent_self",
    "prefix": "tf-consul-data-agent_self",
    "body": [
      "data \"consul_agent_self\" \"read-dc1-agent\" {",
      "  query_options {",
      "    # Optional parameter: implicitly uses the current datacenter of the agent",
      "    datacenter = \"dc1\"",
      "  }",
      "}",
      "",
      "# Set the description to a whitespace delimited list of the services",
      "resource \"example_resource\" \"app\" {",
      "  description = \"Consul datacenter ${data.consul_agent_self.read-dc1-agent.datacenter}\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "consul-data-key_prefix": {
    "description": "Defines key_prefix",
    "prefix": "tf-consul-data-key_prefix",
    "body": [
      "data \"consul_key_prefix\" \"app\" {",
      "  datacenter = \"nyc1\"",
      "  token      = \"abcd\"",
      "",
      "  # Prefix to add to prepend to all of the subkey names below.",
      "  path_prefix = \"myapp/config/\"",
      "",
      "  # Read the ami subkey",
      "  subkey {",
      "    name    = \"ami\"",
      "    path    = \"app/launch_ami\"",
      "    default = \"ami-1234\"",
      "  }",
      "}",
      "",
      "# Start our instance with the dynamic ami value",
      "resource \"aws_instance\" \"app\" {",
      "  ami = \"${data.consul_key_prefix.app.var.ami}\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "consul-data-keys": {
    "description": "Defines keys",
    "prefix": "tf-consul-data-keys",
    "body": [
      "data \"consul_keys\" \"app\" {",
      "  datacenter = \"nyc1\"",
      "  token      = \"abcd\"",
      "",
      "  # Read the launch AMI from Consul",
      "  key {",
      "    name    = \"ami\"",
      "    path    = \"service/app/launch_ami\"",
      "    default = \"ami-1234\"",
      "  }",
      "}",
      "",
      "# Start our instance with the dynamic ami value",
      "resource \"aws_instance\" \"app\" {",
      "  ami = \"${data.consul_keys.app.var.ami}\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "consul-data-nodes": {
    "description": "Defines nodes",
    "prefix": "tf-consul-data-nodes",
    "body": [
      "data \"consul_catalog_nodes\" \"read-dc1-nodes\" {",
      "  query_options {",
      "    # Optional parameter: implicitly uses the current datacenter of the agent  ",
      "    datacenter = \"dc1\"",
      "  }",
      "}",
      "",
      "# Set the description to a whitespace delimited list of the node names",
      "resource \"example_resource\" \"app\" {",
      "  description = \"${join(\" \", formatlist(\"%s\", data.consul_catalog_nodes.node_names))}\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "consul-data-service": {
    "description": "Defines service",
    "prefix": "tf-consul-data-service",
    "body": [
      "data \"consul_catalog_service\" \"read-consul-dc1\" {",
      "  query_options {",
      "    # Optional parameter: implicitly uses the current datacenter of the agent  ",
      "    datacenter = \"dc1\"",
      "  }",
      "",
      "  name = \"consul\"",
      "}",
      "",
      "# Set the description to a whitespace delimited list of the node names",
      "resource \"example_resource\" \"app\" {",
      "  description = \"${join(\" \", data.consul_catalog_service.nodes)}\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "consul-data-services": {
    "description": "Defines services",
    "prefix": "tf-consul-data-services",
    "body": [
      "data \"consul_catalog_services\" \"read-dc1\" {",
      "  query_options {",
      "    # Optional parameter: implicitly uses the current datacenter of the agent  ",
      "    datacenter = \"dc1\"",
      "  }",
      "}",
      "",
      "# Set the description to a whitespace delimited list of the services",
      "resource \"example_resource\" \"app\" {",
      "  description = \"${join(\" \", data.consul_catalog_services.names)}\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "consul-resource-agent_service": {
    "description": "Defines agent_service",
    "prefix": "tf-consul-resource-agent_service",
    "body": [
      "resource \"consul_agent_service\" \"app\" {",
      "  address = \"www.google.com\"",
      "  name    = \"google\"",
      "  port    = 80",
      "  tags    = [\"tag0\", \"tag1\"]",
      "}"
    ]
  },
  "consul-resource-catalog_entry": {
    "description": "Defines catalog_entry",
    "prefix": "tf-consul-resource-catalog_entry",
    "body": [
      "resource \"consul_catalog_entry\" \"app\" {",
      "  address = \"192.168.10.10\"",
      "  node    = \"foobar\"",
      "",
      "  service = {",
      "    address = \"127.0.0.1\"",
      "    id      = \"redis1\"",
      "    name    = \"redis\"",
      "    port    = 8000",
      "    tags    = [\"master\", \"v1\"]",
      "  }",
      "}"
    ]
  },
  "consul-resource-key_prefix": {
    "description": "Defines key_prefix",
    "prefix": "tf-consul-resource-key_prefix",
    "body": [
      "resource \"consul_key_prefix\" \"myapp_config\" {",
      "  datacenter = \"nyc1\"",
      "  token      = \"abcd\"",
      "",
      "  # Prefix to add to prepend to all of the subkey names below.",
      "  path_prefix = \"myapp/config/\"",
      "",
      "  subkeys = {",
      "    \"elb_cname\"         = \"${aws_elb.app.dns_name}\"",
      "    \"s3_bucket_name\"    = \"${aws_s3_bucket.app.bucket}\"",
      "    \"database/hostname\" = \"${aws_db_instance.app.address}\"",
      "    \"database/port\"     = \"${aws_db_instance.app.port}\"",
      "    \"database/username\" = \"${aws_db_instance.app.username}\"",
      "    \"database/password\" = \"${aws_db_instance.app.password}\"",
      "    \"database/name\"     = \"${aws_db_instance.app.name}\"",
      "  }",
      "}"
    ]
  },
  "consul-resource-keys": {
    "description": "Defines keys",
    "prefix": "tf-consul-resource-keys",
    "body": [
      "resource \"consul_keys\" \"app\" {",
      "  datacenter = \"nyc1\"",
      "  token      = \"abcd\"",
      "",
      "  # Set the CNAME of our load balancer as a key",
      "  key {",
      "    path  = \"service/app/elb_address\"",
      "    value = \"${aws_elb.app.dns_name}\"",
      "  }",
      "}"
    ]
  },
  "consul-resource-node": {
    "description": "Defines node",
    "prefix": "tf-consul-resource-node",
    "body": [
      "resource \"consul_node\" \"foobar\" {",
      "  address = \"192.168.10.10\"",
      "  name    = \"foobar\"",
      "}"
    ]
  },
  "consul-resource-prepared_query": {
    "description": "Defines prepared_query",
    "prefix": "tf-consul-resource-prepared_query",
    "body": [
      "# Creates a prepared query myquery.query.consul that finds the nearest",
      "# healthy myapp.service.consul instance that has the active tag and not",
      "# the standby tag.",
      "resource \"consul_prepared_query\" \"myapp-query\" {",
      "  name         = \"myquery\"",
      "  datacenter   = \"us-central1\"",
      "  token        = \"abcd\"",
      "  stored_token = \"wxyz\"",
      "  only_passing = true",
      "  near         = \"_agent\"",
      "",
      "  service = \"myapp\"",
      "  tags    = [\"active\", \"!standby\"]",
      "",
      "  failover {",
      "    nearest_n   = 3",
      "    datacenters = [\"us-west1\", \"us-east-2\", \"asia-east1\"]",
      "  }",
      "",
      "  dns {",
      "    ttl = \"30s\"",
      "  }",
      "}",
      "",
      "# Creates a Prepared Query Template that matches *-near-self.query.consul",
      "# and finds the nearest service that matches the glob character (e.g.",
      "# foo-near-self.query.consul will find the nearest healthy foo.service.consul).",
      "resource \"consul_prepared_query\" \"service-near-self\" {",
      "  datacenter   = \"nyc1\"",
      "  token        = \"abcd\"",
      "  stored_token = \"wxyz\"",
      "  name         = \"\"",
      "  only_passing = true",
      "  near         = \"_agent\"",
      "",
      "  template {",
      "    type   = \"name_prefix_match\"",
      "    regexp = \"^(.*)-near-self$\"",
      "  }",
      "",
      "  service = \"$${match(1)}\"",
      "",
      "  failover {",
      "    nearest_n   = 3",
      "    datacenters = [\"dc2\", \"dc3\", \"dc4\"]",
      "  }",
      "",
      "  dns {",
      "    ttl = \"5m\"",
      "  }",
      "}"
    ]
  },
  "consul-resource-service": {
    "description": "Defines service",
    "prefix": "tf-consul-resource-service",
    "body": [
      "resource \"consul_service\" \"google\" {",
      "  address = \"www.google.com\"",
      "  name    = \"google\"",
      "  port    = 80",
      "  tags    = [\"tag0\", \"tag1\"]",
      "}"
    ]
  },
  "datadog-resource-downtime": {
    "description": "Defines downtime",
    "prefix": "tf-datadog-resource-downtime",
    "body": [
      "# Create a new daily 1700-0900 Datadog downtime",
      "resource \"datadog_downtime\" \"foo\" {",
      "  scope = [\"*\"]",
      "  start = 1483308000",
      "  end   = 1483365600",
      "",
      "  recurrence {",
      "    type   = \"days\"",
      "    period = 1",
      "  }",
      "}"
    ]
  },
  "datadog-resource-metric_metadata": {
    "description": "Defines metric_metadata",
    "prefix": "tf-datadog-resource-metric_metadata",
    "body": [
      "# Manage a Datadog metric's metadata",
      "resource \"datadog_metric_metadata\" \"request_time\" {",
      "  metric = \"request.time\"",
      "  short_name = \"Request time\"",
      "  description = \"99th percentile request time in millseconds\"",
      "  type = \"gauge\"",
      "  unit = \"millisecond\"",
      "}"
    ]
  },
  "datadog-resource-monitor": {
    "description": "Defines monitor",
    "prefix": "tf-datadog-resource-monitor",
    "body": [
      "# Create a new Datadog monitor",
      "resource \"datadog_monitor\" \"foo\" {",
      "  name               = \"Name for monitor foo\"",
      "  type               = \"metric alert\"",
      "  message            = \"Monitor triggered. Notify: @hipchat-channel\"",
      "  escalation_message = \"Escalation message @pagerduty\"",
      "",
      "  query = \"avg(last_1h):avg:aws.ec2.cpu{environment:foo,host:foo} by {host} > 4\"",
      "",
      "  thresholds {",
      "    ok                = 0",
      "    warning           = 2",
      "    warning_recovery  = 1",
      "    critical          = 4",
      "    critical_recovery = 3",
      "  }",
      "",
      "  notify_no_data    = false",
      "  renotify_interval = 60",
      "",
      "  notify_audit = false",
      "  timeout_h    = 60",
      "  include_tags = true",
      "",
      "  silenced {",
      "    \"*\" = 0",
      "  }",
      "",
      "  tags = [\"foo:bar\", \"baz\"]",
      "}"
    ]
  },
  "datadog-resource-timeboard": {
    "description": "Defines timeboard",
    "prefix": "tf-datadog-resource-timeboard",
    "body": [
      "# Create a new Datadog timeboard",
      "resource \"datadog_timeboard\" \"redis\" {",
      "  title       = \"Redis Timeboard (created via Terraform)\"",
      "  description = \"created using the Datadog provider in Terraform\"",
      "  read_only   = true",
      "",
      "  graph {",
      "    title = \"Redis latency (ms)\"",
      "    viz   = \"timeseries\"",
      "",
      "    request {",
      "      q    = \"avg:redis.info.latency_ms{$host}\"",
      "      type = \"bars\"",
      "    }",
      "  }",
      "",
      "  graph {",
      "    title = \"Redis memory usage\"",
      "    viz   = \"timeseries\"",
      "",
      "    request {",
      "      q       = \"avg:redis.mem.used{$host} - avg:redis.mem.lua{$host}, avg:redis.mem.lua{$host}\"",
      "      stacked = true",
      "    }",
      "",
      "    request {",
      "      q = \"avg:redis.mem.rss{$host}\"",
      "",
      "      style {",
      "        palette = \"warm\"",
      "      }",
      "    }",
      "  }",
      "",
      "  graph {",
      "    title = \"Top System CPU by Docker container\"",
      "    viz   = \"toplist\"",
      "",
      "    request {",
      "      q = \"top(avg:docker.cpu.system{*} by {container_name}, 10, 'mean', 'desc')\"",
      "    }",
      "  }",
      "",
      "  template_variable {",
      "    name   = \"host\"",
      "    prefix = \"host\"",
      "  }",
      "}"
    ]
  },
  "datadog-resource-user": {
    "description": "Defines user",
    "prefix": "tf-datadog-resource-user",
    "body": [
      "# Create a new Datadog user",
      "resource \"datadog_user\" \"foo\" {",
      "  email  = \"new@example.com\"",
      "  handle = \"new@example.com\"",
      "  name   = \"New User\"",
      "}"
    ]
  },
  "digitalocean-data-image": {
    "description": "Defines image",
    "prefix": "tf-digitalocean-data-image",
    "body": [
      "data \"digitalocean_image\" \"example1\" {",
      "  name = \"example-1.0.0\"",
      "}"
    ]
  },
  "digitalocean-resource-certificate": {
    "description": "Defines certificate",
    "prefix": "tf-digitalocean-resource-certificate",
    "body": [
      "# Create a new TLS certificate",
      "resource \"digitalocean_certificate\" \"cert\" {",
      "  name              = \"Terraform Example\"",
      "  private_key       = \"${file(\"/Users/terraform/certs/privkey.pem\")}\"",
      "  leaf_certificate  = \"${file(\"/Users/terraform/certs/cert.pem\")}\"",
      "  certificate_chain = \"${file(\"/Users/terraform/certs/fullchain.pem\")}\"",
      "}",
      "",
      "# Create a new Load Balancer with TLS termination",
      "resource \"digitalocean_loadbalancer\" \"public\" {",
      "  name        = \"secure-loadbalancer-1\"",
      "  region      = \"nyc3\"",
      "  droplet_tag = \"backend\"",
      "",
      "  forwarding_rule {",
      "    entry_port      = 443",
      "    entry_protocol  = \"https\"",
      "",
      "    target_port     = 80",
      "    target_protocol = \"http\"",
      "",
      "    certificate_id  = \"${digitalocean_certificate.cert.id}\"",
      "  }",
      "}"
    ]
  },
  "digitalocean-resource-domain": {
    "description": "Defines domain",
    "prefix": "tf-digitalocean-resource-domain",
    "body": [
      "# Create a new domain",
      "resource \"digitalocean_domain\" \"default\" {",
      "  name       = \"example.com\"",
      "  ip_address = \"${digitalocean_droplet.foo.ipv4_address}\"",
      "}"
    ]
  },
  "digitalocean-resource-droplet": {
    "description": "Defines droplet",
    "prefix": "tf-digitalocean-resource-droplet",
    "body": [
      "# Create a new Web Droplet in the nyc2 region",
      "resource \"digitalocean_droplet\" \"web\" {",
      "  image  = \"ubuntu-14-04-x64\"",
      "  name   = \"web-1\"",
      "  region = \"nyc2\"",
      "  size   = \"s-1vcpu-1gb\"",
      "}"
    ]
  },
  "digitalocean-resource-firewall": {
    "description": "Defines firewall",
    "prefix": "tf-digitalocean-resource-firewall",
    "body": [
      "resource \"digitalocean_droplet\" \"web\" {",
      "  name      = \"web-1\"",
      "  size      = \"s-1vcpu-1gb\"",
      "  image     = \"centos-7-x64\"",
      "  region    = \"nyc3\"",
      "}",
      "",
      "resource \"digitalocean_firewall\" \"web\" {",
      "  name = \"only-22-80-and-443\"",
      "",
      "  droplet_ids = [\"${digitalocean_droplet.web.id}\"]",
      "",
      "  inbound_rule = [",
      "    {",
      "      protocol           = \"tcp\"",
      "      port_range         = \"22\"",
      "      source_addresses   = [\"192.168.1.0/24\", \"2002:1:2::/48\"]",
      "    },",
      "    {",
      "      protocol           = \"tcp\"",
      "      port_range         = \"80\"",
      "      source_addresses   = [\"0.0.0.0/0\", \"::/0\"]",
      "    },",
      "    {",
      "      protocol           = \"tcp\"",
      "      port_range         = \"443\"",
      "      source_addresses   = [\"0.0.0.0/0\", \"::/0\"]",
      "    },",
      "  ]",
      "",
      "  outbound_rule = [",
      "    {",
      "      protocol                = \"tcp\"",
      "      port_range              = \"53\"",
      "      destination_addresses   = [\"0.0.0.0/0\", \"::/0\"]",
      "    },",
      "    {",
      "      protocol                = \"udp\"",
      "      port_range              = \"53\"",
      "      destination_addresses   = [\"0.0.0.0/0\", \"::/0\"]",
      "    },",
      "  ]",
      "}"
    ]
  },
  "digitalocean-resource-floating_ip": {
    "description": "Defines floating_ip",
    "prefix": "tf-digitalocean-resource-floating_ip",
    "body": [
      "resource \"digitalocean_droplet\" \"foobar\" {",
      "  name               = \"baz\"",
      "  size               = \"s-1vcpu-1gb\"",
      "  image              = \"centos-5-8-x32\"",
      "  region             = \"sgp1\"",
      "  ipv6               = true",
      "  private_networking = true",
      "}",
      "",
      "resource \"digitalocean_floating_ip\" \"foobar\" {",
      "  droplet_id = \"${digitalocean_droplet.foobar.id}\"",
      "  region     = \"${digitalocean_droplet.foobar.region}\"",
      "}"
    ]
  },
  "digitalocean-resource-loadbalancer": {
    "description": "Defines loadbalancer",
    "prefix": "tf-digitalocean-resource-loadbalancer",
    "body": [
      "resource \"digitalocean_droplet\" \"web\" {",
      "  name      = \"web-1\"",
      "  size      = \"s-1vcpu-1gb\"",
      "  image     = \"centos-7-x64\"",
      "  region    = \"nyc3\"",
      "}",
      "",
      "resource \"digitalocean_loadbalancer\" \"public\" {",
      "  name = \"loadbalancer-1\"",
      "  region = \"nyc3\"",
      "",
      "  forwarding_rule {",
      "    entry_port = 80",
      "    entry_protocol = \"http\"",
      "",
      "    target_port = 80",
      "    target_protocol = \"http\"",
      "  }",
      "",
      "  healthcheck {",
      "    port = 22",
      "    protocol = \"tcp\"",
      "  }",
      "",
      "  droplet_ids = [\"${digitalocean_droplet.web.id}\"]",
      "}"
    ]
  },
  "digitalocean-resource-record": {
    "description": "Defines record",
    "prefix": "tf-digitalocean-resource-record",
    "body": [
      "# Create a new domain",
      "resource \"digitalocean_domain\" \"default\" {",
      "  name       = \"www.example.com\"",
      "  ip_address = \"${digitalocean_droplet.foo.ipv4_address}\"",
      "}",
      "",
      "# Add a record to the domain",
      "resource \"digitalocean_record\" \"foobar\" {",
      "  domain = \"${digitalocean_domain.default.name}\"",
      "  type   = \"A\"",
      "  name   = \"foobar\"",
      "  value  = \"192.168.0.11\"",
      "}"
    ]
  },
  "digitalocean-resource-ssh_key": {
    "description": "Defines ssh_key",
    "prefix": "tf-digitalocean-resource-ssh_key",
    "body": [
      "# Create a new SSH key",
      "resource \"digitalocean_ssh_key\" \"default\" {",
      "  name       = \"Terraform Example\"",
      "  public_key = \"${file(\"/Users/terraform/.ssh/id_rsa.pub\")}\"",
      "}"
    ]
  },
  "digitalocean-resource-tag": {
    "description": "Defines tag",
    "prefix": "tf-digitalocean-resource-tag",
    "body": [
      "# Create a new tag",
      "resource \"digitalocean_tag\" \"foobar\" {",
      "  name = \"foobar\"",
      "}",
      "",
      "# Create a new droplet in nyc3 with the foobar tag",
      "resource \"digitalocean_droplet\" \"web\" {",
      "  image  = \"ubuntu-16-04-x64\"",
      "  name   = \"web-1\"",
      "  region = \"nyc3\"",
      "  size   = \"s-1vcpu-1gb\"",
      "  tags   = [\"${digitalocean_tag.foobar.id}\"]",
      "}"
    ]
  },
  "digitalocean-resource-volume": {
    "description": "Defines volume",
    "prefix": "tf-digitalocean-resource-volume",
    "body": [
      "resource \"digitalocean_volume\" \"foobar\" {",
      "  region      = \"nyc1\"",
      "  name        = \"baz\"",
      "  size        = 100",
      "  description = \"an example volume\"",
      "}",
      "",
      "resource \"digitalocean_droplet\" \"foobar\" {",
      "  name       = \"baz\"",
      "  size       = \"s-1vcpu-1gb\"",
      "  image      = \"coreos-stable\"",
      "  region     = \"nyc1\"",
      "  volume_ids = [\"${digitalocean_volume.foobar.id}\"]",
      "}"
    ]
  },
  "dme-resource-record": {
    "description": "Defines record",
    "prefix": "tf-dme-resource-record",
    "body": [
      "# Add an A record to the domain",
      "resource \"dme_record\" \"www\" {",
      "  domainid    = \"123456\"",
      "  name        = \"www\"",
      "  type        = \"A\"",
      "  value       = \"192.168.1.1\"",
      "  ttl         = 3600",
      "  gtdLocation = \"DEFAULT\"",
      "}"
    ]
  },
  "dns-data-dns_a_record_set": {
    "description": "Defines dns_a_record_set",
    "prefix": "tf-dns-data-dns_a_record_set",
    "body": [
      "data \"dns_a_record_set\" \"google\" {",
      "  host = \"google.com\"",
      "}",
      "",
      "output \"google_addrs\" {",
      "  value = \"${join(\",\", data.dns_a_record_set.google.addrs)}\"",
      "}"
    ]
  },
  "dns-data-dns_aaaa_record_set": {
    "description": "Defines dns_aaaa_record_set",
    "prefix": "tf-dns-data-dns_aaaa_record_set",
    "body": [
      "data \"dns_aaaa_record_set\" \"google\" {",
      "  host = \"google.com\"",
      "}",
      "",
      "output \"google_addrs\" {",
      "  value = \"${join(\",\", data.dns_aaaa_record_set.google.addrs)}\"",
      "}"
    ]
  },
  "dns-data-dns_cname_record_set": {
    "description": "Defines dns_cname_record_set",
    "prefix": "tf-dns-data-dns_cname_record_set",
    "body": [
      "data \"dns_cname_record_set\" \"hashicorp\" {",
      "  host = \"www.hashicorp.com\"",
      "}",
      "",
      "output \"hashi_cname\" {",
      "  value = \"${data.dns_cname_record_set.hashi.cname}\"",
      "}"
    ]
  },
  "dns-data-dns_ns_record_set": {
    "description": "Defines dns_ns_record_set",
    "prefix": "tf-dns-data-dns_ns_record_set",
    "body": [
      "data \"dns_ns_record_set\" \"google\" {",
      "  host = \"google.com\"",
      "}",
      "",
      "output \"google_nameservers\" {",
      "  value = \"${join(\",\", data.dns_ns_record_set.google.nameservers)}\"",
      "}"
    ]
  },
  "dns-data-dns_ptr_record_set": {
    "description": "Defines dns_ptr_record_set",
    "prefix": "tf-dns-data-dns_ptr_record_set",
    "body": [
      "data \"dns_ptr_record_set\" \"hashicorp\" {",
      "  ip_address = \"8.8.8.8\"",
      "}",
      "",
      "output \"hashi_ptr\" {",
      "  value = \"${data.dns_ptr_record_set.hashicorp.ptr}\"",
      "}"
    ]
  },
  "dns-data-dns_txt_record_set": {
    "description": "Defines dns_txt_record_set",
    "prefix": "tf-dns-data-dns_txt_record_set",
    "body": [
      "data \"dns_txt_record_set\" \"hashicorp\" {",
      "  host = \"www.hashicorp.com\"",
      "}",
      "",
      "output \"hashi_txt\" {",
      "  value = \"${data.dns_txt_record_set.hashi.record}\"",
      "}",
      "",
      "output \"hashi_txts\" {",
      "  value = \"${join(\",\", data.dns_txt_record_set.hashi.records})\"",
      "}"
    ]
  },
  "dns-resource-dns_a_record_set": {
    "description": "Defines dns_a_record_set",
    "prefix": "tf-dns-resource-dns_a_record_set",
    "body": [
      "resource \"dns_a_record_set\" \"www\" {",
      "  zone = \"example.com.\"",
      "  name = \"www\"",
      "  addresses = [",
      "    \"192.168.0.1\",",
      "    \"192.168.0.2\",",
      "    \"192.168.0.3\",",
      "  ]",
      "  ttl = 300",
      "}"
    ]
  },
  "dns-resource-dns_aaaa_record_set": {
    "description": "Defines dns_aaaa_record_set",
    "prefix": "tf-dns-resource-dns_aaaa_record_set",
    "body": [
      "resource \"dns_aaaa_record_set\" \"www\" {",
      "  zone = \"example.com.\"",
      "  name = \"www\"",
      "  addresses = [",
      "    \"fdd5:e282:43b8:5303:dead:beef:cafe:babe\",",
      "    \"fdd5:e282:43b8:5303:cafe:babe:dead:beef\",",
      "  ]",
      "  ttl = 300",
      "}"
    ]
  },
  "dns-resource-dns_cname_record": {
    "description": "Defines dns_cname_record",
    "prefix": "tf-dns-resource-dns_cname_record",
    "body": [
      "resource \"dns_cname_record\" \"foo\" {",
      "  zone  = \"example.com.\"",
      "  name  = \"foo\"",
      "  cname = \"bar.example.com.\"",
      "  ttl   = 300",
      "}"
    ]
  },
  "dns-resource-dns_ns_record_set": {
    "description": "Defines dns_ns_record_set",
    "prefix": "tf-dns-resource-dns_ns_record_set",
    "body": [
      "resource \"dns_ns_record_set\" \"www\" {",
      "  zone = \"example.com.\"",
      "  name = \"www\"",
      "  nameservers = [",
      "    \"a.iana-servers.net.\",",
      "    \"b.iana-servers.net.\",",
      "  ]",
      "  ttl = 300",
      "}"
    ]
  },
  "dns-resource-dns_ptr_record": {
    "description": "Defines dns_ptr_record",
    "prefix": "tf-dns-resource-dns_ptr_record",
    "body": [
      "resource \"dns_ptr_record\" \"dns-sd\" {",
      "  zone = \"example.com.\"",
      "  name = \"r._dns-sd\"",
      "  ptr  = \"example.com.\"",
      "  ttl  = 300",
      "}"
    ]
  },
  "dnsimple-resource-record": {
    "description": "Defines record",
    "prefix": "tf-dnsimple-resource-record",
    "body": [
      "# Add a record to the root domain",
      "resource \"dnsimple_record\" \"foobar\" {",
      "  domain = \"${var.dnsimple_domain}\"",
      "  name   = \"\"",
      "  value  = \"192.168.0.11\"",
      "  type   = \"A\"",
      "  ttl    = 3600",
      "}"
    ]
  },
  "docker-data-registry_image": {
    "description": "Defines registry_image",
    "prefix": "tf-docker-data-registry_image",
    "body": [
      "data \"docker_registry_image\" \"ubuntu\" {",
      "  name = \"ubuntu:precise\"",
      "}",
      "",
      "resource \"docker_image\" \"ubuntu\" {",
      "  name          = \"${data.docker_registry_image.ubuntu.name}\"",
      "  pull_triggers = [\"${data.docker_registry_image.ubuntu.sha256_digest}\"]",
      "}"
    ]
  },
  "docker-resource-container": {
    "description": "Defines container",
    "prefix": "tf-docker-resource-container",
    "body": [
      "# Start a container",
      "resource \"docker_container\" \"ubuntu\" {",
      "  name  = \"foo\"",
      "  image = \"${docker_image.ubuntu.latest}\"",
      "}",
      "",
      "# Find the latest Ubuntu precise image.",
      "resource \"docker_image\" \"ubuntu\" {",
      "  name = \"ubuntu:precise\"",
      "}"
    ]
  },
  "docker-resource-image": {
    "description": "Defines image",
    "prefix": "tf-docker-resource-image",
    "body": [
      "# Find the latest Ubuntu precise image.",
      "resource \"docker_image\" \"ubuntu\" {",
      "  name = \"ubuntu:precise\"",
      "}",
      "",
      "# Access it somewhere else with ${docker_image.ubuntu.latest}",
      ""
    ]
  },
  "docker-resource-network": {
    "description": "Defines network",
    "prefix": "tf-docker-resource-network",
    "body": [
      "# Create a new docker network",
      "resource \"docker_network\" \"private_network\" {",
      "  name = \"my_network\"",
      "}",
      "",
      "# Access it somewhere else with ${docker_network.private_network.name}",
      ""
    ]
  },
  "docker-resource-volume": {
    "description": "Defines volume",
    "prefix": "tf-docker-resource-volume",
    "body": [
      "# Creates a docker volume \"shared_volume\".",
      "resource \"docker_volume\" \"shared_volume\" {",
      "  name = \"shared_volume\"",
      "}",
      "",
      "# Reference the volume with ${docker_volume.shared_volume.name}",
      ""
    ]
  },
  "dyn-resource-record": {
    "description": "Defines record",
    "prefix": "tf-dyn-resource-record",
    "body": [
      "# Add a record to the domain",
      "resource \"dyn_record\" \"foobar\" {",
      "  zone  = \"${var.dyn_zone}\"",
      "  name  = \"terraform\"",
      "  value = \"192.168.0.11\"",
      "  type  = \"A\"",
      "  ttl   = 3600",
      "}"
    ]
  },
  "fastly-data-ip_ranges": {
    "description": "Defines ip_ranges",
    "prefix": "tf-fastly-data-ip_ranges",
    "body": [
      "data \"fastly_ip_ranges\" \"fastly\" {}",
      "",
      "resource \"aws_security_group\" \"from_fastly\" {",
      "  name = \"from_fastly\"",
      "",
      "  ingress {",
      "    from_port   = \"443\"",
      "    to_port     = \"443\"",
      "    protocol    = \"tcp\"",
      "    cidr_blocks = [\"${data.fastly_ip_ranges.fastly.cidr_blocks}\"]",
      "  }",
      "}"
    ]
  },
  "fastly-resource-service_v1": {
    "description": "Defines service_v1",
    "prefix": "tf-fastly-resource-service_v1",
    "body": [
      "resource \"fastly_service_v1\" \"demo\" {",
      "  name = \"demofastly\"",
      "",
      "  domain {",
      "    name    = \"demo.notexample.com\"",
      "    comment = \"demo\"",
      "  }",
      "",
      "  backend {",
      "    address = \"127.0.0.1\"",
      "    name    = \"localhost\"",
      "    port    = 80",
      "  }",
      "",
      "  force_destroy = true",
      "}"
    ]
  },
  "github-data-ip_ranges": {
    "description": "Defines ip_ranges",
    "prefix": "tf-github-data-ip_ranges",
    "body": [
      "data \"github_ip_ranges\" \"test\" {}"
    ]
  },
  "github-data-team": {
    "description": "Defines team",
    "prefix": "tf-github-data-team",
    "body": [
      "data \"github_team\" \"example\" {",
      "  slug = \"example\"",
      "}"
    ]
  },
  "github-data-user": {
    "description": "Defines user",
    "prefix": "tf-github-data-user",
    "body": [
      "data \"github_user\" \"example\" {",
      "  username = \"example\"",
      "}"
    ]
  },
  "github-resource-branch_protection": {
    "description": "Defines branch_protection",
    "prefix": "tf-github-resource-branch_protection",
    "body": [
      "# Protect the master branch of the foo repository. Additionally, require that",
      "# the \"ci/travis\" context to be passing and only allow the engineers team merge",
      "# to the branch.",
      "resource \"github_branch_protection\" \"foo_master\" {",
      "  repository = \"foo\"",
      "  branch = \"master\"",
      "  enforce_admins = true",
      "",
      "  required_status_checks {",
      "    strict = false",
      "    contexts = [\"ci/travis\"]",
      "  }",
      "",
      "  required_pull_request_reviews {",
      "    dismiss_stale_reviews = true",
      "    dismissal_users = [\"foo-user\"]",
      "    dismissal_teams = [\"admins\", \"engineers\"]",
      "  }",
      "",
      "  restrictions {",
      "    users = [\"foo-user\"]",
      "    teams = [\"engineers\"]",
      "  }",
      "}"
    ]
  },
  "github-resource-issue_label": {
    "description": "Defines issue_label",
    "prefix": "tf-github-resource-issue_label",
    "body": [
      "# Create a new, red colored label",
      "resource \"github_issue_label\" \"test_repo\" {",
      "  repository = \"test-repo\"",
      "  name       = \"Urgent\"",
      "  color      = \"FF0000\"",
      "}"
    ]
  },
  "github-resource-membership": {
    "description": "Defines membership",
    "prefix": "tf-github-resource-membership",
    "body": [
      "# Add a user to the organization",
      "resource \"github_membership\" \"membership_for_some_user\" {",
      "  username = \"SomeUser\"",
      "  role     = \"member\"",
      "}"
    ]
  },
  "github-resource-organization_webhook": {
    "description": "Defines organization_webhook",
    "prefix": "tf-github-resource-organization_webhook",
    "body": [
      "resource \"github_organization_webhook\" \"foo\" {",
      "  name = \"web\"",
      "",
      "  configuration {",
      "    url          = \"https://google.de/\"",
      "    content_type = \"form\"",
      "    insecure_ssl = false",
      "  }",
      "",
      "  active = false",
      "",
      "  events = [\"issues\"]",
      "}"
    ]
  },
  "github-resource-repository": {
    "description": "Defines repository",
    "prefix": "tf-github-resource-repository",
    "body": [
      "resource \"github_repository\" \"example\" {",
      "  name        = \"example\"",
      "  description = \"My awesome codebase\"",
      "",
      "  private = true",
      "}"
    ]
  },
  "github-resource-repository_collaborator": {
    "description": "Defines repository_collaborator",
    "prefix": "tf-github-resource-repository_collaborator",
    "body": [
      "# Add a collaborator to a repository",
      "resource \"github_repository_collaborator\" \"a_repo_collaborator\" {",
      "  repository = \"our-cool-repo\"",
      "  username   = \"SomeUser\"",
      "  permission = \"admin\"",
      "}"
    ]
  },
  "github-resource-repository_deploy_key": {
    "description": "Defines repository_deploy_key",
    "prefix": "tf-github-resource-repository_deploy_key",
    "body": [
      "# Add a deploy key",
      "resource \"github_repository_deploy_key\" \"example_repository_deploy_key\" {",
      " \ttitle = \"Repository test key\"",
      "\trepository = \"test-repo\"",
      "\tkey = \"ssh-rsa AAA...\"",
      "\tread_only = \"false\"",
      "}"
    ]
  },
  "github-resource-repository_webhook": {
    "description": "Defines repository_webhook",
    "prefix": "tf-github-resource-repository_webhook",
    "body": [
      "resource \"github_repository\" \"repo\" {",
      "  name         = \"foo\"",
      "  description  = \"Terraform acceptance tests\"",
      "  homepage_url = \"http://example.com/\"",
      "",
      "  private = false",
      "}",
      "",
      "resource \"github_repository_webhook\" \"foo\" {",
      "  repository = \"${github_repository.repo.name}\"",
      "",
      "  name = \"web\"",
      "",
      "  configuration {",
      "    url          = \"https://google.de/\"",
      "    content_type = \"form\"",
      "    insecure_ssl = false",
      "  }",
      "",
      "  active = false",
      "",
      "  events = [\"issues\"]",
      "}"
    ]
  },
  "github-resource-team": {
    "description": "Defines team",
    "prefix": "tf-github-resource-team",
    "body": [
      "# Add a team to the organization",
      "resource \"github_team\" \"some_team\" {",
      "  name        = \"some-team\"",
      "  description = \"Some cool team\"",
      "  privacy     = \"closed\"",
      "}"
    ]
  },
  "github-resource-team_membership": {
    "description": "Defines team_membership",
    "prefix": "tf-github-resource-team_membership",
    "body": [
      "# Add a user to the organization",
      "resource \"github_membership\" \"membership_for_some_user\" {",
      "  username = \"SomeUser\"",
      "  role     = \"member\"",
      "}",
      "",
      "resource \"github_team\" \"some_team\" {",
      "  name        = \"SomeTeam\"",
      "  description = \"Some cool team\"",
      "}",
      "",
      "resource \"github_team_membership\" \"some_team_membership\" {",
      "  team_id  = \"${github_team.some_team.id}\"",
      "  username = \"SomeUser\"",
      "  role     = \"member\"",
      "}"
    ]
  },
  "github-resource-team_repository": {
    "description": "Defines team_repository",
    "prefix": "tf-github-resource-team_repository",
    "body": [
      "# Add a repository to the team",
      "resource \"github_team\" \"some_team\" {",
      "  name        = \"SomeTeam\"",
      "  description = \"Some cool team\"",
      "}",
      "",
      "resource \"github_repository\" \"some_repo\" {",
      "  name = \"some-repo\"",
      "}",
      "",
      "resource \"github_team_repository\" \"some_team_repo\" {",
      "  team_id    = \"${github_team.some_team.id}\"",
      "  repository = \"${github_repository.some_repo.name}\"",
      "  permission = \"pull\"",
      "}"
    ]
  },
  "gitlab-resource-deploy_key": {
    "description": "Defines deploy_key",
    "prefix": "tf-gitlab-resource-deploy_key",
    "body": [
      "resource \"gitlab_deploy_key\" \"example\" {",
      "  project = \"example/deploying\"",
      "  title   = \"Example deploy key\"",
      "  key     = \"ssh-rsa AAAA...\"",
      "}"
    ]
  },
  "gitlab-resource-group": {
    "description": "Defines group",
    "prefix": "tf-gitlab-resource-group",
    "body": [
      "resource \"gitlab_group\" \"example\" {",
      "  name        = \"example\"",
      "  path        = \"example\"",
      "  description = \"An example group\"",
      "}",
      "",
      "// Create a project in the example group",
      "resource \"gitlab_project\" \"example\" {",
      "  name         = \"example\"",
      "  description  = \"An example project\"",
      "  namespace_id = \"${gitlab_group.example.id}\"",
      "}"
    ]
  },
  "gitlab-resource-label": {
    "description": "Defines label",
    "prefix": "tf-gitlab-resource-label",
    "body": [
      "resource \"gitlab_label\" \"fixme\" {",
      "  project     = \"example\"",
      "  name        = \"fixme\"",
      "  description = \"issue with failing tests\"",
      "  color       = \"#ffcc00\"",
      "}"
    ]
  },
  "gitlab-resource-project": {
    "description": "Defines project",
    "prefix": "tf-gitlab-resource-project",
    "body": [
      "resource \"gitlab_project\" \"example\" {",
      "  name        = \"example\"",
      "  description = \"My awesome codebase\"",
      "",
      "  visibility_level = \"public\"",
      "}"
    ]
  },
  "gitlab-resource-project_hook": {
    "description": "Defines project_hook",
    "prefix": "tf-gitlab-resource-project_hook",
    "body": [
      "resource \"gitlab_project_hook\" \"example\" {",
      "  project               = \"example/hooked\"",
      "  url                   = \"https://example.com/hook/example\"",
      "  merge_requests_events = true",
      "}"
    ]
  },
  "gitlab-resource-user": {
    "description": "Defines user",
    "prefix": "tf-gitlab-resource-user",
    "body": [
      "resource \"gitlab_user\" \"example\" {",
      "  name             = \"Example Foo\"",
      "  username         = \"example\"",
      "  password         = \"superPassword\"",
      "  email            = \"gitlab@user.create\"",
      "  is_admin         = true",
      "  projects_limit   = 4",
      "  can_create_group = false",
      "}"
    ]
  },
  "google-data-datasource_client_config": {
    "description": "Defines datasource_client_config",
    "prefix": "tf-google-data-datasource_client_config",
    "body": [
      "data \"google_client_config\" \"current\" {}",
      "",
      "output \"project\" {",
      "  value = \"${data.google_client_config.current.project}\"",
      "}"
    ]
  },
  "google-data-datasource_cloudfunctions_function": {
    "description": "Defines datasource_cloudfunctions_function",
    "prefix": "tf-google-data-datasource_cloudfunctions_function",
    "body": [
      "data \"google_cloudfunctions_function\" \"my-function\" {",
      "  name = \"function\"",
      "}"
    ]
  },
  "google-data-datasource_compute_address": {
    "description": "Defines datasource_compute_address",
    "prefix": "tf-google-data-datasource_compute_address",
    "body": [
      "data \"google_compute_address\" \"my_address\" {",
      "  name = \"foobar\"",
      "}",
      "",
      "resource \"google_dns_record_set\" \"frontend\" {",
      "  name = \"frontend.${google_dns_managed_zone.prod.dns_name}\"",
      "  type = \"A\"",
      "  ttl  = 300",
      "",
      "  managed_zone = \"${google_dns_managed_zone.prod.name}\"",
      "",
      "  rrdatas = [\"${data.google_compute_address.my_address.address}\"]",
      "}",
      "",
      "resource \"google_dns_managed_zone\" \"prod\" {",
      "  name     = \"prod-zone\"",
      "  dns_name = \"prod.mydomain.com.\"",
      "}"
    ]
  },
  "google-data-datasource_compute_forwarding_rule": {
    "description": "Defines datasource_compute_forwarding_rule",
    "prefix": "tf-google-data-datasource_compute_forwarding_rule",
    "body": [
      "data \"google_compute_forwarding_rule\" \"my-forwarding-rule\" {",
      "  name = \"forwarding-rule-us-east1\"",
      "}"
    ]
  },
  "google-data-datasource_compute_global_address": {
    "description": "Defines datasource_compute_global_address",
    "prefix": "tf-google-data-datasource_compute_global_address",
    "body": [
      "data \"google_compute_global_address\" \"my_address\" {",
      "  name = \"foobar\"",
      "}",
      "",
      "resource \"google_dns_record_set\" \"frontend\" {",
      "  name = \"lb.${google_dns_managed_zone.prod.dns_name}\"",
      "  type = \"A\"",
      "  ttl  = 300",
      "",
      "  managed_zone = \"${google_dns_managed_zone.prod.name}\"",
      "",
      "  rrdatas = [\"${data.google_compute_global_address.my_address.address}\"]",
      "}",
      "",
      "resource \"google_dns_managed_zone\" \"prod\" {",
      "  name     = \"prod-zone\"",
      "  dns_name = \"prod.mydomain.com.\"",
      "}"
    ]
  },
  "google-data-datasource_compute_image": {
    "description": "Defines datasource_compute_image",
    "prefix": "tf-google-data-datasource_compute_image",
    "body": [
      "data \"google_compute_image\" \"my_image\" {",
      "  name    = \"debian-9\"",
      "  project = \"debian-cloud\"",
      "}",
      "",
      "resource \"google_compute_instance\" \"default\" {",
      "  # ...",
      "",
      "  boot_disk {",
      "    initialize_params {",
      "      image = \"${data.google_compute_image.my_image.self_link}\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "google-data-datasource_compute_lb_ip_ranges": {
    "description": "Defines datasource_compute_lb_ip_ranges",
    "prefix": "tf-google-data-datasource_compute_lb_ip_ranges",
    "body": [
      "data \"google_compute_lb_ip_ranges\" \"ranges\" {}",
      "",
      "resource \"google_compute_firewall\" \"lb\" {",
      "  name    = \"lb-firewall\"",
      "  network = \"${google_compute_network.main.name}\"",
      "",
      "  allow {",
      "    protocol = \"tcp\"",
      "    ports    = [\"80\"]",
      "  }",
      "",
      "  source_ranges = [\"${data.google_compute_lb_ip_ranges.ranges.network}\"]",
      "  target_tags = [",
      "    \"InstanceBehindLoadBalancer\"",
      "  ]",
      "}"
    ]
  },
  "google-data-datasource_compute_network": {
    "description": "Defines datasource_compute_network",
    "prefix": "tf-google-data-datasource_compute_network",
    "body": [
      "data \"google_compute_network\" \"my-network\" {",
      "  name = \"default-us-east1\"",
      "}"
    ]
  },
  "google-data-datasource_compute_region_instance_group": {
    "description": "Defines datasource_compute_region_instance_group",
    "prefix": "tf-google-data-datasource_compute_region_instance_group",
    "body": [
      "data \"google_compute_region_instance_group\" \"group\" {",
      "\tname = \"instance-group-name\"",
      "}"
    ]
  },
  "google-data-datasource_compute_ssl_policy": {
    "description": "Defines datasource_compute_ssl_policy",
    "prefix": "tf-google-data-datasource_compute_ssl_policy",
    "body": [
      "data \"google_compute_ssl_policy\" \"my-ssl-policy\" {",
      "  name = \"production-ssl-policy\"",
      "}"
    ]
  },
  "google-data-datasource_compute_subnetwork": {
    "description": "Defines datasource_compute_subnetwork",
    "prefix": "tf-google-data-datasource_compute_subnetwork",
    "body": [
      "data \"google_compute_subnetwork\" \"my-subnetwork\" {",
      "  name   = \"default-us-east1\"",
      "  region = \"us-east1\"",
      "}"
    ]
  },
  "google-data-datasource_compute_vpn_gateway": {
    "description": "Defines datasource_compute_vpn_gateway",
    "prefix": "tf-google-data-datasource_compute_vpn_gateway",
    "body": [
      "data \"google_compute_vpn_gateway\" \"my-vpn-gateway\" {",
      "  name = \"vpn-gateway-us-east1\"",
      "}"
    ]
  },
  "google-data-datasource_google_compute_backend_service": {
    "description": "Defines datasource_google_compute_backend_service",
    "prefix": "tf-google-data-datasource_google_compute_backend_service",
    "body": [
      "data \"google_compute_backend_service\" \"baz\" {",
      "  name = \"foobar\"",
      "}"
    ]
  },
  "google-data-dns_managed_zone": {
    "description": "Defines dns_managed_zone",
    "prefix": "tf-google-data-dns_managed_zone",
    "body": [
      "data \"google_dns_managed_zone\" \"env_dns_zone\" {",
      "  name        = \"qa-zone\"",
      "}",
      "",
      "resource \"google_dns_record_set\" \"dns\" {",
      "  name = \"my-address.${data.google_dns_managed_zone.env_dns_zone.dns_name}\"",
      "  type = \"TXT\"",
      "  ttl  = 300",
      "",
      "  managed_zone = \"${data.google_dns_managed_zone.env_dns_zone.name}\"",
      "",
      "  rrdatas = [\"test\"]",
      "}"
    ]
  },
  "google-data-google_active_folder": {
    "description": "Defines google_active_folder",
    "prefix": "tf-google-data-google_active_folder",
    "body": [
      "data \"google_active_folder\" \"department1\" {",
      "  display_name = \"Department 1\"",
      "  parent = \"organizations/1234567\"",
      "}"
    ]
  },
  "google-data-google_billing_account": {
    "description": "Defines google_billing_account",
    "prefix": "tf-google-data-google_billing_account",
    "body": [
      "data \"google_billing_account\" \"acct\" {",
      "  display_name = \"My Billing Account\"",
      "  open         = true",
      "}",
      "",
      "resource \"google_project\" \"my_project\" {",
      "  name       = \"My Project\"",
      "  project_id = \"your-project-id\"",
      "  org_id     = \"1234567\"",
      "",
      "  billing_account = \"${data.google_billing_account.acct.id}\"",
      "}"
    ]
  },
  "google-data-google_compute_default_service_account": {
    "description": "Defines google_compute_default_service_account",
    "prefix": "tf-google-data-google_compute_default_service_account",
    "body": [
      "data \"google_compute_default_service_account\" \"default\" { }",
      "",
      "output \"default_account\" {",
      "  value = \"${data.google_compute_default_service_account.default.email}\"",
      "} "
    ]
  },
  "google-data-google_compute_instance_group": {
    "description": "Defines google_compute_instance_group",
    "prefix": "tf-google-data-google_compute_instance_group",
    "body": [
      "data \"google_compute_instance_group\" \"all\" {",
      "\tname = \"instance-group-name\"",
      "\tzone = \"us-central1-a\"",
      "}"
    ]
  },
  "google-data-google_compute_zones": {
    "description": "Defines google_compute_zones",
    "prefix": "tf-google-data-google_compute_zones",
    "body": [
      "data \"google_compute_zones\" \"available\" {}",
      "",
      "resource \"google_compute_instance_group_manager\" \"foo\" {",
      "  count = \"${length(data.google_compute_zones.available.names)}\"",
      "",
      "  name               = \"terraform-test-${count.index}\"",
      "  instance_template  = \"${google_compute_instance_template.foobar.self_link}\"",
      "  base_instance_name = \"foobar-${count.index}\"",
      "  zone               = \"${data.google_compute_zones.available.names[count.index]}\"",
      "  target_size        = 1",
      "}"
    ]
  },
  "google-data-google_container_cluster": {
    "description": "Defines google_container_cluster",
    "prefix": "tf-google-data-google_container_cluster",
    "body": [
      "data \"google_container_cluster\" \"my_cluster\" {",
      "  name   = \"my-cluster\"",
      "  zone   = \"us-east1-a\"",
      "}",
      "",
      "output \"cluster_username\" {",
      "  value = \"${data.google_container_cluster.my_cluster.master_auth.0.username}\"",
      "}",
      "",
      "output \"cluster_password\" {",
      "  value = \"${data.google_container_cluster.my_cluster.master_auth.0.password}\"",
      "}",
      "",
      "output \"endpoint\" {",
      "  value = \"${data.google_container_cluster.my_cluster.endpoint}\"",
      "}",
      "",
      "output \"instance_group_urls\" {",
      "  value = \"${data.google_container_cluster.my_cluster.instance_group_urls}\"",
      "}",
      "",
      "output \"node_config\" {",
      "  value = \"${data.google_container_cluster.my_cluster.node_config}\"",
      "}",
      "",
      "output \"node_pools\" {",
      "  value = \"${data.google_container_cluster.my_cluster.node_pool}\"",
      "}"
    ]
  },
  "google-data-google_container_engine_versions": {
    "description": "Defines google_container_engine_versions",
    "prefix": "tf-google-data-google_container_engine_versions",
    "body": [
      "data \"google_container_engine_versions\" \"central1b\" {",
      "  zone = \"us-central1-b\"",
      "}",
      "",
      "resource \"google_container_cluster\" \"foo\" {",
      "  name               = \"terraform-test-cluster\"",
      "  zone               = \"us-central1-b\"",
      "  node_version       = \"${data.google_container_engine_versions.central1b.latest_node_version}\"",
      "  initial_node_count = 1",
      "",
      "  master_auth {",
      "    username = \"mr.yoda\"",
      "    password = \"adoy.rm\"",
      "  }",
      "}"
    ]
  },
  "google-data-google_container_registry_image": {
    "description": "Defines google_container_registry_image",
    "prefix": "tf-google-data-google_container_registry_image",
    "body": [
      "data \"google_container_registry_image\" \"debian\" {",
      "    name = \"debian\"",
      "}",
      "",
      "output \"gcr_location\" {",
      "    value = \"${data.google_container_registry_image.debian.image_url}\"",
      "}"
    ]
  },
  "google-data-google_container_registry_repository": {
    "description": "Defines google_container_registry_repository",
    "prefix": "tf-google-data-google_container_registry_repository",
    "body": [
      "data \"google_container_registry_repository\" \"foo\" {}",
      "",
      "output \"gcr_location\" {",
      "    value = \"${data.google_container_registry_repository.foo.repository_url}\"",
      "}"
    ]
  },
  "google-data-google_folder": {
    "description": "Defines google_folder",
    "prefix": "tf-google-data-google_folder",
    "body": [
      "# Get folder by id",
      "data \"google_folder\" \"my_folder_1\" {",
      "  folder = \"folders/12345\"",
      "  lookup_organization = true",
      "}",
      "",
      "# Search by fields",
      "data \"google_folder\" \"my_folder_2\" {",
      "  folder = \"folders/23456\"",
      "}",
      "",
      "output \"my_folder_1_organization\" {",
      "  value = \"${data.google_folder.my_folder_1.organization}\"",
      "}",
      "",
      "output \"my_folder_2_parent\" {",
      "  value = \"${data.google_folder.my_folder_2.parent}\"",
      "}",
      ""
    ]
  },
  "google-data-google_iam_policy": {
    "description": "Defines google_iam_policy",
    "prefix": "tf-google-data-google_iam_policy",
    "body": [
      "data \"google_iam_policy\" \"admin\" {",
      "  binding {",
      "    role = \"roles/compute.instanceAdmin\"",
      "",
      "    members = [",
      "      \"serviceAccount:your-custom-sa@your-project.iam.gserviceaccount.com\",",
      "    ]",
      "  }",
      "",
      "  binding {",
      "    role = \"roles/storage.objectViewer\"",
      "",
      "    members = [",
      "      \"user:jane@example.com\",",
      "    ]",
      "  }",
      "}"
    ]
  },
  "google-data-google_kms_secret": {
    "description": "Defines google_kms_secret",
    "prefix": "tf-google-data-google_kms_secret",
    "body": [
      "resource \"google_kms_key_ring\" \"my_key_ring\" {",
      "  project  = \"my-project\"",
      "  name     = \"my-key-ring\"",
      "  location = \"us-central1\"",
      "}",
      "",
      "resource \"google_kms_crypto_key\" \"my_crypto_key\" {",
      "  name     = \"my-crypto-key\"",
      "  key_ring = \"${google_kms_key_ring.my_key_ring.id}\"",
      "}"
    ]
  },
  "google-data-google_organization": {
    "description": "Defines google_organization",
    "prefix": "tf-google-data-google_organization",
    "body": [
      "data \"google_organization\" \"org\" {",
      "  domain = \"example.com\"",
      "}",
      "",
      "resource \"google_folder\" \"sales\" {",
      "  display_name = \"Sales\"",
      "  parent       = \"${data.google_organization.org.name}\"",
      "}"
    ]
  },
  "google-data-google_project": {
    "description": "Defines google_project",
    "prefix": "tf-google-data-google_project",
    "body": [
      "data \"google_project\" \"project\" {}",
      "",
      "output \"project_number\" {",
      "  value = \"${data.google_project.project.number}\"",
      "} "
    ]
  },
  "google-data-google_storage_project_service_account": {
    "description": "Defines google_storage_project_service_account",
    "prefix": "tf-google-data-google_storage_project_service_account",
    "body": [
      "data \"google_storage_project_service_account\" \"gcs_account\" {}",
      "",
      "resource \"google_pubsub_topic_iam_binding\" \"binding\" {",
      "\ttopic       = \"${google_pubsub_topic.topic.name}\"",
      "\trole        = \"roles/pubsub.publisher\"",
      "\t\t  ",
      "\tmembers     = [\"${data.google_storage_project_service_account.gcs_account.id}\"]",
      "}"
    ]
  },
  "google-data-signed_url": {
    "description": "Defines signed_url",
    "prefix": "tf-google-data-signed_url",
    "body": [
      "data \"google_storage_object_signed_url\" \"artifact\" {",
      "  bucket = \"install_binaries\"",
      "  path   = \"path/to/install_file.bin\"",
      "",
      "}",
      "",
      "resource \"google_compute_instance\" \"vm\" {",
      "    name = \"vm\"",
      "    ...",
      "    ",
      "    provisioner \"remote-exec\" {",
      "        inline = [",
      "                \"wget '${data.google_storage_object_signed_url.artifact.signed_url}' -O install_file.bin\",",
      "                \"chmod +x install_file.bin\",",
      "                \"./install_file.bin\"",
      "                ]",
      "     }",
      "}"
    ]
  },
  "google-resource-bigquery_dataset": {
    "description": "Defines bigquery_dataset",
    "prefix": "tf-google-resource-bigquery_dataset",
    "body": [
      "resource \"google_bigquery_dataset\" \"default\" {",
      "  dataset_id                  = \"foo\"",
      "  friendly_name               = \"test\"",
      "  description                 = \"This is a test description\"",
      "  location                    = \"EU\"",
      "  default_table_expiration_ms = 3600000",
      "",
      "  labels {",
      "    env = \"default\"",
      "  }",
      "}"
    ]
  },
  "google-resource-bigquery_table": {
    "description": "Defines bigquery_table",
    "prefix": "tf-google-resource-bigquery_table",
    "body": [
      "resource \"google_bigquery_dataset\" \"default\" {",
      "  dataset_id                  = \"foo\"",
      "  friendly_name               = \"test\"",
      "  description                 = \"This is a test description\"",
      "  location                    = \"EU\"",
      "  default_table_expiration_ms = 3600000",
      "",
      "  labels {",
      "    env = \"default\"",
      "  }",
      "}",
      "",
      "resource \"google_bigquery_table\" \"default\" {",
      "  dataset_id = \"${google_bigquery_dataset.default.dataset_id}\"",
      "  table_id   = \"bar\"",
      "",
      "  time_partitioning {",
      "    type = \"DAY\"",
      "  }",
      "",
      "  labels {",
      "    env = \"default\"",
      "  }",
      "",
      "  schema = \"${file(\"schema.json\")}\"",
      "}"
    ]
  },
  "google-resource-bigtable_instance": {
    "description": "Defines bigtable_instance",
    "prefix": "tf-google-resource-bigtable_instance",
    "body": [
      "resource \"google_bigtable_instance\" \"instance\" {",
      "  name         = \"tf-instance\"",
      "  cluster_id   = \"tf-instance-cluster\"",
      "  zone         = \"us-central1-b\"",
      "  num_nodes    = 3",
      "  storage_type = \"HDD\"",
      "}"
    ]
  },
  "google-resource-bigtable_table": {
    "description": "Defines bigtable_table",
    "prefix": "tf-google-resource-bigtable_table",
    "body": [
      "resource \"google_bigtable_instance\" \"instance\" {",
      "  name         = \"tf-instance\"",
      "  cluster_id   = \"tf-instance-cluster\"",
      "  zone         = \"us-central1-b\"",
      "  num_nodes    = 3",
      "  storage_type = \"HDD\"",
      "}",
      "",
      "resource \"google_bigtable_table\" \"table\" {",
      "  name          = \"tf-table\"",
      "  instance_name = \"${google_bigtable_instance.instance.name}\"",
      "  split_keys    = [\"a\", \"b\", \"c\"]",
      "}"
    ]
  },
  "google-resource-cloudbuild_trigger": {
    "description": "Defines cloudbuild_trigger",
    "prefix": "tf-google-resource-cloudbuild_trigger",
    "body": [
      "resource \"google_cloudbuild_trigger\" \"build_trigger\" {",
      "  project  = \"my-project\"",
      "  trigger_template {",
      "    branch_name = \"master\"",
      "    project     = \"my-project\"",
      "    repo_name   = \"some-repo\"",
      "  }",
      "  build {",
      "    images = [\"gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA\"]",
      "    step {",
      "      name = \"gcr.io/cloud-builders/docker\"",
      "      args = \"build -t gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA -f Dockerfile .\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "google-resource-cloudfunctions_function": {
    "description": "Defines cloudfunctions_function",
    "prefix": "tf-google-resource-cloudfunctions_function",
    "body": [
      "resource \"google_storage_bucket\" \"bucket\" {",
      "  name = \"test-bucket\"",
      "}",
      "",
      "resource \"google_storage_bucket_object\" \"archive\" {",
      "  name   = \"index.zip\"",
      "  bucket = \"${google_storage_bucket.bucket.name}\"",
      "  source = \"./path/to/zip/file/which/contains/code\"",
      "}",
      "",
      "resource \"google_cloudfunctions_function\" \"function\" {",
      "  name                  = \"function-test\"",
      "  description           = \"My function\"",
      "  available_memory_mb   = 128",
      "  source_archive_bucket = \"${google_storage_bucket.bucket.name}\"",
      "  source_archive_object = \"${google_storage_bucket_object.archive.name}\"",
      "  trigger_http          = true",
      "  timeout               = 60",
      "  entry_point           = \"helloGET\"",
      "  labels {",
      "    my-label = \"my-label-value\"",
      "  }",
      "}"
    ]
  },
  "google-resource-cloudiot_registry": {
    "description": "Defines cloudiot_registry",
    "prefix": "tf-google-resource-cloudiot_registry",
    "body": [
      "resource \"google_pubsub_topic\" \"default-devicestatus\" {",
      "  name = \"default-devicestatus\"",
      "}",
      "",
      "resource \"google_pubsub_topic\" \"default-telemetry\" {",
      "  name = \"default-telemetry\"",
      "}",
      "",
      "resource \"google_cloudiot_registry\" \"default-registry\" {",
      "  name = \"default-registry\"",
      "",
      "  event_notification_config = {",
      "    pubsub_topic_name = \"${google_pubsub_topic.default-devicestatus.id}\"",
      "  }",
      "",
      "  state_notification_config = {",
      "    pubsub_topic_name = \"${google_pubsub_topic.default-telemetry.id}\"",
      "  }",
      "",
      "  http_config = {",
      "    http_enabled_state = \"HTTP_ENABLED\"",
      "  }",
      "",
      "  mqtt_config = {",
      "    mqtt_enabled_state = \"MQTT_ENABLED\"",
      "  }",
      "",
      "  credentials = [",
      "    {",
      "      public_key_certificate = {",
      "        format      = \"X509_CERTIFICATE_PEM\"",
      "        certificate = \"${file(\"rsa_cert.pem\")}\"",
      "      }",
      "    },",
      "  ]",
      "}"
    ]
  },
  "google-resource-compute_address": {
    "description": "Defines compute_address",
    "prefix": "tf-google-resource-compute_address",
    "body": [
      "resource \"google_compute_address\" \"default\" {",
      "  name = \"test-address\"",
      "}"
    ]
  },
  "google-resource-compute_autoscaler": {
    "description": "Defines compute_autoscaler",
    "prefix": "tf-google-resource-compute_autoscaler",
    "body": [
      "resource \"google_compute_instance_template\" \"foobar\" {",
      "  name           = \"foobar\"",
      "  machine_type   = \"n1-standard-1\"",
      "  can_ip_forward = false",
      "",
      "  tags = [\"foo\", \"bar\"]",
      "",
      "  disk {",
      "    source_image = \"debian-cloud/debian-8\"",
      "  }",
      "",
      "  network_interface {",
      "    network = \"default\"",
      "  }",
      "",
      "  metadata {",
      "    foo = \"bar\"",
      "  }",
      "",
      "  service_account {",
      "    scopes = [\"userinfo-email\", \"compute-ro\", \"storage-ro\"]",
      "  }",
      "}",
      "",
      "resource \"google_compute_target_pool\" \"foobar\" {",
      "  name = \"foobar\"",
      "}",
      "",
      "resource \"google_compute_instance_group_manager\" \"foobar\" {",
      "  name = \"foobar\"",
      "  zone = \"us-central1-f\"",
      "",
      "  instance_template  = \"${google_compute_instance_template.foobar.self_link}\"",
      "  target_pools       = [\"${google_compute_target_pool.foobar.self_link}\"]",
      "  base_instance_name = \"foobar\"",
      "}",
      "",
      "resource \"google_compute_autoscaler\" \"foobar\" {",
      "  name   = \"scaler\"",
      "  zone   = \"us-central1-f\"",
      "  target = \"${google_compute_instance_group_manager.foobar.self_link}\"",
      "",
      "  autoscaling_policy = {",
      "    max_replicas    = 5",
      "    min_replicas    = 1",
      "    cooldown_period = 60",
      "",
      "    cpu_utilization {",
      "      target = 0.5",
      "    }",
      "  }",
      "}"
    ]
  },
  "google-resource-compute_backend_bucket": {
    "description": "Defines compute_backend_bucket",
    "prefix": "tf-google-resource-compute_backend_bucket",
    "body": [
      "resource \"google_compute_backend_bucket\" \"image_backend\" {",
      "  name        = \"image-backend-bucket\"",
      "  description = \"Contains beautiful images\"",
      "  bucket_name = \"${google_storage_bucket.image_bucket.name}\"",
      "  enable_cdn  = true",
      "}",
      "",
      "resource \"google_storage_bucket\" \"image_bucket\" {",
      "  name     = \"image-store-bucket\"",
      "  location = \"EU\"",
      "}"
    ]
  },
  "google-resource-compute_backend_service": {
    "description": "Defines compute_backend_service",
    "prefix": "tf-google-resource-compute_backend_service",
    "body": [
      "resource \"google_compute_backend_service\" \"website\" {",
      "  name        = \"my-backend\"",
      "  description = \"Our company website\"",
      "  port_name   = \"http\"",
      "  protocol    = \"HTTP\"",
      "  timeout_sec = 10",
      "  enable_cdn  = false",
      "",
      "  backend {",
      "    group = \"${google_compute_instance_group_manager.webservers.instance_group}\"",
      "  }",
      "",
      "  health_checks = [\"${google_compute_http_health_check.default.self_link}\"]",
      "}",
      "",
      "resource \"google_compute_instance_group_manager\" \"webservers\" {",
      "  name               = \"my-webservers\"",
      "  instance_template  = \"${google_compute_instance_template.webserver.self_link}\"",
      "  base_instance_name = \"webserver\"",
      "  zone               = \"us-central1-f\"",
      "  target_size        = 1",
      "}",
      "",
      "resource \"google_compute_instance_template\" \"webserver\" {",
      "  name         = \"standard-webserver\"",
      "  machine_type = \"n1-standard-1\"",
      "",
      "  network_interface {",
      "    network = \"default\"",
      "  }",
      "",
      "  disk {",
      "    source_image = \"debian-cloud/debian-8\"",
      "    auto_delete  = true",
      "    boot         = true",
      "  }",
      "}",
      "",
      "resource \"google_compute_http_health_check\" \"default\" {",
      "  name               = \"test\"",
      "  request_path       = \"/\"",
      "  check_interval_sec = 1",
      "  timeout_sec        = 1",
      "}"
    ]
  },
  "google-resource-compute_disk": {
    "description": "Defines compute_disk",
    "prefix": "tf-google-resource-compute_disk",
    "body": [
      "resource \"google_compute_disk\" \"default\" {",
      "  name  = \"test-disk\"",
      "  type  = \"pd-ssd\"",
      "  zone  = \"us-central1-a\"",
      "  image = \"debian-8-jessie-v20170523\"",
      "  labels {",
      "    environment = \"dev\"",
      "  }",
      "}"
    ]
  },
  "google-resource-compute_firewall": {
    "description": "Defines compute_firewall",
    "prefix": "tf-google-resource-compute_firewall",
    "body": [
      "resource \"google_compute_firewall\" \"default\" {",
      "  name    = \"test-firewall\"",
      "  network = \"${google_compute_network.other.name}\"",
      "",
      "  allow {",
      "    protocol = \"icmp\"",
      "  }",
      "",
      "  allow {",
      "    protocol = \"tcp\"",
      "    ports    = [\"80\", \"8080\", \"1000-2000\"]",
      "  }",
      "",
      "  source_tags = [\"web\"]",
      "}"
    ]
  },
  "google-resource-compute_forwarding_rule": {
    "description": "Defines compute_forwarding_rule",
    "prefix": "tf-google-resource-compute_forwarding_rule",
    "body": [
      "resource \"google_compute_forwarding_rule\" \"default\" {",
      "  name       = \"website-forwarding-rule\"",
      "  target     = \"${google_compute_target_pool.default.self_link}\"",
      "  port_range = \"80\"",
      "}"
    ]
  },
  "google-resource-compute_global_address": {
    "description": "Defines compute_global_address",
    "prefix": "tf-google-resource-compute_global_address",
    "body": [
      "resource \"google_compute_global_address\" \"default\" {",
      "  name = \"global-appserver-ip\"",
      "}"
    ]
  },
  "google-resource-compute_global_forwarding_rule": {
    "description": "Defines compute_global_forwarding_rule",
    "prefix": "tf-google-resource-compute_global_forwarding_rule",
    "body": [
      "resource \"google_compute_global_forwarding_rule\" \"default\" {",
      "  name       = \"default-rule\"",
      "  target     = \"${google_compute_target_http_proxy.default.self_link}\"",
      "  port_range = \"80\"",
      "}",
      "",
      "resource \"google_compute_target_http_proxy\" \"default\" {",
      "  name        = \"test-proxy\"",
      "  description = \"a description\"",
      "  url_map     = \"${google_compute_url_map.default.self_link}\"",
      "}",
      "",
      "resource \"google_compute_url_map\" \"default\" {",
      "  name            = \"url-map\"",
      "  description     = \"a description\"",
      "  default_service = \"${google_compute_backend_service.default.self_link}\"",
      "",
      "  host_rule {",
      "    hosts        = [\"mysite.com\"]",
      "    path_matcher = \"allpaths\"",
      "  }",
      "",
      "  path_matcher {",
      "    name            = \"allpaths\"",
      "    default_service = \"${google_compute_backend_service.default.self_link}\"",
      "",
      "    path_rule {",
      "      paths   = [\"/*\"]",
      "      service = \"${google_compute_backend_service.default.self_link}\"",
      "    }",
      "  }",
      "}",
      "",
      "resource \"google_compute_backend_service\" \"default\" {",
      "  name        = \"default-backend\"",
      "  port_name   = \"http\"",
      "  protocol    = \"HTTP\"",
      "  timeout_sec = 10",
      "",
      "  health_checks = [\"${google_compute_http_health_check.default.self_link}\"]",
      "}",
      "",
      "resource \"google_compute_http_health_check\" \"default\" {",
      "  name               = \"test\"",
      "  request_path       = \"/\"",
      "  check_interval_sec = 1",
      "  timeout_sec        = 1",
      "}"
    ]
  },
  "google-resource-compute_health_check": {
    "description": "Defines compute_health_check",
    "prefix": "tf-google-resource-compute_health_check",
    "body": [
      "resource \"google_compute_health_check\" \"default\" {",
      "  name = \"internal-service-health-check\"",
      "",
      "  timeout_sec        = 1",
      "  check_interval_sec = 1",
      "",
      "  tcp_health_check {",
      "    port = \"80\"",
      "  }",
      "}"
    ]
  },
  "google-resource-compute_http_health_check": {
    "description": "Defines compute_http_health_check",
    "prefix": "tf-google-resource-compute_http_health_check",
    "body": [
      "resource \"google_compute_http_health_check\" \"default\" {",
      "  name         = \"authentication-health-check\"",
      "  request_path = \"/health_check\"",
      "",
      "  timeout_sec        = 1",
      "  check_interval_sec = 1",
      "}"
    ]
  },
  "google-resource-compute_https_health_check": {
    "description": "Defines compute_https_health_check",
    "prefix": "tf-google-resource-compute_https_health_check",
    "body": [
      "resource \"google_compute_https_health_check\" \"default\" {",
      "  name         = \"test\"",
      "  request_path = \"/health_check\"",
      "",
      "  timeout_sec        = 1",
      "  check_interval_sec = 1",
      "}"
    ]
  },
  "google-resource-compute_image": {
    "description": "Defines compute_image",
    "prefix": "tf-google-resource-compute_image",
    "body": [
      "resource \"google_compute_image\" \"bootable-image\" {",
      "  name = \"my-custom-image\"",
      "",
      "  raw_disk {",
      "    source = \"https://storage.googleapis.com/my-bucket/my-disk-image-tarball.tar.gz\"",
      "  }",
      "}",
      "",
      "resource \"google_compute_instance\" \"vm\" {",
      "  name         = \"vm-from-custom-image\"",
      "  machine_type = \"n1-standard-1\"",
      "  zone         = \"us-east1-c\"",
      "",
      "  boot_disk {",
      "    initialize_params {",
      "      image = \"${google_compute_image.bootable-image.self_link}\"",
      "    }",
      "  }",
      "",
      "  network_interface {",
      "    network = \"default\"",
      "  }",
      "}"
    ]
  },
  "google-resource-compute_instance": {
    "description": "Defines compute_instance",
    "prefix": "tf-google-resource-compute_instance",
    "body": [
      "resource \"google_compute_instance\" \"default\" {",
      "  name         = \"test\"",
      "  machine_type = \"n1-standard-1\"",
      "  zone         = \"us-central1-a\"",
      "",
      "  tags = [\"foo\", \"bar\"]",
      "",
      "  boot_disk {",
      "    initialize_params {",
      "      image = \"debian-cloud/debian-8\"",
      "    }",
      "  }",
      "",
      "  // Local SSD disk",
      "  scratch_disk {",
      "  }",
      "",
      "  network_interface {",
      "    network = \"default\"",
      "",
      "    access_config {",
      "      // Ephemeral IP",
      "    }",
      "  }",
      "",
      "  metadata {",
      "    foo = \"bar\"",
      "  }",
      "",
      "  metadata_startup_script = \"echo hi > /test.txt\"",
      "",
      "  service_account {",
      "    scopes = [\"userinfo-email\", \"compute-ro\", \"storage-ro\"]",
      "  }",
      "}"
    ]
  },
  "google-resource-compute_instance_group": {
    "description": "Defines compute_instance_group",
    "prefix": "tf-google-resource-compute_instance_group",
    "body": [
      "resource \"google_compute_instance_group\" \"test\" {",
      "  name        = \"terraform-test\"",
      "  description = \"Terraform test instance group\"",
      "  zone        = \"us-central1-a\"",
      "  network     = \"${google_compute_network.default.self_link}\"",
      "}"
    ]
  },
  "google-resource-compute_instance_group_manager": {
    "description": "Defines compute_instance_group_manager",
    "prefix": "tf-google-resource-compute_instance_group_manager",
    "body": [
      "resource \"google_compute_health_check\" \"autohealing\" {",
      "  name                = \"autohealing-health-check\"",
      "  check_interval_sec  = 5",
      "  timeout_sec         = 5",
      "  healthy_threshold   = 2",
      "  unhealthy_threshold = 10                         # 50 seconds",
      "",
      "  http_health_check {",
      "    request_path = \"/healthz\"",
      "    port         = \"8080\"",
      "  }",
      "}",
      "",
      "resource \"google_compute_instance_group_manager\" \"appserver\" {",
      "  name = \"appserver-igm\"",
      "",
      "  base_instance_name = \"app\"",
      "  instance_template  = \"${google_compute_instance_template.appserver.self_link}\"",
      "  update_strategy    = \"NONE\"",
      "  zone               = \"us-central1-a\"",
      "",
      "  target_pools = [\"${google_compute_target_pool.appserver.self_link}\"]",
      "  target_size  = 2",
      "",
      "  named_port {",
      "    name = \"customHTTP\"",
      "    port = 8888",
      "  }",
      "",
      "  auto_healing_policies {",
      "    health_check      = \"${google_compute_health_check.autohealing.self_link}\"",
      "    initial_delay_sec = 300",
      "  }",
      "}"
    ]
  },
  "google-resource-compute_instance_template": {
    "description": "Defines compute_instance_template",
    "prefix": "tf-google-resource-compute_instance_template",
    "body": [
      "resource \"google_compute_instance_template\" \"default\" {",
      "  name        = \"appserver-template\"",
      "  description = \"This template is used to create app server instances.\"",
      "",
      "  tags = [\"foo\", \"bar\"]",
      "",
      "  labels = {",
      "    environment = \"dev\"",
      "  }",
      "",
      "  instance_description = \"description assigned to instances\"",
      "  machine_type         = \"n1-standard-1\"",
      "  can_ip_forward       = false",
      "",
      "  scheduling {",
      "    automatic_restart   = true",
      "    on_host_maintenance = \"MIGRATE\"",
      "  }",
      "",
      "  // Create a new boot disk from an image",
      "  disk {",
      "    source_image = \"debian-cloud/debian-8\"",
      "    auto_delete  = true",
      "    boot         = true",
      "  }",
      "",
      "  // Use an existing disk resource",
      "  disk {",
      "    source      = \"foo_existing_disk\"",
      "    auto_delete = false",
      "    boot        = false",
      "  }",
      "",
      "  network_interface {",
      "    network = \"default\"",
      "  }",
      "",
      "  metadata {",
      "    foo = \"bar\"",
      "  }",
      "",
      "  service_account {",
      "    scopes = [\"userinfo-email\", \"compute-ro\", \"storage-ro\"]",
      "  }",
      "}"
    ]
  },
  "google-resource-compute_network": {
    "description": "Defines compute_network",
    "prefix": "tf-google-resource-compute_network",
    "body": [
      "resource \"google_compute_network\" \"default\" {",
      "  name                    = \"foobar\"",
      "  auto_create_subnetworks = \"true\"",
      "}"
    ]
  },
  "google-resource-compute_network_peering": {
    "description": "Defines compute_network_peering",
    "prefix": "tf-google-resource-compute_network_peering",
    "body": [
      "resource \"google_compute_network_peering\" \"peering1\" {",
      "  name = \"peering1\"",
      "  network = \"${google_compute_network.default.self_link}\"",
      "  peer_network = \"${google_compute_network.other.self_link}\"",
      "}",
      "",
      "resource \"google_compute_network_peering\" \"peering2\" {",
      "  name = \"peering2\"",
      "  network = \"${google_compute_network.other.self_link}\"",
      "  peer_network = \"${google_compute_network.default.self_link}\"",
      "}",
      "",
      "resource \"google_compute_network\" \"default\" {",
      "  name                    = \"foobar\"",
      "  auto_create_subnetworks = \"false\"",
      "}",
      "",
      "resource \"google_compute_network\" \"other\" {",
      "  name                    = \"other\"",
      "  auto_create_subnetworks = \"false\"",
      "}"
    ]
  },
  "google-resource-compute_project_metadata": {
    "description": "Defines compute_project_metadata",
    "prefix": "tf-google-resource-compute_project_metadata",
    "body": [
      "resource \"google_compute_project_metadata\" \"default\" {",
      "  metadata {",
      "    foo  = \"bar\"",
      "    fizz = \"buzz\"",
      "    \"13\" = \"42\"",
      "  }",
      "}"
    ]
  },
  "google-resource-compute_project_metadata_item": {
    "description": "Defines compute_project_metadata_item",
    "prefix": "tf-google-resource-compute_project_metadata_item",
    "body": [
      "resource \"google_compute_project_metadata_item\" \"default\" {",
      "  key = \"my_metadata\"",
      "  value = \"my_value\"",
      "}"
    ]
  },
  "google-resource-compute_region_autoscaler": {
    "description": "Defines compute_region_autoscaler",
    "prefix": "tf-google-resource-compute_region_autoscaler",
    "body": [
      "resource \"google_compute_instance_template\" \"foobar\" {",
      "  name           = \"foobar\"",
      "  machine_type   = \"n1-standard-1\"",
      "  can_ip_forward = false",
      "",
      "  tags = [\"foo\", \"bar\"]",
      "",
      "  disk {",
      "    source_image = \"debian-cloud/debian-8\"",
      "  }",
      "",
      "  network_interface {",
      "    network = \"default\"",
      "  }",
      "",
      "  metadata {",
      "    foo = \"bar\"",
      "  }",
      "",
      "  service_account {",
      "    scopes = [\"userinfo-email\", \"compute-ro\", \"storage-ro\"]",
      "  }",
      "}",
      "",
      "resource \"google_compute_target_pool\" \"foobar\" {",
      "  name = \"foobar\"",
      "}",
      "",
      "resource \"google_compute_region_instance_group_manager\" \"foobar\" {",
      "  name   = \"foobar\"",
      "  region = \"us-central1\"",
      "",
      "  instance_template  = \"${google_compute_instance_template.foobar.self_link}\"",
      "  target_pools       = [\"${google_compute_target_pool.foobar.self_link}\"]",
      "  base_instance_name = \"foobar\"",
      "}",
      "",
      "resource \"google_compute_region_autoscaler\" \"foobar\" {",
      "  name   = \"scaler\"",
      "  region = \"us-central1\"",
      "  target = \"${google_compute_region_instance_group_manager.foobar.self_link}\"",
      "",
      "  autoscaling_policy = {",
      "    max_replicas    = 5",
      "    min_replicas    = 1",
      "    cooldown_period = 60",
      "",
      "    cpu_utilization {",
      "      target = 0.5",
      "    }",
      "  }",
      "}"
    ]
  },
  "google-resource-compute_region_backend_service": {
    "description": "Defines compute_region_backend_service",
    "prefix": "tf-google-resource-compute_region_backend_service",
    "body": [
      "resource \"google_compute_region_backend_service\" \"foobar\" {",
      "  name             = \"blablah\"",
      "  description      = \"Hello World 1234\"",
      "  protocol         = \"TCP\"",
      "  timeout_sec      = 10",
      "  session_affinity = \"CLIENT_IP\"",
      "",
      "  backend {",
      "    group = \"${google_compute_region_instance_group_manager.foo.instance_group}\"",
      "  }",
      "",
      "  health_checks = [\"${google_compute_health_check.default.self_link}\"]",
      "}",
      "",
      "resource \"google_compute_region_instance_group_manager\" \"foo\" {",
      "  name               = \"terraform-test\"",
      "  instance_template  = \"${google_compute_instance_template.foobar.self_link}\"",
      "  base_instance_name = \"foobar\"",
      "  region             = \"us-central1\"",
      "  target_size        = 1",
      "}",
      "",
      "resource \"google_compute_instance_template\" \"foobar\" {",
      "  name         = \"terraform-test\"",
      "  machine_type = \"n1-standard-1\"",
      "",
      "  network_interface {",
      "    network = \"default\"",
      "  }",
      "",
      "  disk {",
      "    source_image = \"debian-cloud/debian-8\"",
      "    auto_delete  = true",
      "    boot         = true",
      "  }",
      "}",
      "",
      "resource \"google_compute_health_check\" \"default\" {",
      "  name               = \"test\"",
      "  check_interval_sec = 1",
      "  timeout_sec        = 1",
      "",
      "  tcp_health_check {",
      "    port = \"80\"",
      "  }",
      "}"
    ]
  },
  "google-resource-compute_region_instance_group_manager": {
    "description": "Defines compute_region_instance_group_manager",
    "prefix": "tf-google-resource-compute_region_instance_group_manager",
    "body": [
      "resource \"google_compute_health_check\" \"autohealing\" {",
      "  name                = \"autohealing-health-check\"",
      "  check_interval_sec  = 5",
      "  timeout_sec         = 5",
      "  healthy_threshold   = 2",
      "  unhealthy_threshold = 10                         # 50 seconds",
      "",
      "  http_health_check {",
      "    request_path = \"/healthz\"",
      "    port         = \"8080\"",
      "  }",
      "}",
      "",
      "resource \"google_compute_region_instance_group_manager\" \"appserver\" {",
      "  name = \"appserver-igm\"",
      "",
      "  base_instance_name         = \"app\"",
      "  instance_template          = \"${google_compute_instance_template.appserver.self_link}\"",
      "  region                     = \"us-central1\"",
      "  distribution_policy_zones  = [\"us-central1-a\", \"us-central1-f\"]",
      "",
      "  target_pools = [\"${google_compute_target_pool.appserver.self_link}\"]",
      "  target_size  = 2",
      "",
      "  named_port {",
      "    name = \"custom\"",
      "    port = 8888",
      "  }",
      "",
      "  auto_healing_policies {",
      "    health_check      = \"${google_compute_health_check.autohealing.self_link}\"",
      "    initial_delay_sec = 300",
      "  }",
      "}",
      ""
    ]
  },
  "google-resource-compute_route": {
    "description": "Defines compute_route",
    "prefix": "tf-google-resource-compute_route",
    "body": [
      "resource \"google_compute_network\" \"default\" {",
      "  name = \"compute-network\"",
      "}",
      "",
      "resource \"google_compute_subnetwork\" \"default\" {",
      "  name          = \"compute-subnetwork\"",
      "  ip_cidr_range = \"10.0.0.0/16\"",
      "  network       = \"${google_compute_network.default.self_link}\"",
      "  region        = \"us-central1\"",
      "}",
      "",
      "resource \"google_compute_route\" \"default\" {",
      "  name        = \"network-route\"",
      "  dest_range  = \"15.0.0.0/24\"",
      "  network     = \"${google_compute_network.foobar.name}\"",
      "  next_hop_ip = \"10.0.1.5\"",
      "  priority    = 100",
      "}"
    ]
  },
  "google-resource-compute_router": {
    "description": "Defines compute_router",
    "prefix": "tf-google-resource-compute_router",
    "body": [
      "resource \"google_compute_network\" \"foobar\" {",
      "  name = \"network-1\"",
      "}",
      "",
      "resource \"google_compute_subnetwork\" \"foobar\" {",
      "  name          = \"subnet-1\"",
      "  network       = \"${google_compute_network.foobar.self_link}\"",
      "  ip_cidr_range = \"10.0.0.0/16\"",
      "  region        = \"us-central1\"",
      "}",
      "",
      "resource \"google_compute_address\" \"foobar\" {",
      "  name   = \"vpn-gateway-1-address\"",
      "  region = \"${google_compute_subnetwork.foobar.region}\"",
      "}",
      "",
      "resource \"google_compute_vpn_gateway\" \"foobar\" {",
      "  name    = \"vpn-gateway-1\"",
      "  network = \"${google_compute_network.foobar.self_link}\"",
      "  region  = \"${google_compute_subnetwork.foobar.region}\"",
      "}",
      "",
      "resource \"google_compute_forwarding_rule\" \"foobar_esp\" {",
      "  name        = \"vpn-gw-1-esp\"",
      "  region      = \"${google_compute_vpn_gateway.foobar.region}\"",
      "  ip_protocol = \"ESP\"",
      "  ip_address  = \"${google_compute_address.foobar.address}\"",
      "  target      = \"${google_compute_vpn_gateway.foobar.self_link}\"",
      "}",
      "",
      "resource \"google_compute_forwarding_rule\" \"foobar_udp500\" {",
      "  name        = \"vpn-gw-1-udp-500\"",
      "  region      = \"${google_compute_forwarding_rule.foobar_esp.region}\"",
      "  ip_protocol = \"UDP\"",
      "  port_range  = \"500-500\"",
      "  ip_address  = \"${google_compute_address.foobar.address}\"",
      "  target      = \"${google_compute_vpn_gateway.foobar.self_link}\"",
      "}",
      "",
      "resource \"google_compute_forwarding_rule\" \"foobar_udp4500\" {",
      "  name        = \"vpn-gw-1-udp-4500\"",
      "  region      = \"${google_compute_forwarding_rule.foobar_udp500.region}\"",
      "  ip_protocol = \"UDP\"",
      "  port_range  = \"4500-4500\"",
      "  ip_address  = \"${google_compute_address.foobar.address}\"",
      "  target      = \"${google_compute_vpn_gateway.foobar.self_link}\"",
      "}",
      "",
      "resource \"google_compute_router\" \"foobar\" {",
      "  name    = \"router-1\"",
      "  region  = \"${google_compute_forwarding_rule.foobar_udp500.region}\"",
      "  network = \"${google_compute_network.foobar.self_link}\"",
      "",
      "  bgp {",
      "    asn = 64512",
      "  }",
      "}",
      "",
      "resource \"google_compute_vpn_tunnel\" \"foobar\" {",
      "  name               = \"vpn-tunnel-1\"",
      "  region             = \"${google_compute_forwarding_rule.foobar_udp4500.region}\"",
      "  target_vpn_gateway = \"${google_compute_vpn_gateway.foobar.self_link}\"",
      "  shared_secret      = \"unguessable\"",
      "  peer_ip            = \"8.8.8.8\"",
      "  router             = \"${google_compute_router.foobar.name}\"",
      "}",
      "",
      "resource \"google_compute_router_interface\" \"foobar\" {",
      "  name       = \"interface-1\"",
      "  router     = \"${google_compute_router.foobar.name}\"",
      "  region     = \"${google_compute_router.foobar.region}\"",
      "  ip_range   = \"169.254.1.1/30\"",
      "  vpn_tunnel = \"${google_compute_vpn_tunnel.foobar.name}\"",
      "}",
      "",
      "resource \"google_compute_router_peer\" \"foobar\" {",
      "  name                      = \"peer-1\"",
      "  router                    = \"${google_compute_router.foobar.name}\"",
      "  region                    = \"${google_compute_router.foobar.region}\"",
      "  peer_ip_address           = \"169.254.1.2\"",
      "  peer_asn                  = 65513",
      "  advertised_route_priority = 100",
      "  interface                 = \"${google_compute_router_interface.foobar.name}\"",
      "}"
    ]
  },
  "google-resource-compute_router_interface": {
    "description": "Defines compute_router_interface",
    "prefix": "tf-google-resource-compute_router_interface",
    "body": [
      "resource \"google_compute_router_interface\" \"foobar\" {",
      "  name       = \"interface-1\"",
      "  router     = \"router-1\"",
      "  region     = \"us-central1\"",
      "  ip_range   = \"169.254.1.1/30\"",
      "  vpn_tunnel = \"tunnel-1\"",
      "}"
    ]
  },
  "google-resource-compute_router_peer": {
    "description": "Defines compute_router_peer",
    "prefix": "tf-google-resource-compute_router_peer",
    "body": [
      "resource \"google_compute_router_peer\" \"foobar\" {",
      "  name                      = \"peer-1\"",
      "  router                    = \"router-1\"",
      "  region                    = \"us-central1\"",
      "  peer_ip_address           = \"169.254.1.2\"",
      "  peer_asn                  = 65513",
      "  advertised_route_priority = 100",
      "  interface                 = \"interface-1\"",
      "}"
    ]
  },
  "google-resource-compute_security_policy": {
    "description": "Defines compute_security_policy",
    "prefix": "tf-google-resource-compute_security_policy",
    "body": [
      "resource \"google_compute_security_policy\" \"policy\" {",
      "  name = \"my-policy\"",
      "",
      "  rule {",
      "    action   = \"deny(403)\"",
      "    priority = \"1000\"",
      "    match {",
      "      versioned_expr = \"SRC_IPS_V1\"",
      "      config {",
      "        src_ip_ranges = [\"9.9.9.9/32\"]",
      "      }",
      "    }",
      "    description = \"Deny access to IPs in 9.9.9.0/24\"",
      "  }",
      "",
      "  rule {",
      "    action   = \"allow\"",
      "    priority = \"2147483647\"",
      "    match {",
      "      versioned_expr = \"SRC_IPS_V1\"",
      "      config {",
      "        src_ip_ranges = [\"*\"]",
      "      }",
      "    }",
      "    description = \"default rule\"",
      "  }",
      "}"
    ]
  },
  "google-resource-compute_shared_vpc_host_project": {
    "description": "Defines compute_shared_vpc_host_project",
    "prefix": "tf-google-resource-compute_shared_vpc_host_project",
    "body": [
      "# A host project provides network resources to associated service projects.",
      "resource \"google_compute_shared_vpc_host_project\" \"host\" {",
      "  project = \"host-project-id\"",
      "}",
      "",
      "# A service project gains access to network resources provided by its",
      "# associated host project.",
      "resource \"google_compute_shared_vpc_service_project\" \"service1\" {",
      "  host_project    = \"${google_compute_shared_vpc_host_project.host.project}\"",
      "  service_project = \"service-project-id-1\"",
      "}",
      "resource \"google_compute_shared_vpc_service_project\" \"service2\" {",
      "  host_project    = \"${google_compute_shared_vpc_host_project.host.project}\"",
      "  service_project = \"service-project-id-2\"",
      "}"
    ]
  },
  "google-resource-compute_shared_vpc_service_project": {
    "description": "Defines compute_shared_vpc_service_project",
    "prefix": "tf-google-resource-compute_shared_vpc_service_project",
    "body": [
      "resource \"google_compute_shared_vpc_service_project\" \"service1\" {",
      "  host_project    = \"host-project-id\"",
      "  service_project = \"service-project-id-1\"",
      "}"
    ]
  },
  "google-resource-compute_snapshot": {
    "description": "Defines compute_snapshot",
    "prefix": "tf-google-resource-compute_snapshot",
    "body": [
      "resource \"google_compute_snapshot\" \"default\" {",
      "  name        = \"test-snapshot\"",
      "  source_disk = \"test-disk\"",
      "  zone        = \"us-central1-a\"",
      "",
      "  labels {",
      "    my-label = \"my-label-value\"",
      "  }",
      "}"
    ]
  },
  "google-resource-compute_ssl_certificate": {
    "description": "Defines compute_ssl_certificate",
    "prefix": "tf-google-resource-compute_ssl_certificate",
    "body": [
      "resource \"google_compute_ssl_certificate\" \"default\" {",
      "  name_prefix = \"my-certificate-\"",
      "  description = \"a description\"",
      "  private_key = \"${file(\"path/to/private.key\")}\"",
      "  certificate = \"${file(\"path/to/certificate.crt\")}\"",
      "}"
    ]
  },
  "google-resource-compute_ssl_policy": {
    "description": "Defines compute_ssl_policy",
    "prefix": "tf-google-resource-compute_ssl_policy",
    "body": [
      "resource \"google_compute_ssl_policy\" \"prod-ssl-policy\" {",
      "  name    = \"production-ssl-policy\"",
      "  profile = \"MODERN\"",
      "}",
      "",
      "resource \"google_compute_ssl_policy\" \"nonprod-ssl-policy\" {",
      "  name            = \"nonprod-ssl-policy\"",
      "  profile         = \"MODERN\"",
      "  min_tls_version = \"TLS_1_2\"",
      "}",
      "",
      "resource \"google_compute_ssl_policy\" \"custom-ssl-policy\" {",
      "  name            = \"custom-ssl-policy\"",
      "  min_tls_version = \"TLS_1_2\"",
      "  profile         = \"CUSTOM\"",
      "  custom_features = [\"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\", \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"]",
      "}"
    ]
  },
  "google-resource-compute_subnetwork": {
    "description": "Defines compute_subnetwork",
    "prefix": "tf-google-resource-compute_subnetwork",
    "body": [
      "resource \"google_compute_subnetwork\" \"default-us-east1\" {",
      "  name          = \"default-us-east1\"",
      "  ip_cidr_range = \"10.0.0.0/16\"",
      "  network       = \"${google_compute_network.default.self_link}\"",
      "  region        = \"us-east1\"",
      "}",
      "",
      "resource \"google_compute_network\" \"default\" {",
      "  name = \"test\"",
      "}"
    ]
  },
  "google-resource-compute_subnetwork_iam": {
    "description": "Defines compute_subnetwork_iam",
    "prefix": "tf-google-resource-compute_subnetwork_iam",
    "body": [
      "data \"google_iam_policy\" \"admin\" {",
      "  binding {",
      "    role = \"roles/editor\"",
      "",
      "    members = [",
      "      \"user:jane@example.com\",",
      "    ]",
      "  }",
      "}",
      "",
      "resource \"google_compute_subnetwork_iam_policy\" \"subnet\" {",
      "\tsubnetwork  = \"your-subnetwork-id\"",
      "\tpolicy_data = \"${data.google_iam_policy.admin.policy_data}\"",
      "}"
    ]
  },
  "google-resource-compute_target_http_proxy": {
    "description": "Defines compute_target_http_proxy",
    "prefix": "tf-google-resource-compute_target_http_proxy",
    "body": [
      "resource \"google_compute_target_http_proxy\" \"default\" {",
      "  name        = \"test-proxy\"",
      "  description = \"a description\"",
      "  url_map     = \"${google_compute_url_map.default.self_link}\"",
      "}",
      "",
      "resource \"google_compute_url_map\" \"default\" {",
      "  name        = \"url-map\"",
      "  description = \"a description\"",
      "",
      "  default_service = \"${google_compute_backend_service.default.self_link}\"",
      "",
      "  host_rule {",
      "    hosts        = [\"mysite.com\"]",
      "    path_matcher = \"allpaths\"",
      "  }",
      "",
      "  path_matcher {",
      "    name            = \"allpaths\"",
      "    default_service = \"${google_compute_backend_service.default.self_link}\"",
      "",
      "    path_rule {",
      "      paths   = [\"/*\"]",
      "      service = \"${google_compute_backend_service.default.self_link}\"",
      "    }",
      "  }",
      "}",
      "",
      "resource \"google_compute_backend_service\" \"default\" {",
      "  name        = \"default-backend\"",
      "  port_name   = \"http\"",
      "  protocol    = \"HTTP\"",
      "  timeout_sec = 10",
      "",
      "  health_checks = [\"${google_compute_http_health_check.default.self_link}\"]",
      "}",
      "",
      "resource \"google_compute_http_health_check\" \"default\" {",
      "  name               = \"test\"",
      "  request_path       = \"/\"",
      "  check_interval_sec = 1",
      "  timeout_sec        = 1",
      "}"
    ]
  },
  "google-resource-compute_target_https_proxy": {
    "description": "Defines compute_target_https_proxy",
    "prefix": "tf-google-resource-compute_target_https_proxy",
    "body": [
      "resource \"google_compute_target_https_proxy\" \"default\" {",
      "  name             = \"test-proxy\"",
      "  description      = \"a description\"",
      "  url_map          = \"${google_compute_url_map.default.self_link}\"",
      "  ssl_certificates = [\"${google_compute_ssl_certificate.default.self_link}\"]",
      "}",
      "",
      "resource \"google_compute_ssl_certificate\" \"default\" {",
      "  name        = \"my-certificate\"",
      "  description = \"a description\"",
      "  private_key = \"${file(\"path/to/private.key\")}\"",
      "  certificate = \"${file(\"path/to/certificate.crt\")}\"",
      "}",
      "",
      "resource \"google_compute_url_map\" \"default\" {",
      "  name        = \"url-map\"",
      "  description = \"a description\"",
      "",
      "  default_service = \"${google_compute_backend_service.default.self_link}\"",
      "",
      "  host_rule {",
      "    hosts        = [\"mysite.com\"]",
      "    path_matcher = \"allpaths\"",
      "  }",
      "",
      "  path_matcher {",
      "    name            = \"allpaths\"",
      "    default_service = \"${google_compute_backend_service.default.self_link}\"",
      "",
      "    path_rule {",
      "      paths   = [\"/*\"]",
      "      service = \"${google_compute_backend_service.default.self_link}\"",
      "    }",
      "  }",
      "}",
      "",
      "resource \"google_compute_backend_service\" \"default\" {",
      "  name        = \"default-backend\"",
      "  port_name   = \"http\"",
      "  protocol    = \"HTTP\"",
      "  timeout_sec = 10",
      "",
      "  health_checks = [\"${google_compute_http_health_check.default.self_link}\"]",
      "}",
      "",
      "resource \"google_compute_http_health_check\" \"default\" {",
      "  name               = \"test\"",
      "  request_path       = \"/\"",
      "  check_interval_sec = 1",
      "  timeout_sec        = 1",
      "}"
    ]
  },
  "google-resource-compute_target_pool": {
    "description": "Defines compute_target_pool",
    "prefix": "tf-google-resource-compute_target_pool",
    "body": [
      "resource \"google_compute_target_pool\" \"default\" {",
      "  name = \"instance-pool\"",
      "",
      "  instances = [",
      "    \"us-central1-a/myinstance1\",",
      "    \"us-central1-b/myinstance2\",",
      "  ]",
      "",
      "  health_checks = [",
      "    \"${google_compute_http_health_check.default.name}\",",
      "  ]",
      "}",
      "",
      "resource \"google_compute_http_health_check\" \"default\" {",
      "  name               = \"default\"",
      "  request_path       = \"/\"",
      "  check_interval_sec = 1",
      "  timeout_sec        = 1",
      "}"
    ]
  },
  "google-resource-compute_target_ssl_proxy": {
    "description": "Defines compute_target_ssl_proxy",
    "prefix": "tf-google-resource-compute_target_ssl_proxy",
    "body": [
      "resource \"google_compute_target_ssl_proxy\" \"default\" {",
      "  name = \"test\"",
      "  backend_service = \"${google_compute_backend_service.default.self_link}\"",
      "  ssl_certificates = [\"${google_compute_ssl_certificate.default.self_link}\"]",
      "}",
      "",
      "resource \"google_compute_ssl_certificate\" \"default\" {",
      "  name = \"default-cert\"",
      "  private_key = \"${file(\"path/to/test.key\")}\"",
      "  certificate = \"${file(\"path/to/test.crt\")}\"",
      "}",
      "",
      "resource \"google_compute_backend_service\" \"default\" {",
      "  name = \"default-backend\"",
      "  protocol    = \"SSL\"",
      "  health_checks = [\"${google_compute_health_check.default.self_link}\"]",
      "}",
      "",
      "resource \"google_compute_health_check\" \"default\" {",
      "  name = \"default-health-check\"",
      "  check_interval_sec = 1",
      "  timeout_sec = 1",
      "  tcp_health_check {",
      "    port = \"443\"",
      "  }",
      "}"
    ]
  },
  "google-resource-compute_target_tcp_proxy": {
    "description": "Defines compute_target_tcp_proxy",
    "prefix": "tf-google-resource-compute_target_tcp_proxy",
    "body": [
      "resource \"google_compute_target_tcp_proxy\" \"default\" {",
      "  name = \"test\"",
      "  description = \"test\"",
      "  backend_service = \"${google_compute_backend_service.default.self_link}\"",
      "}",
      "",
      "resource \"google_compute_backend_service\" \"default\" {",
      "  name        = \"default-backend\"",
      "  protocol    = \"TCP\"",
      "  timeout_sec = 10",
      "",
      "  health_checks = [\"${google_compute_health_check.default.self_link}\"]",
      "}",
      "",
      "resource \"google_compute_health_check\" \"default\" {",
      "  name = \"default\"",
      "  timeout_sec        = 1",
      "  check_interval_sec = 1",
      "",
      "  tcp_health_check {",
      "    port = \"443\"",
      "  }",
      "}"
    ]
  },
  "google-resource-compute_url_map": {
    "description": "Defines compute_url_map",
    "prefix": "tf-google-resource-compute_url_map",
    "body": [
      "resource \"google_compute_url_map\" \"foobar\" {",
      "  name        = \"urlmap\"",
      "  description = \"a description\"",
      "",
      "  default_service = \"${google_compute_backend_service.home.self_link}\"",
      "",
      "  host_rule {",
      "    hosts        = [\"mysite.com\"]",
      "    path_matcher = \"allpaths\"",
      "  }",
      "",
      "  path_matcher {",
      "    name            = \"allpaths\"",
      "    default_service = \"${google_compute_backend_service.home.self_link}\"",
      "",
      "    path_rule {",
      "      paths   = [\"/home\"]",
      "      service = \"${google_compute_backend_service.home.self_link}\"",
      "    }",
      "",
      "    path_rule {",
      "      paths   = [\"/login\"]",
      "      service = \"${google_compute_backend_service.login.self_link}\"",
      "    }",
      "",
      "    path_rule {",
      "      paths   = [\"/static\"]",
      "      service = \"${google_compute_backend_bucket.static.self_link}\"",
      "    }",
      "  }",
      "",
      "  test {",
      "    service = \"${google_compute_backend_service.home.self_link}\"",
      "    host    = \"hi.com\"",
      "    path    = \"/home\"",
      "  }",
      "}",
      "",
      "resource \"google_compute_backend_service\" \"login\" {",
      "  name        = \"login-backend\"",
      "  port_name   = \"http\"",
      "  protocol    = \"HTTP\"",
      "  timeout_sec = 10",
      "",
      "  health_checks = [\"${google_compute_http_health_check.default.self_link}\"]",
      "}",
      "",
      "resource \"google_compute_backend_service\" \"home\" {",
      "  name        = \"home-backend\"",
      "  port_name   = \"http\"",
      "  protocol    = \"HTTP\"",
      "  timeout_sec = 10",
      "",
      "  health_checks = [\"${google_compute_http_health_check.default.self_link}\"]",
      "}",
      "",
      "resource \"google_compute_http_health_check\" \"default\" {",
      "  name               = \"test\"",
      "  request_path       = \"/\"",
      "  check_interval_sec = 1",
      "  timeout_sec        = 1",
      "}",
      "",
      "resource \"google_compute_backend_bucket\" \"static\" {",
      "  name        = \"static-asset-backend-bucket\"",
      "  bucket_name = \"${google_storage_bucket.static.name}\"",
      "  enable_cdn  = true",
      "}",
      "",
      "resource \"google_storage_bucket\" \"static\" {",
      "  name     = \"static-asset-bucket\"",
      "  location = \"US\"",
      "}"
    ]
  },
  "google-resource-compute_vpn_gateway": {
    "description": "Defines compute_vpn_gateway",
    "prefix": "tf-google-resource-compute_vpn_gateway",
    "body": [
      "resource \"google_compute_network\" \"network1\" {",
      "  name       = \"network1\"",
      "  ipv4_range = \"10.120.0.0/16\"",
      "}",
      "",
      "resource \"google_compute_vpn_gateway\" \"target_gateway\" {",
      "  name    = \"vpn1\"",
      "  network = \"${google_compute_network.network1.self_link}\"",
      "  region  = \"${var.region}\"",
      "}",
      "",
      "resource \"google_compute_address\" \"vpn_static_ip\" {",
      "  name   = \"vpn-static-ip\"",
      "  region = \"${var.region}\"",
      "}",
      "",
      "resource \"google_compute_forwarding_rule\" \"fr_esp\" {",
      "  name        = \"fr-esp\"",
      "  region      = \"${var.region}\"",
      "  ip_protocol = \"ESP\"",
      "  ip_address  = \"${google_compute_address.vpn_static_ip.address}\"",
      "  target      = \"${google_compute_vpn_gateway.target_gateway.self_link}\"",
      "}",
      "",
      "resource \"google_compute_forwarding_rule\" \"fr_udp500\" {",
      "  name        = \"fr-udp500\"",
      "  region      = \"${var.region}\"",
      "  ip_protocol = \"UDP\"",
      "  port_range  = \"500\"",
      "  ip_address  = \"${google_compute_address.vpn_static_ip.address}\"",
      "  target      = \"${google_compute_vpn_gateway.target_gateway.self_link}\"",
      "}",
      "",
      "resource \"google_compute_forwarding_rule\" \"fr_udp4500\" {",
      "  name        = \"fr-udp4500\"",
      "  region      = \"${var.region}\"",
      "  ip_protocol = \"UDP\"",
      "  port_range  = \"4500\"",
      "  ip_address  = \"${google_compute_address.vpn_static_ip.address}\"",
      "  target      = \"${google_compute_vpn_gateway.target_gateway.self_link}\"",
      "}",
      "",
      "resource \"google_compute_vpn_tunnel\" \"tunnel1\" {",
      "  name          = \"tunnel1\"",
      "  region        = \"${var.region}\"",
      "  peer_ip       = \"15.0.0.120\"",
      "  shared_secret = \"a secret message\"",
      "",
      "  target_vpn_gateway = \"${google_compute_vpn_gateway.target_gateway.self_link}\"",
      "",
      "  depends_on = [",
      "    \"google_compute_forwarding_rule.fr_esp\",",
      "    \"google_compute_forwarding_rule.fr_udp500\",",
      "    \"google_compute_forwarding_rule.fr_udp4500\",",
      "  ]",
      "}",
      "",
      "resource \"google_compute_route\" \"route1\" {",
      "  name       = \"route1\"",
      "  network    = \"${google_compute_network.network1.name}\"",
      "  dest_range = \"15.0.0.0/24\"",
      "  priority   = 1000",
      "",
      "  next_hop_vpn_tunnel = \"${google_compute_vpn_tunnel.tunnel1.self_link}\"",
      "}"
    ]
  },
  "google-resource-compute_vpn_tunnel": {
    "description": "Defines compute_vpn_tunnel",
    "prefix": "tf-google-resource-compute_vpn_tunnel",
    "body": [
      "resource \"google_compute_network\" \"network1\" {",
      "  name = \"network1\"",
      "}",
      "",
      "resource \"google_compute_subnetwork\" \"subnet1\" {",
      "  name          = \"subnet1\"",
      "  network       = \"${google_compute_network.network1.self_link}\"",
      "  ip_cidr_range = \"10.120.0.0/16\"",
      "  region        = \"us-central1\"",
      "}",
      "",
      "resource \"google_compute_vpn_gateway\" \"target_gateway\" {",
      "  name    = \"vpn1\"",
      "  network = \"${google_compute_network.network1.self_link}\"",
      "  region  = \"${google_compute_subnetwork.subnet1.region}\"",
      "}",
      "",
      "resource \"google_compute_address\" \"vpn_static_ip\" {",
      "  name   = \"vpn-static-ip\"",
      "  region = \"${google_compute_subnetwork.subnet1.region}\"",
      "}",
      "",
      "resource \"google_compute_forwarding_rule\" \"fr_esp\" {",
      "  name        = \"fr-esp\"",
      "  ip_protocol = \"ESP\"",
      "  ip_address  = \"${google_compute_address.vpn_static_ip.address}\"",
      "  target      = \"${google_compute_vpn_gateway.target_gateway.self_link}\"",
      "}",
      "",
      "resource \"google_compute_forwarding_rule\" \"fr_udp500\" {",
      "  name        = \"fr-udp500\"",
      "  ip_protocol = \"UDP\"",
      "  port_range  = \"500-500\"",
      "  ip_address  = \"${google_compute_address.vpn_static_ip.address}\"",
      "  target      = \"${google_compute_vpn_gateway.target_gateway.self_link}\"",
      "}",
      "",
      "resource \"google_compute_forwarding_rule\" \"fr_udp4500\" {",
      "  name        = \"fr-udp4500\"",
      "  ip_protocol = \"UDP\"",
      "  port_range  = \"4500-4500\"",
      "  ip_address  = \"${google_compute_address.vpn_static_ip.address}\"",
      "  target      = \"${google_compute_vpn_gateway.target_gateway.self_link}\"",
      "}",
      "",
      "resource \"google_compute_vpn_tunnel\" \"tunnel1\" {",
      "  name          = \"tunnel1\"",
      "  peer_ip       = \"15.0.0.120\"",
      "  shared_secret = \"a secret message\"",
      "",
      "  target_vpn_gateway = \"${google_compute_vpn_gateway.target_gateway.self_link}\"",
      "",
      "  local_traffic_selector  = [\"${google_compute_subnetwork.subnet1.ip_cidr_range}\"]",
      "  remote_traffic_selector = [\"172.16.0.0/12\"]",
      "",
      "  depends_on = [",
      "    \"google_compute_forwarding_rule.fr_esp\",",
      "    \"google_compute_forwarding_rule.fr_udp500\",",
      "    \"google_compute_forwarding_rule.fr_udp4500\",",
      "  ]",
      "}",
      "",
      "resource \"google_compute_route\" \"route1\" {",
      "  name       = \"route1\"",
      "  network    = \"${google_compute_network.network1.name}\"",
      "  dest_range = \"15.0.0.0/24\"",
      "  priority   = 1000",
      "",
      "  next_hop_vpn_tunnel = \"${google_compute_vpn_tunnel.tunnel1.self_link}\"",
      "}"
    ]
  },
  "google-resource-container_cluster": {
    "description": "Defines container_cluster",
    "prefix": "tf-google-resource-container_cluster",
    "body": [
      "resource \"google_container_cluster\" \"primary\" {",
      "  name               = \"marcellus-wallace\"",
      "  zone               = \"us-central1-a\"",
      "  initial_node_count = 3",
      "",
      "  additional_zones = [",
      "    \"us-central1-b\",",
      "    \"us-central1-c\",",
      "  ]",
      "",
      "  master_auth {",
      "    username = \"mr.yoda\"",
      "    password = \"adoy.rm\"",
      "  }",
      "",
      "  node_config {",
      "    oauth_scopes = [",
      "      \"https://www.googleapis.com/auth/compute\",",
      "      \"https://www.googleapis.com/auth/devstorage.read_only\",",
      "      \"https://www.googleapis.com/auth/logging.write\",",
      "      \"https://www.googleapis.com/auth/monitoring\",",
      "    ]",
      "",
      "    labels {",
      "      foo = \"bar\"",
      "    }",
      "",
      "    tags = [\"foo\", \"bar\"]",
      "  }",
      "}",
      "",
      "# The following outputs allow authentication and connectivity to the GKE Cluster.",
      "output \"client_certificate\" {",
      "  value = \"${google_container_cluster.primary.master_auth.0.client_certificate}\"",
      "}",
      "",
      "output \"client_key\" {",
      "  value = \"${google_container_cluster.primary.master_auth.0.client_key}\"",
      "}",
      "",
      "output \"cluster_ca_certificate\" {",
      "  value = \"${google_container_cluster.primary.master_auth.0.cluster_ca_certificate}\"",
      "}"
    ]
  },
  "google-resource-container_node_pool": {
    "description": "Defines container_node_pool",
    "prefix": "tf-google-resource-container_node_pool",
    "body": [
      "resource \"google_container_node_pool\" \"np\" {",
      "  name       = \"my-node-pool\"",
      "  zone       = \"us-central1-a\"",
      "  cluster    = \"${google_container_cluster.primary.name}\"",
      "  node_count = 3",
      "}",
      "",
      "resource \"google_container_cluster\" \"primary\" {",
      "  name               = \"marcellus-wallace\"",
      "  zone               = \"us-central1-a\"",
      "  initial_node_count = 3",
      "",
      "  additional_zones = [",
      "    \"us-central1-b\",",
      "    \"us-central1-c\",",
      "  ]",
      "",
      "  master_auth {",
      "    username = \"mr.yoda\"",
      "    password = \"adoy.rm\"",
      "  }",
      "",
      "  node_config {",
      "    oauth_scopes = [",
      "      \"https://www.googleapis.com/auth/compute\",",
      "      \"https://www.googleapis.com/auth/devstorage.read_only\",",
      "      \"https://www.googleapis.com/auth/logging.write\",",
      "      \"https://www.googleapis.com/auth/monitoring\",",
      "    ]",
      "",
      "    guest_accelerator {",
      "      type  = \"nvidia-tesla-k80\"",
      "      count = 1",
      "    }",
      "  }",
      "}",
      ""
    ]
  },
  "google-resource-dataflow_job": {
    "description": "Defines dataflow_job",
    "prefix": "tf-google-resource-dataflow_job",
    "body": [
      "resource \"google_dataflow_job\" \"big_data_job\" {",
      "    name = \"dataflow-job\"",
      "    template_gcs_path = \"gs://my-bucket/templates/template_file\"",
      "    temp_gcs_location = \"gs://my-bucket/tmp_dir\"",
      "    parameters {",
      "        foo = \"bar\"",
      "        baz = \"qux\"",
      "    }",
      "}"
    ]
  },
  "google-resource-dataproc_cluster": {
    "description": "Defines dataproc_cluster",
    "prefix": "tf-google-resource-dataproc_cluster",
    "body": [
      "resource \"google_dataproc_cluster\" \"simplecluster\" {",
      "    name       = \"simplecluster\"",
      "    region     = \"us-central1\"",
      "}",
      "",
      "resource \"google_dataproc_cluster\" \"mycluster\" {",
      "    name       = \"mycluster\"",
      "    region     = \"us-central1\"",
      "    labels {",
      "        foo = \"bar\"",
      "    }",
      "",
      "    cluster_config {",
      "        staging_bucket        = \"dataproc-staging-bucket\"",
      "",
      "        master_config {",
      "            num_instances     = 1",
      "            machine_type      = \"n1-standard-1\"",
      "            disk_config {",
      "                boot_disk_size_gb = 10",
      "            }",
      "        }",
      "",
      "        worker_config {",
      "            num_instances     = 2",
      "            machine_type      = \"n1-standard-1\"",
      "            disk_config {",
      "                boot_disk_size_gb = 10",
      "                num_local_ssds    = 1",
      "            }",
      "        }",
      "",
      "        preemptible_worker_config {",
      "            num_instances     = 0",
      "        }",
      "",
      "        # Override or set some custom properties",
      "        software_config {",
      "            image_version       = \"preview\"",
      "            override_properties = {",
      "                \"dataproc:dataproc.allow.zero.workers\" = \"true\"",
      "            }",
      "        }",
      "",
      "        gce_cluster_config {",
      "            #network = \"${google_compute_network.dataproc_network.name}\"",
      "            tags    = [\"foo\", \"bar\"]",
      "        }",
      "",
      "        # You can define multiple initialization_action blocks",
      "        initialization_action {",
      "            script      = \"gs://dataproc-initialization-actions/stackdriver/stackdriver.sh\"",
      "            timeout_sec = 500",
      "        }",
      "",
      "    }",
      "}"
    ]
  },
  "google-resource-dataproc_job": {
    "description": "Defines dataproc_job",
    "prefix": "tf-google-resource-dataproc_job",
    "body": [
      "resource \"google_dataproc_cluster\" \"mycluster\" {",
      "    name   = \"dproc-cluster-unique-name\"",
      "    region = \"us-central1\"",
      "}",
      "",
      "# Submit an example spark job to a dataproc cluster",
      "resource \"google_dataproc_job\" \"spark\" {",
      "    region       = \"${google_dataproc_cluster.mycluster.region}\"",
      "    force_delete = true",
      "    placement {",
      "        cluster_name = \"${google_dataproc_cluster.mycluster.name}\"",
      "    }",
      "",
      "    spark_config {",
      "        main_class    = \"org.apache.spark.examples.SparkPi\"",
      "        jar_file_uris = [\"file:///usr/lib/spark/examples/jars/spark-examples.jar\"]",
      "        args          = [\"1000\"]",
      "        ",
      "        properties    = {",
      "            \"spark.logConf\" = \"true\"",
      "        }",
      "        ",
      "        logging_config {",
      "            driver_log_levels {",
      "                \"root\" = \"INFO\"",
      "            }",
      "        }",
      "    }",
      "}",
      "",
      "# Submit an example pyspark job to a dataproc cluster",
      "resource \"google_dataproc_job\" \"pyspark\" {",
      "    region       = \"${google_dataproc_cluster.mycluster.region}\"",
      "    force_delete = true",
      "    placement {",
      "        cluster_name = \"${google_dataproc_cluster.mycluster.name}\"",
      "    }",
      "",
      "    pyspark_config {",
      "        main_python_file_uri = \"gs://dataproc-examples-2f10d78d114f6aaec76462e3c310f31f/src/pyspark/hello-world/hello-world.py\"",
      "        properties = {",
      "            \"spark.logConf\" = \"true\"",
      "        }",
      "    }",
      "}",
      "",
      "# Check out current state of the jobs",
      "output \"spark_status\" {",
      "    value = \"${google_dataproc_job.spark.status.0.state}\"",
      "}",
      "",
      "output \"pyspark_status\" {",
      "    value = \"${google_dataproc_job.pyspark.status.0.state}\"",
      "}"
    ]
  },
  "google-resource-dns_managed_zone": {
    "description": "Defines dns_managed_zone",
    "prefix": "tf-google-resource-dns_managed_zone",
    "body": [
      "resource \"google_dns_managed_zone\" \"prod\" {",
      "  name        = \"prod-zone\"",
      "  dns_name    = \"prod.mydomain.com.\"",
      "  description = \"Production DNS zone\"",
      "}"
    ]
  },
  "google-resource-dns_record_set": {
    "description": "Defines dns_record_set",
    "prefix": "tf-google-resource-dns_record_set",
    "body": [
      "resource \"google_dns_record_set\" \"frontend\" {",
      "  name = \"frontend.${google_dns_managed_zone.prod.dns_name}\"",
      "  type = \"A\"",
      "  ttl  = 300",
      "",
      "  managed_zone = \"${google_dns_managed_zone.prod.name}\"",
      "",
      "  rrdatas = [\"${google_compute_instance.frontend.network_interface.0.access_config.0.assigned_nat_ip}\"]",
      "}",
      "",
      "resource \"google_compute_instance\" \"frontend\" {",
      "  name         = \"frontend\"",
      "  machine_type = \"g1-small\"",
      "  zone         = \"us-central1-b\"",
      "",
      "  boot_disk {",
      "    initialize_params {",
      "      image = \"debian-cloud/debian-8\"",
      "    }",
      "  }",
      "",
      "  network_interface {",
      "    network       = \"default\"",
      "    access_config = {}",
      "  }",
      "}",
      "",
      "resource \"google_dns_managed_zone\" \"prod\" {",
      "  name     = \"prod-zone\"",
      "  dns_name = \"prod.mydomain.com.\"",
      "}"
    ]
  },
  "google-resource-endpoints_service": {
    "description": "Defines endpoints_service",
    "prefix": "tf-google-resource-endpoints_service",
    "body": [
      "resource \"google_endpoints_service\" \"openapi_service\" {",
      "  service_name = \"api-name.endpoints.project-id.cloud.goog\"",
      "  project = \"project-id\"",
      "  openapi_config = \"${file(\"openapi_spec.yml\")}\"",
      "}",
      "",
      "resource \"google_endpoints_service\" \"grpc_service\" {",
      "  service_name = \"api-name.endpoints.project-id.cloud.goog\"",
      "  project = \"project-id\"",
      "  grpc_config = \"${file(\"service_spec.yml\")}\"",
      "  protoc_output = \"${file(\"compiled_descriptor_file.pb\")}\"",
      "}"
    ]
  },
  "google-resource-google_folder": {
    "description": "Defines google_folder",
    "prefix": "tf-google-resource-google_folder",
    "body": [
      "# Top-level folder under an organization.",
      "resource \"google_folder\" \"department1\" {",
      "  display_name = \"Department 1\"",
      "  parent     = \"organizations/1234567\"",
      "}",
      "",
      "# Folder nested under another folder.",
      "resource \"google_folder\" \"team-abc\" {",
      "  display_name = \"Team ABC\"",
      "  parent     = \"${google_folder.department1.name}\"",
      "}"
    ]
  },
  "google-resource-google_folder_iam_binding": {
    "description": "Defines google_folder_iam_binding",
    "prefix": "tf-google-resource-google_folder_iam_binding",
    "body": [
      "resource \"google_folder\" \"department1\" {",
      "  display_name = \"Department 1\"",
      "  parent       = \"organizations/1234567\"",
      "}",
      "",
      "resource \"google_folder_iam_binding\" \"admin\" {",
      "  folder  = \"${google_folder.department1.name}\"",
      "  role    = \"roles/editor\"",
      "",
      "  members = [",
      "    \"user:jane@example.com\",",
      "  ]",
      "}"
    ]
  },
  "google-resource-google_folder_iam_member": {
    "description": "Defines google_folder_iam_member",
    "prefix": "tf-google-resource-google_folder_iam_member",
    "body": [
      "resource \"google_folder\" \"department1\" {",
      "  display_name = \"Department 1\"",
      "  parent       = \"organizations/1234567\"",
      "}",
      "",
      "resource \"google_folder_iam_member\" \"admin\" {",
      "  folder  = \"${google_folder.department1.name}\"",
      "  role    = \"roles/editor\"",
      "  member  = \"user:jane@example.com\"",
      "}"
    ]
  },
  "google-resource-google_folder_iam_policy": {
    "description": "Defines google_folder_iam_policy",
    "prefix": "tf-google-resource-google_folder_iam_policy",
    "body": [
      "resource \"google_folder_iam_policy\" \"folder_admin_policy\" {",
      "  folder     = \"${google_folder.department1.name}\"",
      "  policy_data = \"${data.google_iam_policy.admin.policy_data}\"",
      "}",
      "",
      "resource \"google_folder\" \"department1\" {",
      "  display_name = \"Department 1\"",
      "  parent     = \"organizations/1234567\"",
      "}",
      "",
      "data \"google_iam_policy\" \"admin\" {",
      "  binding {",
      "    role = \"roles/editor\"",
      "",
      "    members = [",
      "      \"user:jane@example.com\",",
      "    ]",
      "  }",
      "}"
    ]
  },
  "google-resource-google_folder_organization_policy": {
    "description": "Defines google_folder_organization_policy",
    "prefix": "tf-google-resource-google_folder_organization_policy",
    "body": [
      "resource \"google_folder_organization_policy\" \"serial_port_policy\" {",
      "  folder     = \"folders/123456789\"",
      "  constraint = \"compute.disableSerialPortAccess\"",
      "",
      "  boolean_policy {",
      "    enforced = true",
      "  }",
      "}"
    ]
  },
  "google-resource-google_kms_crypto_key": {
    "description": "Defines google_kms_crypto_key",
    "prefix": "tf-google-resource-google_kms_crypto_key",
    "body": [
      "resource \"google_kms_key_ring\" \"my_key_ring\" {",
      "  name     = \"my-key-ring\"",
      "  project  = \"my-project\"",
      "  location = \"us-central1\"",
      "}",
      "",
      "resource \"google_kms_crypto_key\" \"my_crypto_key\" {",
      "  name            = \"my-crypto-key\"",
      "  key_ring        = \"${google_kms_key_ring.my_key_ring.id}\"",
      "  rotation_period = \"100000s\"",
      "}"
    ]
  },
  "google-resource-google_kms_crypto_key_iam_binding": {
    "description": "Defines google_kms_crypto_key_iam_binding",
    "prefix": "tf-google-resource-google_kms_crypto_key_iam_binding",
    "body": [
      "resource \"google_kms_crypto_key_iam_binding\" \"crypto_key\" {",
      "  crypto_key_id = \"your-crypto-key-id\"",
      "  role          = \"roles/editor\"",
      "",
      "  members = [",
      "    \"user:jane@example.com\",",
      "  ]",
      "}"
    ]
  },
  "google-resource-google_kms_crypto_key_iam_member": {
    "description": "Defines google_kms_crypto_key_iam_member",
    "prefix": "tf-google-resource-google_kms_crypto_key_iam_member",
    "body": [
      "resource \"google_kms_crypto_key_iam_member\" \"crypto_key\" {",
      "  crypto_key_id = \"your-crypto-key-id\"",
      "  role          = \"roles/editor\"",
      "  member        = \"user:jane@example.com\"",
      "}"
    ]
  },
  "google-resource-google_kms_key_ring": {
    "description": "Defines google_kms_key_ring",
    "prefix": "tf-google-resource-google_kms_key_ring",
    "body": [
      "resource \"google_kms_key_ring\" \"my_key_ring\" {",
      "  name     = \"my-key-ring\"",
      "  location = \"us-central1\"",
      "}"
    ]
  },
  "google-resource-google_kms_key_ring_iam": {
    "description": "Defines google_kms_key_ring_iam",
    "prefix": "tf-google-resource-google_kms_key_ring_iam",
    "body": [
      "data \"google_iam_policy\" \"admin\" {",
      "  binding {",
      "    role = \"roles/editor\"",
      "",
      "    members = [",
      "      \"user:jane@example.com\",",
      "    ]",
      "  }",
      "}",
      "",
      "resource \"google_kms_key_ring_iam_policy\" \"key_ring\" {",
      "\tkey_ring_id = \"your-key-ring-id\"",
      "\tpolicy_data = \"${data.google_iam_policy.admin.policy_data}\"",
      "}"
    ]
  },
  "google-resource-google_organization_iam_binding": {
    "description": "Defines google_organization_iam_binding",
    "prefix": "tf-google-resource-google_organization_iam_binding",
    "body": [
      "resource \"google_organization_iam_binding\" \"binding\" {",
      "  org_id = \"123456789\"",
      "  role    = \"roles/browser\"",
      "",
      "  members = [",
      "    \"user:jane@example.com\",",
      "  ]",
      "}"
    ]
  },
  "google-resource-google_organization_iam_custom_role": {
    "description": "Defines google_organization_iam_custom_role",
    "prefix": "tf-google-resource-google_organization_iam_custom_role",
    "body": [
      "resource \"google_organization_iam_custom_role\" \"my-custom-role\" {",
      "  role_id     = \"myCustomRole\"",
      "  org_id      = \"123456789\"",
      "  title       = \"My Custom Role\"",
      "  description = \"A description\"",
      "  permissions = [\"iam.roles.list\", \"iam.roles.create\", \"iam.roles.delete\"]",
      "}"
    ]
  },
  "google-resource-google_organization_iam_member": {
    "description": "Defines google_organization_iam_member",
    "prefix": "tf-google-resource-google_organization_iam_member",
    "body": [
      "resource \"google_organization_iam_member\" \"binding\" {",
      "  org_id = \"0123456789\"",
      "  role    = \"roles/editor\"",
      "  member  = \"user:jane@example.com\"",
      "}"
    ]
  },
  "google-resource-google_organization_iam_policy": {
    "description": "Defines google_organization_iam_policy",
    "prefix": "tf-google-resource-google_organization_iam_policy",
    "body": [
      "resource \"google_organization_iam_policy\" \"policy\" {",
      "  org_id = \"123456789\"",
      "  policy_data = \"${data.google_iam_policy.admin.policy_data}\"",
      "}",
      "",
      "data \"google_iam_policy\" \"admin\" {",
      "  binding {",
      "    role = \"roles/editor\"",
      "",
      "    members = [",
      "      \"user:jane@example.com\",",
      "    ]",
      "  }",
      "}"
    ]
  },
  "google-resource-google_organization_policy": {
    "description": "Defines google_organization_policy",
    "prefix": "tf-google-resource-google_organization_policy",
    "body": [
      "resource \"google_organization_policy\" \"serial_port_policy\" {",
      "  org_id     = \"123456789\"",
      "  constraint = \"compute.disableSerialPortAccess\"",
      "",
      "  boolean_policy {",
      "    enforced = true",
      "  }",
      "}"
    ]
  },
  "google-resource-google_project": {
    "description": "Defines google_project",
    "prefix": "tf-google-resource-google_project",
    "body": [
      "resource \"google_project\" \"my_project\" {",
      "  name = \"My Project\"",
      "  project_id = \"your-project-id\"",
      "  org_id     = \"1234567\"",
      "}"
    ]
  },
  "google-resource-google_project_iam": {
    "description": "Defines google_project_iam",
    "prefix": "tf-google-resource-google_project_iam",
    "body": [
      "resource \"google_project_iam_policy\" \"project\" {",
      "  project     = \"your-project-id\"",
      "  policy_data = \"${data.google_iam_policy.admin.policy_data}\"",
      "}",
      "",
      "data \"google_iam_policy\" \"admin\" {",
      "  binding {",
      "    role = \"roles/editor\"",
      "",
      "    members = [",
      "      \"user:jane@example.com\",",
      "    ]",
      "  }",
      "}"
    ]
  },
  "google-resource-google_project_iam_custom_role": {
    "description": "Defines google_project_iam_custom_role",
    "prefix": "tf-google-resource-google_project_iam_custom_role",
    "body": [
      "resource \"google_project_iam_custom_role\" \"my-custom-role\" {",
      "  role_id     = \"myCustomRole\"",
      "  title       = \"My Custom Role\"",
      "  description = \"A description\"",
      "  permissions = [\"iam.roles.list\", \"iam.roles.create\", \"iam.roles.delete\"]",
      "}"
    ]
  },
  "google-resource-google_project_organization_policy": {
    "description": "Defines google_project_organization_policy",
    "prefix": "tf-google-resource-google_project_organization_policy",
    "body": [
      "resource \"google_project_organization_policy\" \"serial_port_policy\" {",
      "  project    = \"your-project-id\"",
      "  constraint = \"compute.disableSerialPortAccess\"",
      "",
      "  boolean_policy {",
      "    enforced = true",
      "  }",
      "}"
    ]
  },
  "google-resource-google_project_service": {
    "description": "Defines google_project_service",
    "prefix": "tf-google-resource-google_project_service",
    "body": [
      "resource \"google_project_service\" \"project\" {",
      "  project = \"your-project-id\"",
      "  service = \"iam.googleapis.com\"",
      "}"
    ]
  },
  "google-resource-google_project_services": {
    "description": "Defines google_project_services",
    "prefix": "tf-google-resource-google_project_services",
    "body": [
      "resource \"google_project_services\" \"project\" {",
      "  project = \"your-project-id\"",
      "  services   = [\"iam.googleapis.com\", \"cloudresourcemanager.googleapis.com\"]",
      "}"
    ]
  },
  "google-resource-google_service_account": {
    "description": "Defines google_service_account",
    "prefix": "tf-google-resource-google_service_account",
    "body": [
      "resource \"google_service_account\" \"object_viewer\" {",
      "  account_id   = \"object-viewer\"",
      "  display_name = \"Object viewer\"",
      "}"
    ]
  },
  "google-resource-google_service_account_iam": {
    "description": "Defines google_service_account_iam",
    "prefix": "tf-google-resource-google_service_account_iam",
    "body": [
      "data \"google_iam_policy\" \"admin\" {",
      "  binding {",
      "    role = \"roles/editor\"",
      "",
      "    members = [",
      "      \"user:jane@example.com\",",
      "    ]",
      "  }",
      "}",
      "",
      "resource \"google_service_account_iam_policy\" \"admin-account-iam\" {",
      "\tservice_account_id = \"your-service-account-id\"",
      "\tpolicy_data = \"${data.google_iam_policy.admin.policy_data}\"",
      "}"
    ]
  },
  "google-resource-google_service_account_key": {
    "description": "Defines google_service_account_key",
    "prefix": "tf-google-resource-google_service_account_key",
    "body": [
      "resource \"google_service_account\" \"acceptance\" {",
      "  account_id = \"%v\"",
      "  display_name = \"%v\"",
      "}",
      "",
      "resource \"google_service_account_key\" \"acceptance\" {",
      "  service_account_id = \"${google_service_account.acceptance.name}\"",
      "  public_key_type = \"TYPE_X509_PEM_FILE\"",
      "}"
    ]
  },
  "google-resource-logging_billing_account_sink": {
    "description": "Defines logging_billing_account_sink",
    "prefix": "tf-google-resource-logging_billing_account_sink",
    "body": [
      "resource \"google_logging_billing_account_sink\" \"my-sink\" {",
      "    name = \"my-sink\"",
      "    billing_account = \"ABCDEF-012345-GHIJKL\"",
      "",
      "    # Can export to pubsub, cloud storage, or bigtable",
      "    destination = \"storage.googleapis.com/${google_storage_bucket.log-bucket.name}\"",
      "}",
      "",
      "resource \"google_storage_bucket\" \"log-bucket\" {",
      "    name     = \"billing-logging-bucket\"",
      "}",
      "",
      "resource \"google_project_iam_binding\" \"log-writer\" {",
      "    role = \"roles/storage.objectCreator\"",
      "",
      "    members = [",
      "        \"${google_logging_billing_account_sink.my-sink.writer_identity}\",",
      "    ]",
      "}"
    ]
  },
  "google-resource-logging_folder_sink": {
    "description": "Defines logging_folder_sink",
    "prefix": "tf-google-resource-logging_folder_sink",
    "body": [
      "resource \"google_logging_folder_sink\" \"my-sink\" {",
      "    name        = \"my-sink\"",
      "    folder      = \"${google_folder.my-folder.name}\"",
      "",
      "    # Can export to pubsub, cloud storage, or bigtable",
      "    destination = \"storage.googleapis.com/${google_storage_bucket.log-bucket.name}\"",
      "",
      "    # Log all WARN or higher severity messages relating to instances",
      "    filter      = \"resource.type = gce_instance AND severity >= WARN\"",
      "}",
      "",
      "resource \"google_storage_bucket\" \"log-bucket\" {",
      "    name = \"folder-logging-bucket\"",
      "}",
      "",
      "resource \"google_project_iam_binding\" \"log-writer\" {",
      "    role    = \"roles/storage.objectCreator\"",
      "",
      "    members = [",
      "        \"${google_logging_folder_sink.my-sink.writer_identity}\",",
      "    ]",
      "}",
      "",
      "resource \"google_folder\" \"my-folder\" {",
      "\tdisplay_name = \"My folder\"",
      "    parent       = \"organizations/123456\"",
      "}"
    ]
  },
  "google-resource-logging_organization_sink": {
    "description": "Defines logging_organization_sink",
    "prefix": "tf-google-resource-logging_organization_sink",
    "body": [
      "resource \"google_logging_organization_sink\" \"my-sink\" {",
      "    name        = \"my-sink\"",
      "    org_id      = \"123456789\"",
      "",
      "    # Can export to pubsub, cloud storage, or bigtable",
      "    destination = \"storage.googleapis.com/${google_storage_bucket.log-bucket.name}\"",
      "",
      "    # Log all WARN or higher severity messages relating to instances",
      "    filter      = \"resource.type = gce_instance AND severity >= WARN\"",
      "}",
      "",
      "resource \"google_storage_bucket\" \"log-bucket\" {",
      "    name = \"organization-logging-bucket\"",
      "}",
      "",
      "resource \"google_project_iam_binding\" \"log-writer\" {",
      "    role    = \"roles/storage.objectCreator\"",
      "",
      "    members = [",
      "        \"${google_logging_organization_sink.my-sink.writer_identity}\",",
      "    ]",
      "}"
    ]
  },
  "google-resource-logging_project_sink": {
    "description": "Defines logging_project_sink",
    "prefix": "tf-google-resource-logging_project_sink",
    "body": [
      "resource \"google_logging_project_sink\" \"my-sink\" {",
      "    name = \"my-pubsub-instance-sink\"",
      "",
      "    # Can export to pubsub, cloud storage, or bigtable",
      "    destination = \"pubsub.googleapis.com/projects/my-project/topics/instance-activity\"",
      "",
      "    # Log all WARN or higher severity messages relating to instances",
      "    filter = \"resource.type = gce_instance AND severity >= WARN\"",
      "",
      "    # Use a unique writer (creates a unique service account used for writing)",
      "    unique_writer_identity = true",
      "}"
    ]
  },
  "google-resource-pubsub_subscription": {
    "description": "Defines pubsub_subscription",
    "prefix": "tf-google-resource-pubsub_subscription",
    "body": [
      "resource \"google_pubsub_topic\" \"default-topic\" {",
      "  name = \"default-topic\"",
      "}",
      "",
      "resource \"google_pubsub_subscription\" \"default\" {",
      "  name  = \"default-subscription\"",
      "  topic = \"${google_pubsub_topic.default-topic.name}\"",
      "",
      "  ack_deadline_seconds = 20",
      "",
      "  push_config {",
      "    push_endpoint = \"https://example.com/push\"",
      "",
      "    attributes {",
      "      x-goog-version = \"v1\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "google-resource-pubsub_subscription_iam": {
    "description": "Defines pubsub_subscription_iam",
    "prefix": "tf-google-resource-pubsub_subscription_iam",
    "body": [
      "data \"google_iam_policy\" \"admin\" {",
      "  binding {",
      "    role    = \"roles/editor\"",
      "    members = [",
      "      \"user:jane@example.com\",",
      "    ]",
      "  }",
      "}",
      "",
      "resource \"google_pubsub_subscription_iam_policy\" \"editor\" {",
      "  subscription = \"your-subscription-name\"",
      "  policy_data  = \"${data.google_iam_policy.admin.policy_data}\"",
      "}"
    ]
  },
  "google-resource-pubsub_topic": {
    "description": "Defines pubsub_topic",
    "prefix": "tf-google-resource-pubsub_topic",
    "body": [
      "resource \"google_pubsub_topic\" \"mytopic\" {",
      "  name = \"default-topic\"",
      "}"
    ]
  },
  "google-resource-pubsub_topic_iam": {
    "description": "Defines pubsub_topic_iam",
    "prefix": "tf-google-resource-pubsub_topic_iam",
    "body": [
      "data \"google_iam_policy\" \"admin\" {",
      "  binding {",
      "    role    = \"roles/editor\"",
      "    members = [",
      "      \"user:jane@example.com\",",
      "    ]",
      "  }",
      "}",
      "",
      "resource \"google_pubsub_topic_iam_policy\" \"editor\" {",
      "  topic       = \"your-topic-name\"",
      "  policy_data = \"${data.google_iam_policy.admin.policy_data}\"",
      "}"
    ]
  },
  "google-resource-runtimeconfig_config": {
    "description": "Defines runtimeconfig_config",
    "prefix": "tf-google-resource-runtimeconfig_config",
    "body": [
      "resource \"google_runtimeconfig_config\" \"my-runtime-config\" {",
      " \tname = \"my-service-runtime-config\"",
      " \tdescription = \"Runtime configuration values for my service\"",
      "}"
    ]
  },
  "google-resource-runtimeconfig_variable": {
    "description": "Defines runtimeconfig_variable",
    "prefix": "tf-google-resource-runtimeconfig_variable",
    "body": [
      "resource \"google_runtimeconfig_config\" \"my-runtime-config\" {",
      " \tname = \"my-service-runtime-config\"",
      " \tdescription = \"Runtime configuration values for my service\"",
      "}",
      "",
      "resource \"google_runtimeconfig_variable\" \"environment\" {",
      "\tparent = \"${google_runtimeconfig_config.my-runtime-config.name}\"",
      "\tname = \"prod-variables/hostname\"",
      "\ttext = \"example.com\"",
      "}"
    ]
  },
  "google-resource-sourcerepo_repository": {
    "description": "Defines sourcerepo_repository",
    "prefix": "tf-google-resource-sourcerepo_repository",
    "body": [
      "resource \"google_sourcerepo_repository\" \"frontend\" {",
      "  name = \"frontend\"",
      "}"
    ]
  },
  "google-resource-spanner_database": {
    "description": "Defines spanner_database",
    "prefix": "tf-google-resource-spanner_database",
    "body": [
      "resource \"google_spanner_instance\" \"main\" {",
      "  config       = \"regional-europe-west1\"",
      "  display_name = \"main-instance\"",
      "}",
      "",
      "resource \"google_spanner_database\" \"db\" {",
      "  instance  = \"${google_spanner_instance.main.name}\"",
      "  name      = \"main-instance\"",
      "  ddl       =  [",
      "    \"CREATE TABLE t1 (t1 INT64 NOT NULL,) PRIMARY KEY(t1)\",",
      "    \"CREATE TABLE t2 (t2 INT64 NOT NULL,) PRIMARY KEY(t2)\"",
      "  ]",
      "}"
    ]
  },
  "google-resource-spanner_database_iam": {
    "description": "Defines spanner_database_iam",
    "prefix": "tf-google-resource-spanner_database_iam",
    "body": [
      "data \"google_iam_policy\" \"admin\" {",
      "  binding {",
      "    role = \"roles/editor\"",
      "",
      "    members = [",
      "      \"user:jane@example.com\",",
      "    ]",
      "  }",
      "}",
      "",
      "resource \"google_spanner_database_iam_policy\" \"database\" {",
      "  instance    = \"your-instance-name\"",
      "  database    = \"your-database-name\"",
      "  policy_data = \"${data.google_iam_policy.admin.policy_data}\"",
      "}"
    ]
  },
  "google-resource-spanner_instance": {
    "description": "Defines spanner_instance",
    "prefix": "tf-google-resource-spanner_instance",
    "body": [
      "resource \"google_spanner_instance\" \"main\" {",
      "  config       = \"regional-europe-west1\"",
      "  display_name = \"main-instance\"",
      "  name         = \"main-instance\"",
      "  num_nodes    = 1",
      "}"
    ]
  },
  "google-resource-spanner_instance_iam": {
    "description": "Defines spanner_instance_iam",
    "prefix": "tf-google-resource-spanner_instance_iam",
    "body": [
      "data \"google_iam_policy\" \"admin\" {",
      "  binding {",
      "    role = \"roles/editor\"",
      "",
      "    members = [",
      "      \"user:jane@example.com\",",
      "    ]",
      "  }",
      "}",
      "",
      "resource \"google_spanner_instance_iam_policy\" \"instance\" {",
      "  instance    = \"your-instance-name\"",
      "  policy_data = \"${data.google_iam_policy.admin.policy_data}\"",
      "}"
    ]
  },
  "google-resource-sql_database": {
    "description": "Defines sql_database",
    "prefix": "tf-google-resource-sql_database",
    "body": [
      "resource \"google_sql_database_instance\" \"master\" {",
      "  name = \"master-instance\"",
      "",
      "  settings {",
      "    tier = \"D0\"",
      "  }",
      "}",
      "",
      "resource \"google_sql_database\" \"users\" {",
      "  name      = \"users-db\"",
      "  instance  = \"${google_sql_database_instance.master.name}\"",
      "  charset   = \"latin1\"",
      "  collation = \"latin1_swedish_ci\"",
      "}"
    ]
  },
  "google-resource-sql_database_instance": {
    "description": "Defines sql_database_instance",
    "prefix": "tf-google-resource-sql_database_instance",
    "body": [
      "resource \"google_sql_database_instance\" \"master\" {",
      "  name = \"master-instance\"",
      "  database_version = \"MYSQL_5_6\"",
      "  # First-generation instance regions are not the conventional",
      "  # Google Compute Engine regions. See argument reference below.",
      "  region = \"us-central\"",
      "",
      "  settings {",
      "    tier = \"D0\"",
      "  }",
      "}"
    ]
  },
  "google-resource-sql_user": {
    "description": "Defines sql_user",
    "prefix": "tf-google-resource-sql_user",
    "body": [
      "resource \"google_sql_database_instance\" \"master\" {",
      "  name = \"master-instance\"",
      "",
      "  settings {",
      "    tier = \"D0\"",
      "  }",
      "}",
      "",
      "resource \"google_sql_user\" \"users\" {",
      "  name     = \"me\"",
      "  instance = \"${google_sql_database_instance.master.name}\"",
      "  host     = \"me.com\"",
      "  password = \"changeme\"",
      "}"
    ]
  },
  "google-resource-storage_bucket": {
    "description": "Defines storage_bucket",
    "prefix": "tf-google-resource-storage_bucket",
    "body": [
      "resource \"google_storage_bucket\" \"image-store\" {",
      "  name     = \"image-store-bucket\"",
      "  location = \"EU\"",
      "",
      "  website {",
      "    main_page_suffix = \"index.html\"",
      "    not_found_page   = \"404.html\"",
      "  }",
      "}"
    ]
  },
  "google-resource-storage_bucket_acl": {
    "description": "Defines storage_bucket_acl",
    "prefix": "tf-google-resource-storage_bucket_acl",
    "body": [
      "resource \"google_storage_bucket\" \"image-store\" {",
      "  name     = \"image-store-bucket\"",
      "  location = \"EU\"",
      "}",
      "",
      "resource \"google_storage_bucket_acl\" \"image-store-acl\" {",
      "  bucket = \"${google_storage_bucket.image-store.name}\"",
      "",
      "  role_entity = [",
      "    \"OWNER:user-my.email@gmail.com\",",
      "    \"READER:group-mygroup\",",
      "  ]",
      "}"
    ]
  },
  "google-resource-storage_bucket_iam": {
    "description": "Defines storage_bucket_iam",
    "prefix": "tf-google-resource-storage_bucket_iam",
    "body": [
      "resource \"google_storage_bucket_iam_binding\" \"binding\" {",
      "  bucket = \"your-bucket-name\"",
      "  role        = \"roles/storage.objectViewer\"",
      "",
      "  members = [",
      "    \"user:jane@example.com\",",
      "  ]",
      "}"
    ]
  },
  "google-resource-storage_bucket_object": {
    "description": "Defines storage_bucket_object",
    "prefix": "tf-google-resource-storage_bucket_object",
    "body": [
      "resource \"google_storage_bucket_object\" \"picture\" {",
      "  name   = \"butterfly01\"",
      "  source = \"/images/nature/garden-tiger-moth.jpg\"",
      "  bucket = \"image-store\"",
      "}"
    ]
  },
  "google-resource-storage_default_object_acl": {
    "description": "Defines storage_default_object_acl",
    "prefix": "tf-google-resource-storage_default_object_acl",
    "body": [
      "resource \"google_storage_bucket\" \"image-store\" {",
      "  name     = \"image-store-bucket\"",
      "  location = \"EU\"",
      "}",
      "",
      "resource \"google_storage_default_object_acl\" \"image-store-default-acl\" {",
      "  bucket = \"${google_storage_bucket.image-store.name}\"",
      "  role_entity = [",
      "    \"OWNER:user-my.email@gmail.com\",",
      "    \"READER:group-mygroup\",",
      "  ]",
      "}"
    ]
  },
  "google-resource-storage_notification": {
    "description": "Defines storage_notification",
    "prefix": "tf-google-resource-storage_notification",
    "body": [
      "resource \"google_storage_bucket\" \"bucket\" {",
      "\tname = \"default_bucket\"",
      "}",
      "\t\t",
      "resource \"google_pubsub_topic\" \"topic\" {",
      "\tname = \"default_topic\"",
      "}",
      "",
      "// In order to enable notifications,",
      "// a GCS service account unique to each project",
      "// must have the IAM permission \"projects.topics.publish\" to a Cloud Pub/Sub topic from this project",
      "// The only reference to this requirement can be found here:",
      "// https://cloud.google.com/storage/docs/gsutil/commands/notification",
      "// The GCS service account has the format of <project-id>@gs-project-accounts.iam.gserviceaccount.com",
      "// API for retrieving it https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get",
      "",
      "resource \"google_pubsub_topic_iam_binding\" \"binding\" {",
      "\ttopic       = \"${google_pubsub_topic.topic.name}\"",
      "\trole        = \"roles/pubsub.publisher\"",
      "\t\t  ",
      "\tmembers     = [\"serviceAccount:my-project-id@gs-project-accounts.iam.gserviceaccount.com\"]",
      "}",
      "",
      "resource \"google_storage_notification\" \"notification\" {",
      "\tbucket            = \"${google_storage_bucket.bucket.name}\"",
      "\tpayload_format    = \"JSON_API_V1\"",
      "\ttopic             = \"${google_pubsub_topic.topic.id}\"",
      "\tevent_types       = [\"%s\",\"%s\"]",
      "\tcustom_attributes {",
      "\t\tnew-attribute = \"new-attribute-value\"",
      "\t}",
      "\tdepends_on        = [\"google_pubsub_topic_iam_binding.binding\"]",
      "}"
    ]
  },
  "google-resource-storage_object_acl": {
    "description": "Defines storage_object_acl",
    "prefix": "tf-google-resource-storage_object_acl",
    "body": [
      "resource \"google_storage_bucket\" \"image-store\" {",
      "  name     = \"image-store-bucket\"",
      "  location = \"EU\"",
      "}",
      "",
      "resource \"google_storage_bucket_object\" \"image\" {",
      "  name   = \"image1\"",
      "  bucket = \"${google_storage_bucket.image-store.name}\"",
      "  source = \"image1.jpg\"",
      "}",
      "",
      "resource \"google_storage_object_acl\" \"image-store-acl\" {",
      "  bucket = \"${google_storage_bucket.image-store.name}\"",
      "  object = \"${google_storage_bucket_object.image.name}\"",
      "",
      "  role_entity = [",
      "    \"OWNER:user-my.email@gmail.com\",",
      "    \"READER:group-mygroup\",",
      "  ]",
      "}"
    ]
  },
  "google-resource-usage_export_bucket": {
    "description": "Defines usage_export_bucket",
    "prefix": "tf-google-resource-usage_export_bucket",
    "body": [
      "resource \"google_project_usage_export_bucket\" \"export\" {",
      "  project      = \"foo\"",
      "  bucket_name  = \"bar\"",
      "}"
    ]
  },
  "grafana-resource-alert_notification": {
    "description": "Defines alert_notification",
    "prefix": "tf-grafana-resource-alert_notification",
    "body": [
      "resource \"grafana_alert_notification\" \"email_someteam\" {",
      "  name = \"Email that team\"",
      "  type = \"email\"",
      "  is_default = false",
      "",
      "  settings {",
      "    \"addresses\" = \"foo@example.net;bar@example.net\"",
      "    \"uploadImage\" = \"false\"",
      "  }",
      "}"
    ]
  },
  "grafana-resource-dashboard": {
    "description": "Defines dashboard",
    "prefix": "tf-grafana-resource-dashboard",
    "body": [
      "resource \"grafana_dashboard\" \"metrics\" {",
      "  config_json = \"${file(\"grafana-dashboard.json\")}\"",
      "}"
    ]
  },
  "grafana-resource-data_source": {
    "description": "Defines data_source",
    "prefix": "tf-grafana-resource-data_source",
    "body": [
      "resource \"grafana_data_source\" \"metrics\" {",
      "  type          = \"influxdb\"",
      "  name          = \"myapp-metrics\"",
      "  url           = \"http://influxdb.example.net:8086/\"",
      "  username      = \"myapp\"",
      "  password      = \"foobarbaz\"",
      "  database_name = \"${influxdb_database.metrics.name}\"",
      "}"
    ]
  },
  "heroku-data-app": {
    "description": "Defines app",
    "prefix": "tf-heroku-data-app",
    "body": [
      "# Create a new Heroku app",
      "data \"heroku_app\" \"default\"",
      "  name   = \"my-cool-app\"",
      "}"
    ]
  },
  "heroku-data-space": {
    "description": "Defines space",
    "prefix": "tf-heroku-data-space",
    "body": [
      "# Look up a Heroku Private Space",
      "data \"heroku_space\" \"default\"",
      "  name   = \"my-secret-space\"",
      "}"
    ]
  },
  "heroku-resource-addon": {
    "description": "Defines addon",
    "prefix": "tf-heroku-resource-addon",
    "body": [
      "# Create a new Heroku app",
      "resource \"heroku_app\" \"default\" {",
      "  name = \"test-app\"",
      "}",
      "",
      "# Create a database, and configure the app to use it",
      "resource \"heroku_addon\" \"database\" {",
      "  app  = \"${heroku_app.default.name}\"",
      "  plan = \"heroku-postgresql:hobby-basic\"",
      "}",
      "",
      "# Add a web-hook addon for the app",
      "resource \"heroku_addon\" \"webhook\" {",
      "  app  = \"${heroku_app.default.name}\"",
      "  plan = \"deployhooks:http\"",
      "",
      "  config {",
      "    url = \"http://google.com\"",
      "  }",
      "}"
    ]
  },
  "heroku-resource-addon_attachment": {
    "description": "Defines addon_attachment",
    "prefix": "tf-heroku-resource-addon_attachment",
    "body": [
      "resource \"heroku_addon_attachment\" \"database\" {",
      "  app_id  = \"${heroku_app.default.id}\"",
      "  addon_id = \"${heroku_addon.database.id}\"",
      "}"
    ]
  },
  "heroku-resource-app": {
    "description": "Defines app",
    "prefix": "tf-heroku-resource-app",
    "body": [
      "# Create a new Heroku app",
      "resource \"heroku_app\" \"default\" {",
      "  name   = \"my-cool-app\"",
      "  region = \"us\"",
      "",
      "  config_vars {",
      "    FOOBAR = \"baz\"",
      "  }",
      "",
      "  buildpacks = [",
      "    \"heroku/go\"",
      "  ]",
      "}"
    ]
  },
  "heroku-resource-app_feature": {
    "description": "Defines app_feature",
    "prefix": "tf-heroku-resource-app_feature",
    "body": [
      "resource \"heroku_app_feature\" \"log_runtime_metrics\" {",
      "  app = \"test-app\"",
      "  name = \"log-runtime-metrics\"",
      "}"
    ]
  },
  "heroku-resource-cert": {
    "description": "Defines cert",
    "prefix": "tf-heroku-resource-cert",
    "body": [
      "# Create a new Heroku app",
      "resource \"heroku_app\" \"default\" {",
      "  name = \"test-app\"",
      "}",
      "",
      "# Add-on SSL to application",
      "resource \"heroku_addon\" \"ssl\" {",
      "  app  = \"${heroku_app.default.name}\"",
      "  plan = \"ssl\"",
      "}",
      "",
      "# Establish certificate for a given application",
      "resource \"heroku_cert\" \"ssl_certificate\" {",
      "  app               = \"${heroku_app.default.name}\"",
      "  certificate_chain = \"${file(\"server.crt\")}\"",
      "  private_key       = \"${file(\"server.key\")}\"",
      "  depends_on        = \"heroku_addon.ssl\"",
      "}"
    ]
  },
  "heroku-resource-domain": {
    "description": "Defines domain",
    "prefix": "tf-heroku-resource-domain",
    "body": [
      "# Create a new Heroku app",
      "resource \"heroku_app\" \"default\" {",
      "  name = \"test-app\"",
      "}",
      "",
      "# Associate a custom domain",
      "resource \"heroku_domain\" \"default\" {",
      "  app      = \"${heroku_app.default.name}\"",
      "  hostname = \"terraform.example.com\"",
      "}"
    ]
  },
  "heroku-resource-drain": {
    "description": "Defines drain",
    "prefix": "tf-heroku-resource-drain",
    "body": [
      "resource \"heroku_drain\" \"default\" {",
      "  app = \"test-app\"",
      "  url = \"syslog://terraform.example.com:1234\"",
      "}"
    ]
  },
  "heroku-resource-pipeline": {
    "description": "Defines pipeline",
    "prefix": "tf-heroku-resource-pipeline",
    "body": [
      "# Create Heroku apps for staging and production",
      "resource \"heroku_app\" \"staging\" {",
      "  name = \"test-app-staging\"",
      "}",
      "",
      "resource \"heroku_app\" \"production\" {",
      "  name = \"test-app-production\"",
      "}",
      "",
      "# Create a Heroku pipeline",
      "resource \"heroku_pipeline\" \"test-app\" {",
      "  name = \"test-app\"",
      "}",
      "",
      "# Couple apps to different pipeline stages",
      "resource \"heroku_pipeline_coupling\" \"staging\" {",
      "  app      = \"${heroku_app.staging.name}\"",
      "  pipeline = \"${heroku_pipeline.test-app.id}\"",
      "  stage    = \"staging\"",
      "}",
      "",
      "resource \"heroku_pipeline_coupling\" \"production\" {",
      "  app      = \"${heroku_app.production.name}\"",
      "  pipeline = \"${heroku_pipeline.test-app.id}\"",
      "  stage    = \"production\"",
      "}"
    ]
  },
  "heroku-resource-pipeline_coupling": {
    "description": "Defines pipeline_coupling",
    "prefix": "tf-heroku-resource-pipeline_coupling",
    "body": [
      "# Create Heroku apps for staging and production",
      "resource \"heroku_app\" \"staging\" {",
      "  name = \"test-app-staging\"",
      "}",
      "",
      "resource \"heroku_app\" \"production\" {",
      "  name = \"test-app-production\"",
      "}",
      "",
      "# Create a Heroku pipeline",
      "resource \"heroku_pipeline\" \"test-app\" {",
      "  name = \"test-app\"",
      "}",
      "",
      "# Couple apps to different pipeline stages",
      "resource \"heroku_pipeline_coupling\" \"staging\" {",
      "  app      = \"${heroku_app.staging.name}\"",
      "  pipeline = \"${heroku_pipeline.test-app.id}\"",
      "  stage    = \"staging\"",
      "}",
      "",
      "resource \"heroku_pipeline_coupling\" \"production\" {",
      "  app      = \"${heroku_app.production.name}\"",
      "  pipeline = \"${heroku_pipeline.test-app.id}\"",
      "  stage    = \"production\"",
      "}"
    ]
  },
  "heroku-resource-space": {
    "description": "Defines space",
    "prefix": "tf-heroku-resource-space",
    "body": [
      "// Create a new Heroku space",
      "resource \"heroku_space\" \"default\" {",
      "  name = \"test-space\"",
      "  organization = \"my-company\"",
      "  region = \"virginia\"",
      "}",
      "",
      "// Create a new Heroku app in test-space",
      "resource \"heroku_app\" \"default\" {",
      "  name = \"test-app\"",
      "  space = \"${heroku_space.default.name}\"",
      "  organization = {",
      "    name = \"my-company\"",
      "  }",
      "}"
    ]
  },
  "icinga2-resource-checkcommands": {
    "description": "Defines checkcommands",
    "prefix": "tf-icinga2-resource-checkcommands",
    "body": [
      "# Configure a new checkcommand on an Icinga2 Server, that can be used to monitor hosts and/or services",
      "provider \"icinga2\" {",
      "  api_url = \"https://192.168.33.5:5665/v1\"",
      "}",
      "",
      "resource \"icinga2_checkcommand\" \"apache_status\" {",
      "  name      = \"apache_status\"",
      "  templates = [\"apache-status\", \"plugin-check-command\", \"plugin-check-command\", \"ipv4-or-ipv6\"]",
      "  command   = \"/usr/lib64/nagios/plugins/check_apache_status.pl\"",
      "",
      "  arguments = {",
      "    \"-H\" = \"$apache_status_address$\"",
      "    \"-c\" = \"$apache_status_critical$\"",
      "    \"-p\" = \"$apache_status_port$\"",
      "  }",
      "}"
    ]
  },
  "icinga2-resource-host": {
    "description": "Defines host",
    "prefix": "tf-icinga2-resource-host",
    "body": [
      "# Configure a new host to be monitored by an Icinga2 Server",
      "provider \"icinga2\" {",
      "  api_url = \"https://192.168.33.5:5665/v1\"",
      "}",
      "",
      "resource \"icinga2_host\" \"host\" {",
      "  hostname      = \"terraform-host-1\"",
      "  address       = \"10.10.10.1\"",
      "  check_command = \"hostalive\"",
      "  templates     = [\"bp-host-web\"]",
      "",
      "  vars {",
      "    os        = \"linux\"",
      "    osver     = \"1\"",
      "    allowance = \"none\"",
      "  }",
      "}"
    ]
  },
  "icinga2-resource-hostgroup": {
    "description": "Defines hostgroup",
    "prefix": "tf-icinga2-resource-hostgroup",
    "body": [
      "# Configure a new hostgroup to be monitored by an Icinga2 Server",
      "provider \"icinga2\" {",
      "  api_url = \"https://192.168.33.5:5665/v1\"",
      "}",
      "",
      "resource \"icinga2_hostgroup\" \"my-hostgroup\" {",
      "  name         = \"terraform-hostgroup-1\"",
      "  display_name = \"Terraform Test HostGroup\"",
      "}"
    ]
  },
  "icinga2-resource-service": {
    "description": "Defines service",
    "prefix": "tf-icinga2-resource-service",
    "body": [
      "# Configure a new service to be monitored by an Icinga2 Server",
      "provider \"icinga2\" {",
      "  api_url = \"https://192.168.33.5:5665/v1\"",
      "}",
      "",
      "resource \"icinga2_service\" \"my-service\" {",
      "  name          = \"ssh\"",
      "  hostname      = \"c1-mysql-1\"",
      "  check_command = \"ssh\"",
      "}"
    ]
  },
  "ignition-data-config": {
    "description": "Defines config",
    "prefix": "tf-ignition-data-config",
    "body": [
      "data \"ignition_config\" \"example\" {",
      "\tsystemd = [",
      "\t\t\"${data.ignition_systemd_unit.example.id}\",",
      "\t]",
      "}"
    ]
  },
  "ignition-data-directory": {
    "description": "Defines directory",
    "prefix": "tf-ignition-data-directory",
    "body": [
      "data \"ignition_directory\" \"folder\" {",
      "\tfilesystem = \"foo\"",
      "\tpath = \"/folder\"",
      "}"
    ]
  },
  "ignition-data-disk": {
    "description": "Defines disk",
    "prefix": "tf-ignition-data-disk",
    "body": [
      "data \"ignition_disk\" \"foo\" {",
      "\tdevice = \"/dev/sda\"",
      "\tpartition {",
      "\t\tstart = 2048",
      "\t\tsize = 196037632",
      "\t}",
      "}"
    ]
  },
  "ignition-data-file": {
    "description": "Defines file",
    "prefix": "tf-ignition-data-file",
    "body": [
      "data \"ignition_file\" \"hello\" {",
      "\tfilesystem = \"foo\"",
      "\tpath = \"/hello.txt\"",
      "\tcontent {",
      "\t\tcontent = \"Hello World!\"",
      "\t}",
      "}"
    ]
  },
  "ignition-data-filesystem": {
    "description": "Defines filesystem",
    "prefix": "tf-ignition-data-filesystem",
    "body": [
      "data \"ignition_filesystem\" \"foo\" {",
      "\tname = \"root\"",
      "\tmount {",
      "\t\tdevice = \"/dev/disk/by-label/ROOT\"",
      "\t\tformat = \"xfs\"",
      "\t\tcreate = true",
      "\t\toptions = [\"-L\", \"ROOT\"]",
      "\t}",
      "}"
    ]
  },
  "ignition-data-group": {
    "description": "Defines group",
    "prefix": "tf-ignition-data-group",
    "body": [
      "data \"ignition_group\" \"foo\" {",
      "\tname = \"foo\"",
      "}"
    ]
  },
  "ignition-data-link": {
    "description": "Defines link",
    "prefix": "tf-ignition-data-link",
    "body": [
      "data \"ignition_link\" \"symlink\" {",
      "\tfilesystem = \"foo\"",
      "\tpath = \"/symlink\"",
      "    target = \"/foo\"",
      "}"
    ]
  },
  "ignition-data-networkd_unit": {
    "description": "Defines networkd_unit",
    "prefix": "tf-ignition-data-networkd_unit",
    "body": [
      "data \"ignition_networkd_unit\" \"example\" {",
      "\tname = \"00-eth0.network\"",
      "\tcontent = \"[Match]\\nName=eth0\\n\\n[Network]\\nAddress=10.0.1.7\"",
      "}"
    ]
  },
  "ignition-data-raid": {
    "description": "Defines raid",
    "prefix": "tf-ignition-data-raid",
    "body": [
      "data \"ignition_raid\" \"md\" {",
      "\tname = \"data\"",
      "\tlevel = \"stripe\"",
      "\tdevices = [",
      "      \t\"/dev/disk/by-partlabel/raid.1.1\",",
      "        \"/dev/disk/by-partlabel/raid.1.2\"",
      "\t]",
      "}",
      "",
      "data \"ignition_disk\" \"disk1\" {",
      "\tdevice = \"/dev/sdb\"",
      "\twipe_table = true",
      "\tpartition {",
      "\t\tlabel = \"raid.1.1\"",
      "        number = 1",
      "        size = 20480",
      "        start = 0",
      "\t}",
      "}",
      "",
      "data \"ignition_disk\" \"disk2\" {",
      "\tdevice = \"/dev/sdc\"",
      "\twipe_table = true",
      "\tpartition {",
      "\t\tlabel = \"raid.1.2\"",
      "        number = 1",
      "        size = 20480",
      "        start = 0",
      "\t}",
      "}"
    ]
  },
  "ignition-data-systemd_unit": {
    "description": "Defines systemd_unit",
    "prefix": "tf-ignition-data-systemd_unit",
    "body": [
      "data \"ignition_systemd_unit\" \"example\" {",
      "\tname = \"example.service\"",
      "\tcontent = \"[Service]\\nType=oneshot\\nExecStart=/usr/bin/echo Hello World\\n\\n[Install]\\nWantedBy=multi-user.target\"",
      "}"
    ]
  },
  "ignition-data-user": {
    "description": "Defines user",
    "prefix": "tf-ignition-data-user",
    "body": [
      "data \"ignition_user\" \"foo\" {",
      "\tname = \"foo\"",
      "\thome_dir = \"/home/foo/\"",
      "\tshell = \"/bin/bash\"",
      "}"
    ]
  },
  "influxdb-resource-continuous_query": {
    "description": "Defines continuous_query",
    "prefix": "tf-influxdb-resource-continuous_query",
    "body": [
      "resource \"influxdb_database\" \"test\" {",
      "    name = \"terraform-test\"",
      "}",
      "",
      "resource \"influxdb_continuous_query\" \"minnie\" {",
      "    name = \"minnie\"",
      "    database = \"${influxdb_database.test.name}\"",
      "    query = \"SELECT min(mouse) INTO min_mouse FROM zoo GROUP BY time(30m)\"",
      "}",
      ""
    ]
  },
  "influxdb-resource-database": {
    "description": "Defines database",
    "prefix": "tf-influxdb-resource-database",
    "body": [
      "resource \"influxdb_database\" \"metrics\" {",
      "    name = \"awesome_app\"",
      "}",
      "",
      "resource \"influxdb_database\" \"metrics_aggregation\" {",
      "  name = \"testdb11\"",
      "  retention_policies = [",
      "    {",
      "      name = \"52weeks\",",
      "      duration = \"52w\"",
      "      default = \"true\"",
      "    },",
      "  ]",
      "}"
    ]
  },
  "influxdb-resource-user": {
    "description": "Defines user",
    "prefix": "tf-influxdb-resource-user",
    "body": [
      "resource \"influxdb_database\" \"green\" {",
      "    name = \"terraform-green\"",
      "}",
      "",
      "resource \"influxdb_user\" \"paul\" {",
      "    name = \"paul\"",
      "    password = \"super-secret\"",
      "",
      "    grant {",
      "      database = \"${influxdb_database.green.name}\"",
      "      privilege = \"write\"",
      "    }",
      "}"
    ]
  },
  "kubernetes-data-service": {
    "description": "Defines service",
    "prefix": "tf-kubernetes-data-service",
    "body": [
      "data \"kubernetes_service\" \"example\" {",
      "  metadata {",
      "    name = \"terraform-example\"",
      "  }",
      "}",
      "",
      "resource \"aws_route53_record\" \"example\" {",
      "  zone_id = \"${data.aws_route53_zone.k8.zone_id}\"",
      "  name    = \"example\"",
      "  type    = \"CNAME\"",
      "  ttl     = \"300\"",
      "  records = [\"${data.kubernetes_service.example.load_balancer_ingress.0.hostname}\"]",
      "}"
    ]
  },
  "kubernetes-data-storage_class": {
    "description": "Defines storage_class",
    "prefix": "tf-kubernetes-data-storage_class",
    "body": [
      "data \"kubernetes_storage_class\" \"example\" {",
      "  metadata {",
      "    name = \"terraform-example\"",
      "  }",
      "}"
    ]
  },
  "kubernetes-resource-config_map": {
    "description": "Defines config_map",
    "prefix": "tf-kubernetes-resource-config_map",
    "body": [
      "resource \"kubernetes_config_map\" \"example\" {",
      "  metadata {",
      "    name = \"my-config\"",
      "  }",
      "",
      "  data {",
      "    api_host = \"myhost:443\"",
      "    db_host  = \"dbhost:5432\"",
      "  }",
      "}"
    ]
  },
  "kubernetes-resource-horizontal_pod_autoscaler": {
    "description": "Defines horizontal_pod_autoscaler",
    "prefix": "tf-kubernetes-resource-horizontal_pod_autoscaler",
    "body": [
      "resource \"kubernetes_horizontal_pod_autoscaler\" \"example\" {",
      "  metadata {",
      "    name = \"terraform-example\"",
      "  }",
      "  spec {",
      "    max_replicas = 10",
      "    min_replicas = 8",
      "    scale_target_ref {",
      "      kind = \"ReplicationController\"",
      "      name = \"MyApp\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "kubernetes-resource-limit_range": {
    "description": "Defines limit_range",
    "prefix": "tf-kubernetes-resource-limit_range",
    "body": [
      "resource \"kubernetes_limit_range\" \"example\" {",
      "\tmetadata {",
      "\t\tname = \"terraform-example\"",
      "\t}",
      "\tspec {",
      "\t\tlimit {",
      "\t\t\ttype = \"Pod\"",
      "\t\t\tmax {",
      "\t\t\t\tcpu = \"200m\"",
      "\t\t\t\tmemory = \"1024M\"",
      "\t\t\t}",
      "\t\t}",
      "\t\tlimit {",
      "\t\t\ttype = \"PersistentVolumeClaim\"",
      "\t\t\tmin {",
      "\t\t\t\tstorage = \"24M\"",
      "\t\t\t}",
      "\t\t}",
      "\t\tlimit {",
      "\t\t\ttype = \"Container\"",
      "\t\t\tdefault {",
      "\t\t\t\tcpu = \"50m\"",
      "\t\t\t\tmemory = \"24M\"",
      "\t\t\t}",
      "\t\t}",
      "\t}",
      "}"
    ]
  },
  "kubernetes-resource-namespace": {
    "description": "Defines namespace",
    "prefix": "tf-kubernetes-resource-namespace",
    "body": [
      "resource \"kubernetes_namespace\" \"example\" {",
      "  metadata {",
      "    annotations {",
      "      name = \"example-annotation\"",
      "    }",
      "",
      "    labels {",
      "      mylabel = \"label-value\"",
      "    }",
      "",
      "    name = \"terraform-example-namespace\"",
      "  }",
      "}",
      ""
    ]
  },
  "kubernetes-resource-persistent_volume": {
    "description": "Defines persistent_volume",
    "prefix": "tf-kubernetes-resource-persistent_volume",
    "body": [
      "resource \"kubernetes_persistent_volume\" \"example\" {",
      "\tmetadata {",
      "\t\tname = \"terraform-example\"",
      "\t}",
      "\tspec {",
      "\t\tcapacity {",
      "\t\t\tstorage = \"2Gi\"",
      "\t\t}",
      "\t\taccess_modes = [\"ReadWriteMany\"]",
      "\t\tpersistent_volume_source {",
      "\t\t\tvsphere_volume {",
      "\t\t\t\tvolume_path = \"/absolute/path\"",
      "\t\t\t}",
      "\t\t}",
      "\t}",
      "}"
    ]
  },
  "kubernetes-resource-persistent_volume_claim": {
    "description": "Defines persistent_volume_claim",
    "prefix": "tf-kubernetes-resource-persistent_volume_claim",
    "body": [
      "resource \"kubernetes_persistent_volume_claim\" \"example\" {",
      "  metadata {",
      "    name = \"exampleclaimname\"",
      "  }",
      "  spec {",
      "    access_modes = [\"ReadWriteMany\"]",
      "    resources {",
      "      requests {",
      "        storage = \"5Gi\"",
      "      }",
      "    }",
      "    volume_name = \"${kubernetes_persistent_volume.example.metadata.0.name}\"",
      "  }",
      "}",
      "",
      "resource \"kubernetes_persistent_volume\" \"example\" {",
      "  metadata {",
      "    name = \"examplevolumename\"",
      "  }",
      "  spec {",
      "    capacity {",
      "      storage = \"10Gi\"",
      "    }",
      "    access_modes = [\"ReadWriteMany\"]",
      "    persistent_volume_source {",
      "      gce_persistent_disk {",
      "        pd_name = \"test-123\"",
      "      }",
      "    }",
      "  }",
      "}"
    ]
  },
  "kubernetes-resource-pod": {
    "description": "Defines pod",
    "prefix": "tf-kubernetes-resource-pod",
    "body": [
      "resource \"kubernetes_pod\" \"test\" {",
      "  metadata {",
      "    name = \"terraform-example\"",
      "  }",
      "",
      "  spec {",
      "    container {",
      "      image = \"nginx:1.7.9\"",
      "      name  = \"example\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "kubernetes-resource-replication_controller": {
    "description": "Defines replication_controller",
    "prefix": "tf-kubernetes-resource-replication_controller",
    "body": [
      "resource \"kubernetes_replication_controller\" \"example\" {",
      "  metadata {",
      "    name = \"terraform-example\"",
      "    labels {",
      "      test = \"MyExampleApp\"",
      "    }",
      "  }",
      "",
      "  spec {",
      "    selector {",
      "      test = \"MyExampleApp\"",
      "    }",
      "    template {",
      "      container {",
      "        image = \"nginx:1.7.8\"",
      "        name  = \"example\"",
      "",
      "        resources{",
      "          limits{",
      "            cpu    = \"0.5\"",
      "            memory = \"512Mi\"",
      "          }",
      "          requests{",
      "            cpu    = \"250m\"",
      "            memory = \"50Mi\"",
      "          }",
      "        }",
      "      }",
      "    }",
      "  }",
      "}"
    ]
  },
  "kubernetes-resource-resource_quota": {
    "description": "Defines resource_quota",
    "prefix": "tf-kubernetes-resource-resource_quota",
    "body": [
      "resource \"kubernetes_resource_quota\" \"example\" {",
      "  metadata {",
      "    name = \"terraform-example\"",
      "  }",
      "  spec {",
      "    hard {",
      "      pods = 10",
      "    }",
      "    scopes = [\"BestEffort\"]",
      "  }",
      "}"
    ]
  },
  "kubernetes-resource-secret": {
    "description": "Defines secret",
    "prefix": "tf-kubernetes-resource-secret",
    "body": [
      "resource \"kubernetes_secret\" \"example\" {",
      "  metadata {",
      "    name = \"basic-auth\"",
      "  }",
      "",
      "  data {",
      "    username = \"admin\"",
      "    password = \"P4ssw0rd\"",
      "  }",
      "",
      "  type = \"kubernetes.io/basic-auth\"",
      "}"
    ]
  },
  "kubernetes-resource-service": {
    "description": "Defines service",
    "prefix": "tf-kubernetes-resource-service",
    "body": [
      "resource \"kubernetes_service\" \"example\" {",
      "  metadata {",
      "    name = \"terraform-example\"",
      "  }",
      "  spec {",
      "    selector {",
      "      app = \"${kubernetes_pod.example.metadata.0.labels.app}\"",
      "    }",
      "    session_affinity = \"ClientIP\"",
      "    port {",
      "      port = 8080",
      "      target_port = 80",
      "    }",
      "",
      "    type = \"LoadBalancer\"",
      "  }",
      "}",
      "",
      "resource \"kubernetes_pod\" \"example\" {",
      "  metadata {",
      "    name = \"terraform-example\"",
      "    labels {",
      "      app = \"MyApp\"",
      "    }",
      "  }",
      "",
      "  spec {",
      "    container {",
      "      image = \"nginx:1.7.9\"",
      "      name  = \"example\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "kubernetes-resource-service_account": {
    "description": "Defines service_account",
    "prefix": "tf-kubernetes-resource-service_account",
    "body": [
      "resource \"kubernetes_service_account\" \"example\" {",
      "  metadata {",
      "    name = \"terraform-example\"",
      "  }",
      "  secret {",
      "    name = \"${kubernetes_secret.example.metadata.0.name}\"",
      "  }",
      "}",
      "",
      "resource \"kubernetes_secret\" \"example\" {",
      "  metadata {",
      "    name = \"terraform-example\"",
      "  }",
      "}"
    ]
  },
  "kubernetes-resource-storage_class": {
    "description": "Defines storage_class",
    "prefix": "tf-kubernetes-resource-storage_class",
    "body": [
      "resource \"kubernetes_storage_class\" \"example\" {",
      "  metadata {",
      "    name = \"terraform-example\"",
      "  }",
      "  storage_provisioner = \"kubernetes.io/gce-pd\"",
      "  parameters {",
      "  \ttype = \"pd-standard\"",
      "  }",
      "}"
    ]
  },
  "librato-resource-alert": {
    "description": "Defines alert",
    "prefix": "tf-librato-resource-alert",
    "body": [
      "# Create a new Librato alert",
      "resource \"librato_alert\" \"myalert\" {",
      "  name        = \"MyAlert\"",
      "  description = \"A Test Alert\"",
      "  services    = [\"${librato_service.myservice.id}\"]",
      "",
      "  condition {",
      "    type        = \"above\"",
      "    threshold   = 10",
      "    metric_name = \"librato.cpu.percent.idle\"",
      "  }",
      "}"
    ]
  },
  "librato-resource-metric": {
    "description": "Defines metric",
    "prefix": "tf-librato-resource-metric",
    "body": [
      "# Create a new Librato metric",
      "resource \"librato_metric\" \"mymetric\" {",
      "    name = \"MyMetric\"",
      "    type = \"counter\"",
      "    description = \"A Test Metric\"",
      "    attributes {",
      "      display_stacked = true",
      "    }",
      "}"
    ]
  },
  "librato-resource-service": {
    "description": "Defines service",
    "prefix": "tf-librato-resource-service",
    "body": [
      "# Create a new Librato service",
      "resource \"librato_service\" \"email\" {",
      "  title = \"Email the admins\"",
      "  type  = \"mail\"",
      "",
      "  settings = <<EOF",
      "{",
      "  \"addresses\": \"admin@example.com\"",
      "}",
      "EOF",
      "}"
    ]
  },
  "librato-resource-space": {
    "description": "Defines space",
    "prefix": "tf-librato-resource-space",
    "body": [
      "# Create a new Librato space",
      "resource \"librato_space\" \"default\" {",
      "  name = \"My New Space\"",
      "}"
    ]
  },
  "librato-resource-space_chart": {
    "description": "Defines space_chart",
    "prefix": "tf-librato-resource-space_chart",
    "body": [
      "# Create a new Librato space",
      "resource \"librato_space\" \"my_space\" {",
      "  name = \"My New Space\"",
      "}",
      "",
      "# Create a new chart",
      "resource \"librato_space_chart\" \"server_temperature\" {",
      "  name     = \"Server Temperature\"",
      "  space_id = \"${librato_space.my_space.id}\"",
      "",
      "  stream {",
      "    metric = \"server_temp\"",
      "    source = \"app1\"",
      "  }",
      "",
      "  stream {",
      "    metric           = \"environmental_temp\"",
      "    source           = \"*\"",
      "    group_function   = \"breakout\"",
      "    summary_function = \"average\"",
      "  }",
      "",
      "  stream {",
      "    metric         = \"server_temp\"",
      "    source         = \"%\"",
      "    group_function = \"average\"",
      "  }",
      "}"
    ]
  },
  "local-data-file": {
    "description": "Defines file",
    "prefix": "tf-local-data-file",
    "body": [
      "data \"local_file\" \"foo\" {",
      "    filename = \"${path.module}/foo.bar\"",
      "}"
    ]
  },
  "local-resource-file": {
    "description": "Defines file",
    "prefix": "tf-local-resource-file",
    "body": [
      "resource \"local_file\" \"foo\" {",
      "    content     = \"foo!\"",
      "    filename = \"${path.module}/foo.bar\"",
      "}"
    ]
  },
  "logentries-data-logentries_logset": {
    "description": "Defines logentries_logset",
    "prefix": "tf-logentries-data-logentries_logset",
    "body": [
      "data \"logentries_logset\" \"logset\" {",
      "  name = \"Example_Logset\"",
      "}",
      "",
      "output \"example_logset_id\" {",
      "  value = \"data.logentries_logset.logset.id\"",
      "}"
    ]
  },
  "logentries-resource-log": {
    "description": "Defines log",
    "prefix": "tf-logentries-resource-log",
    "body": [
      "# Create a log and add it to the log set",
      "resource \"logentries_log\" \"app_log\" {",
      "  logset_id = \"${logentries_logset.host_logs.id}\"",
      "  name      = \"myapp-log\"",
      "  source    = \"token\"",
      "}"
    ]
  },
  "logentries-resource-logset": {
    "description": "Defines logset",
    "prefix": "tf-logentries-resource-logset",
    "body": [
      "# Create a log set",
      "resource \"logentries_logset\" \"host_logs\" {",
      "  name     = \"${var.server}-logs\"",
      "  location = \"www.example.com\"",
      "}"
    ]
  },
  "logicmonitor-data-collectors": {
    "description": "Defines collectors",
    "prefix": "tf-logicmonitor-data-collectors",
    "body": [
      "# Look up a LogicMonitor collector id",
      "data \"logicmonitor_collectors\" \"collectors\" {",
      "  filters {",
      "    \"property\" = \"hostname\"",
      "    \"operator\" = \"~\"",
      "    \"value\" = \"test\"",
      "  },",
      "\"most_recent\" = true",
      "}"
    ]
  },
  "logicmonitor-data-devicegroup": {
    "description": "Defines devicegroup",
    "prefix": "tf-logicmonitor-data-devicegroup",
    "body": [
      "# Look up a LogicMonitor device group id",
      "data \"logicmonitor_device_group\" \"devicegroups\" {",
      "  filters {",
      "    \"property\" = \"name\"",
      "    \"operator\" = \":\"",
      "    \"value\" = \"Production\"",
      "  },",
      "",
      "  filters {",
      "    \"custom_property_name\" = \"app.user\"",
      "    \"operator\" = \":\"",
      "    \"custom_property_value\" = \"api\"",
      "  }",
      "}"
    ]
  },
  "logicmonitor-resource-collector": {
    "description": "Defines collector",
    "prefix": "tf-logicmonitor-resource-collector",
    "body": [
      "# Create a new LogicMonitor collector",
      "resource \"logicmonitor_collector\" \"collector1\" {",
      "  description     = \"my terraformed collector\"",
      "  enable_failback = true",
      "}"
    ]
  },
  "logicmonitor-resource-collectorgroup": {
    "description": "Defines collectorgroup",
    "prefix": "tf-logicmonitor-resource-collectorgroup",
    "body": [
      "# Create a new LogicMonitor collector group",
      "resource \"logicmonitor_collector_group\" \"group1\" {",
      "  name  = \"collector_group_1\"",
      "  description = \"a new test group\"",
      "}"
    ]
  },
  "logicmonitor-resource-device": {
    "description": "Defines device",
    "prefix": "tf-logicmonitor-resource-device",
    "body": [
      "# Create a new LogicMonitor device",
      "resource \"logicmonitor_device\" \"host\" {",
      "  ip_addr = \"10.32.12.18\"",
      "  disable_alerting = true",
      "  collector = \"2\"",
      "  properties {",
      "   \"app\" = \"haproxy\"",
      "   \"system.categories\" = \"a,b,c,d\"",
      "  }",
      "}"
    ]
  },
  "logicmonitor-resource-devicegroup": {
    "description": "Defines devicegroup",
    "prefix": "tf-logicmonitor-resource-devicegroup",
    "body": [
      "# Create a new LogicMonitor device group",
      "resource \"logicmonitor_device_group\" \"group\" {",
      "    name = \"NewTestGroup\"",
      "    description = \"new test group\"",
      "    properties {",
      "     \"group\" = \"test\"",
      "     \"system.categories\" = \"a,b,c,d\"",
      "    }",
      "}"
    ]
  },
  "mailgun-resource-domain": {
    "description": "Defines domain",
    "prefix": "tf-mailgun-resource-domain",
    "body": [
      "# Create a new Mailgun domain",
      "resource \"mailgun_domain\" \"default\" {",
      "  name          = \"test.example.com\"",
      "  spam_action   = \"disabled\"",
      "  smtp_password = \"foobar\"",
      "}"
    ]
  },
  "mysql-resource-database": {
    "description": "Defines database",
    "prefix": "tf-mysql-resource-database",
    "body": [
      "resource \"mysql_database\" \"app\" {",
      "  name = \"my_awesome_app\"",
      "}"
    ]
  },
  "mysql-resource-grant": {
    "description": "Defines grant",
    "prefix": "tf-mysql-resource-grant",
    "body": [
      "resource \"mysql_user\" \"jdoe\" {",
      "  user     = \"jdoe\"",
      "  host     = \"example.com\"",
      "  password = \"password\"",
      "}",
      "",
      "resource \"mysql_grant\" \"jdoe\" {",
      "  user       = \"${mysql_user.jdoe.user}\"",
      "  host       = \"${mysql_user.jdoe.host}\"",
      "  database   = \"app\"",
      "  privileges = [\"SELECT\", \"UPDATE\"]",
      "}"
    ]
  },
  "mysql-resource-user": {
    "description": "Defines user",
    "prefix": "tf-mysql-resource-user",
    "body": [
      "resource \"mysql_user\" \"jdoe\" {",
      "  user               = \"jdoe\"",
      "  host               = \"example.com\"",
      "  plaintext_password = \"password\"",
      "}"
    ]
  },
  "newrelic-data-application": {
    "description": "Defines application",
    "prefix": "tf-newrelic-data-application",
    "body": [
      "data \"newrelic_application\" \"app\" {",
      "  name = \"my-app\"",
      "}",
      "",
      "resource \"newrelic_alert_policy\" \"foo\" {",
      "  name = \"foo\"",
      "}",
      "",
      "resource \"newrelic_alert_condition\" \"foo\" {",
      "  policy_id = \"${newrelic_alert_policy.foo.id}\"",
      "",
      "  name        = \"foo\"",
      "  type        = \"apm_app_metric\"",
      "  entities    = [\"${data.newrelic_application.app.id}\"]",
      "  metric      = \"apdex\"",
      "  runbook_url = \"https://www.example.com\"",
      "",
      "  term {",
      "    duration      = 5",
      "    operator      = \"below\"",
      "    priority      = \"critical\"",
      "    threshold     = \"0.75\"",
      "    time_function = \"all\"",
      "  }",
      "}"
    ]
  },
  "newrelic-data-key_transaction": {
    "description": "Defines key_transaction",
    "prefix": "tf-newrelic-data-key_transaction",
    "body": [
      "data \"newrelic_key_transaction\" \"txn\" {",
      "  name = \"txn\"",
      "}",
      "",
      "resource \"newrelic_alert_policy\" \"foo\" {",
      "  name = \"foo\"",
      "}",
      "",
      "resource \"newrelic_alert_condition\" \"foo\" {",
      "  policy_id = \"${newrelic_alert_policy.foo.id}\"",
      "",
      "  name        = \"foo\"",
      "  type        = \"apm_kt_metric\"",
      "  entities    = [\"${data.newrelic_key_transaction.txn.id}\"]",
      "  metric      = \"error_percentage\"",
      "  runbook_url = \"https://www.example.com\"",
      "",
      "  term {",
      "    duration      = 5",
      "    operator      = \"below\"",
      "    priority      = \"critical\"",
      "    threshold     = \"0.75\"",
      "    time_function = \"all\"",
      "  }",
      "}"
    ]
  },
  "newrelic-resource-alert_channel": {
    "description": "Defines alert_channel",
    "prefix": "tf-newrelic-resource-alert_channel",
    "body": [
      "resource \"newrelic_alert_channel\" \"foo\" {",
      "  name = \"foo\"",
      "  type = \"email\"",
      "",
      "  configuration = {",
      "    recipients              = \"foo@example.com\"",
      "    include_json_attachment = \"1\"",
      "  }",
      "}"
    ]
  },
  "newrelic-resource-alert_condition": {
    "description": "Defines alert_condition",
    "prefix": "tf-newrelic-resource-alert_condition",
    "body": [
      "data \"newrelic_application\" \"app\" {",
      "  name = \"my-app\"",
      "}",
      "",
      "resource \"newrelic_alert_policy\" \"foo\" {",
      "  name = \"foo\"",
      "}",
      "",
      "resource \"newrelic_alert_condition\" \"foo\" {",
      "  policy_id = \"${newrelic_alert_policy.foo.id}\"",
      "",
      "  name        = \"foo\"",
      "  type        = \"apm_app_metric\"",
      "  entities    = [\"${data.newrelic_application.app.id}\"]",
      "  metric      = \"apdex\"",
      "  runbook_url = \"https://www.example.com\"",
      "",
      "  term {",
      "    duration      = 5",
      "    operator      = \"below\"",
      "    priority      = \"critical\"",
      "    threshold     = \"0.75\"",
      "    time_function = \"all\"",
      "  }",
      "}"
    ]
  },
  "newrelic-resource-alert_policy": {
    "description": "Defines alert_policy",
    "prefix": "tf-newrelic-resource-alert_policy",
    "body": [
      "resource \"newrelic_alert_policy\" \"foo\" {",
      "  name = \"foo\"",
      "}"
    ]
  },
  "newrelic-resource-alert_policy_channel": {
    "description": "Defines alert_policy_channel",
    "prefix": "tf-newrelic-resource-alert_policy_channel",
    "body": [
      "resource \"newrelic_alert_policy\" \"foo\" {",
      "  name = \"foo\"",
      "}",
      "",
      "resource \"newrelic_alert_channel\" \"foo\" {",
      "  name = \"foo\"",
      "  type = \"email\"",
      "",
      "  configuration = {",
      "    recipients              = \"foo@example.com\"",
      "    include_json_attachment = \"1\"",
      "  }",
      "}",
      "",
      "resource \"newrelic_alert_policy_channel\" \"foo\" {",
      "  policy_id  = \"${newrelic_alert_policy.foo.id}\"",
      "  channel_id = \"${newrelic_alert_channel.foo.id}\"",
      "}"
    ]
  },
  "newrelic-resource-dashboard": {
    "description": "Defines dashboard",
    "prefix": "tf-newrelic-resource-dashboard",
    "body": [
      "resource \"newrelic_dashboard\" \"exampledash\" {",
      "  title = \"New Relic Terraform Example\"",
      "",
      "  widget {",
      "    title         = \"Average Transaction Duration\"",
      "    row           = 1",
      "    column        = 1",
      "    width         = 2",
      "    visualization = \"faceted_line_chart\"",
      "    nrql          = \"SELECT AVERAGE(duration) from Transaction FACET appName TIMESERIES auto\"",
      "  }",
      "",
      "  widget {",
      "    title         = \"Page Views\"",
      "    row           = 1",
      "    column        = 3",
      "    visualization = \"billboard\"",
      "    nrql          = \"SELECT count(*) FROM PageView SINCE 1 week ago\"",
      "  }",
      "}"
    ]
  },
  "newrelic-resource-nrql_alert_condition": {
    "description": "Defines nrql_alert_condition",
    "prefix": "tf-newrelic-resource-nrql_alert_condition",
    "body": [
      "resource \"newrelic_alert_policy\" \"foo\" {",
      "  name = \"foo\"",
      "}",
      "",
      "resource \"newrelic_nrql_alert_condition\" \"foo\" {",
      "  policy_id = \"${newrelic_alert_policy.foo.id}\"",
      "",
      "  name        = \"foo\"",
      "  runbook_url = \"https://www.example.com\"",
      "  enabled     = true",
      "",
      "  term {",
      "    duration      = 5",
      "    operator      = \"below\"",
      "    priority      = \"critical\"",
      "    threshold     = \"1\"",
      "    time_function = \"all\"",
      "  }",
      "",
      "  nrql {",
      "    query       = \"SELECT count(*) FROM SyntheticCheck WHERE monitorId = '<monitorId>'\"",
      "    since_value = \"3\"",
      "  }",
      "",
      "  value_function = \"single_value\"",
      "}"
    ]
  },
  "nomad-data-regions": {
    "description": "Defines regions",
    "prefix": "tf-nomad-data-regions",
    "body": [
      "data \"nomad_regions\" \"regions\" {",
      "}",
      "",
      "data \"template_file\" \"jobs\" {",
      "  count = \"${length(data.nomad_regions.regions.regions)}\"",
      "  template = <<EOT",
      "job \"foo\" {",
      "  datacenters = [\"dc1\"]",
      "  type = \"service\"",
      "  region = \"$$region\"",
      "  # ... rest of your job here",
      "}",
      "EOT",
      "  vars {",
      "    region = \"${data.nomad_regions.regions[count.index]}\"",
      "  }",
      "}",
      "",
      "resource \"nomad_job\" \"app\" {",
      "  count = \"${length(data.nomad_regions.regions.regions)}\"",
      "  jobspec = \"${data.template_file.jobs[count.index].rendered}\"",
      "}"
    ]
  },
  "nomad-resource-acl_policy": {
    "description": "Defines acl_policy",
    "prefix": "tf-nomad-resource-acl_policy",
    "body": [
      "resource \"nomad_acl_policy\" \"dev\" {",
      "  name = \"dev\"",
      "  description = \"Submit jobs to the dev environment.\"",
      "  rules_hcl = \"${file(\"${path.module}/dev.hcl\")}\"",
      "}"
    ]
  },
  "nomad-resource-acl_token": {
    "description": "Defines acl_token",
    "prefix": "tf-nomad-resource-acl_token",
    "body": [
      "resource \"nomad_acl_token\" \"ron\" {",
      "  name = \"Ron Weasley\"",
      "  type = \"client\"",
      "  policies = [\"dev\", \"qa\"]",
      "}"
    ]
  },
  "nomad-resource-job": {
    "description": "Defines job",
    "prefix": "tf-nomad-resource-job",
    "body": [
      "resource \"nomad_job\" \"app\" {",
      "  jobspec = \"${file(\"${path.module}/job.hcl\")}\"",
      "}"
    ]
  },
  "nomad-resource-namespace": {
    "description": "Defines namespace",
    "prefix": "tf-nomad-resource-namespace",
    "body": [
      "resource \"nomad_namespace\" \"dev\" {",
      "  name = \"dev\"",
      "  description = \"Shared development environment.\"",
      "}"
    ]
  },
  "nomad-resource-quota_specification": {
    "description": "Defines quota_specification",
    "prefix": "tf-nomad-resource-quota_specification",
    "body": [
      "resource \"nomad_quota_specification\" \"prod_api\" {",
      "  name        = \"prod-api\"",
      "  description = \"Production instances of backend API servers\"",
      "",
      "  limits {",
      "    region = \"global\"",
      "",
      "    region_limit {",
      "      cpu       = 2400",
      "      memory_mb = 1200",
      "    }",
      "  }",
      "}"
    ]
  },
  "nomad-resource-sentinel_policy": {
    "description": "Defines sentinel_policy",
    "prefix": "tf-nomad-resource-sentinel_policy",
    "body": [
      "resource \"nomad_sentinel_policy\" \"exec-only\" {",
      "  name = \"exec-only\"",
      "  description = \"Only allow jobs that are based on an exec driver.\"",
      "  policy = <<EOT",
      "main = rule { all_drivers_exec }",
      "",
      "# all_drivers_exec checks that all the drivers in use are exec",
      "all_drivers_exec = rule {",
      "    all job.task_groups as tg {",
      "        all tg.tasks as task {",
      "            task.driver is \"exec\"",
      "        }",
      "    }",
      "}",
      "EOT",
      "  scope = \"submit-job\"",
      "  # allow administrators to override",
      "  enforcement_level = \"soft-mandatory\"",
      "}"
    ]
  },
  "ns1-resource-apikey": {
    "description": "Defines apikey",
    "prefix": "tf-ns1-resource-apikey",
    "body": [
      "resource \"ns1_team\" \"example\" {",
      "  name = \"Example team\"",
      "}",
      "",
      "resource \"ns1_apikey\" \"example\" {",
      "  name  = \"Example key\"",
      "  teams = [\"${ns1_team.example.id}\"]",
      "",
      "  permissions = {",
      "    dns_view_zones       = false",
      "    account_manage_users = false",
      "  }",
      "}"
    ]
  },
  "ns1-resource-datafeed": {
    "description": "Defines datafeed",
    "prefix": "tf-ns1-resource-datafeed",
    "body": [
      "resource \"ns1_datasource\" \"example\" {",
      "  name       = \"example\"",
      "  sourcetype = \"nsone_v1\"",
      "}",
      "",
      "resource \"ns1_datafeed\" \"uswest_feed\" {",
      "  name      = \"uswest_feed\"",
      "  source_id = \"${ns1_datasource.example.id}\"",
      "",
      "  config = {",
      "    label = \"uswest\"",
      "  }",
      "}",
      "",
      "resource \"ns1_datafeed\" \"useast_feed\" {",
      "  name      = \"useast_feed\"",
      "  source_id = \"${ns1_datasource.example.id}\"",
      "",
      "  config = {",
      "    label = \"useast\"",
      "  }",
      "}"
    ]
  },
  "ns1-resource-datasource": {
    "description": "Defines datasource",
    "prefix": "tf-ns1-resource-datasource",
    "body": [
      "resource \"ns1_datasource\" \"example\" {",
      "  name       = \"example\"",
      "  sourcetype = \"nsone_v1\"",
      "}"
    ]
  },
  "ns1-resource-monitoringjob": {
    "description": "Defines monitoringjob",
    "prefix": "tf-ns1-resource-monitoringjob",
    "body": [
      "resource \"ns1_monitoringjob\" \"uswest_monitor\" {",
      "  name          = \"uswest\"",
      "  active        = true",
      "  regions       = [\"sjc\", \"sin\", \"lga\"]",
      "  job_type      = \"tcp\"",
      "  frequency     = 60",
      "  rapid_recheck = true",
      "  policy        = \"quorum\"",
      "",
      "  config = {",
      "    send = \"HEAD / HTTP/1.0\\r\\n\\r\\n\"",
      "    port = 80",
      "    host = \"example-elb-uswest.aws.amazon.com\"",
      "  }",
      "",
      "  rules = {",
      "    value      = \"200 OK\"",
      "    comparison = \"contains\"",
      "    key        = \"output\"",
      "  }",
      "}"
    ]
  },
  "ns1-resource-notifylist": {
    "description": "Defines notifylist",
    "prefix": "tf-ns1-resource-notifylist",
    "body": [
      "resource \"ns1_notifylist\" \"nl\" {",
      "  name = \"my notify list\"",
      "  notifications = {",
      "    type = \"webhook\"",
      "    config = {",
      "      url = \"http://www.mywebhook.com\"",
      "    }",
      "  }",
      "",
      "  notifications = {",
      "    type = \"email\"",
      "    config = {",
      "      email = \"test@test.com\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "ns1-resource-record": {
    "description": "Defines record",
    "prefix": "tf-ns1-resource-record",
    "body": [
      "resource \"ns1_zone\" \"tld\" {",
      "  zone = \"terraform.example\"",
      "}",
      "",
      "resource \"ns1_record\" \"www\" {",
      "  zone   = \"${ns1_zone.tld.zone}\"",
      "  domain = \"www.${ns1_zone.tld.zone}\"",
      "  type   = \"CNAME\"",
      "  ttl    = 60",
      "",
      "  answers = {",
      "    answer = \"sub1.${ns1_zone.tld.zone}\"",
      "  }",
      "",
      "  answers = {",
      "    answer = \"sub2.${ns1_zone.tld.zone}\"",
      "  } ",
      "",
      "  filters = {",
      "    filter = \"select_first_n\"",
      "",
      "    config = {",
      "      N = 1",
      "    }",
      "  }",
      "}"
    ]
  },
  "ns1-resource-team": {
    "description": "Defines team",
    "prefix": "tf-ns1-resource-team",
    "body": [
      "# Create a new NS1 Team",
      "resource \"ns1_team\" \"example\" {",
      "  name = \"Example team\"",
      "",
      "  permissions = {",
      "    dns_view_zones       = false",
      "    account_manage_users = false",
      "  }",
      "}"
    ]
  },
  "ns1-resource-user": {
    "description": "Defines user",
    "prefix": "tf-ns1-resource-user",
    "body": [
      "resource \"ns1_team\" \"example\" {",
      "  name = \"Example team\"",
      "",
      "  permissions = {",
      "    dns_view_zones       = false",
      "    account_manage_users = false",
      "  }",
      "}",
      "",
      "resource \"ns1_user\" \"example\" {",
      "  name     = \"Example User\"",
      "  username = \"example_user\"",
      "  email    = \"user@example.com\"",
      "  teams    = [\"${ns1_team.example.id}\"]",
      "}"
    ]
  },
  "ns1-resource-zone": {
    "description": "Defines zone",
    "prefix": "tf-ns1-resource-zone",
    "body": [
      "# Create a new DNS zone",
      "resource \"ns1_zone\" \"example\" {",
      "  zone = \"terraform.example.io\"",
      "  ttl  = 600",
      "}"
    ]
  },
  "nsxt-data-certificate": {
    "description": "Defines certificate",
    "prefix": "tf-nsxt-data-certificate",
    "body": [
      "data \"nsxt_certificate\" \"CA\" {",
      "  display_name = \"ca-cert\"",
      "}"
    ]
  },
  "nsxt-data-edge_cluster": {
    "description": "Defines edge_cluster",
    "prefix": "tf-nsxt-data-edge_cluster",
    "body": [
      "data \"nsxt_edge_cluster\" \"edge_cluster1\" {",
      "  display_name = \"edgecluster\"",
      "}"
    ]
  },
  "nsxt-data-logical_tier0_router": {
    "description": "Defines logical_tier0_router",
    "prefix": "tf-nsxt-data-logical_tier0_router",
    "body": [
      "data \"nsxt_logical_tier0_router\" \"tier0_router\" {",
      "  display_name = \"PLR1\"",
      "}"
    ]
  },
  "nsxt-data-ns_service": {
    "description": "Defines ns_service",
    "prefix": "tf-nsxt-data-ns_service",
    "body": [
      "data \"nsxt_ns_service\" \"ns_service_dns\" {",
      "  display_name = \"DNS\"",
      "}"
    ]
  },
  "nsxt-data-switching_profile": {
    "description": "Defines switching_profile",
    "prefix": "tf-nsxt-data-switching_profile",
    "body": [
      "data \"nsxt_switching_profile\" \"qos_profile\" {",
      "  display_name = \"qos-profile\"",
      "}"
    ]
  },
  "nsxt-data-transport_zone": {
    "description": "Defines transport_zone",
    "prefix": "tf-nsxt-data-transport_zone",
    "body": [
      "data \"nsxt_transport_zone\" \"overlay_transport_zone\" {",
      "  display_name = \"1-transportzone-87\"",
      "}"
    ]
  },
  "nsxt-resource-algorithm_type_ns_service": {
    "description": "Defines algorithm_type_ns_service",
    "prefix": "tf-nsxt-resource-algorithm_type_ns_service",
    "body": [
      "resource \"nsxt_algorithm_type_ns_service\" \"ns_service_alg\" {",
      "  description       = \"S1 provisioned by Terraform\"",
      "  display_name      = \"S1\"",
      "  algorithm         = \"FTP\"",
      "  destination_port  = \"21\"",
      "  source_ports      = [\"9001-9003\"]",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-dhcp_relay_profile": {
    "description": "Defines dhcp_relay_profile",
    "prefix": "tf-nsxt-resource-dhcp_relay_profile",
    "body": [
      "resource \"nsxt_dhcp_relay_profile\" \"dr_profile\" {",
      "  description  = \"DRP provisioned by Terraform\"",
      "  display_name = \"DRP\"",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"red\"",
      "  }",
      "",
      "  server_addresses = [\"1.1.1.1\"]",
      "}",
      "",
      "resource \"nsxt_dhcp_relay_service\" \"dr_service\" {",
      "  display_name          = \"DRS\"",
      "  dhcp_relay_profile_id = \"${nsxt_dhcp_relay_profile.dr_profile.id}\"",
      "}",
      "",
      "resource \"nsxt_logical_router_downlink_port\" \"router_downlink\" {",
      "  display_name                  = \"logical_router_downlink_port\"",
      "  linked_logical_switch_port_id = \"${nsxt_logical_port.port1.id}\"",
      "  logical_router_id             = \"${nsxt_logical_tier1_router.rtr1.id}\"",
      "",
      "  subnet {",
      "    ip_addresses  = [\"8.0.0.1\"]",
      "    prefix_length = 24",
      "  }",
      "",
      "  service_binding {",
      "    target_id   = \"${nsxt_dhcp_relay_service.dr_service.id}\"",
      "    target_type = \"LogicalService\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-dhcp_relay_service": {
    "description": "Defines dhcp_relay_service",
    "prefix": "tf-nsxt-resource-dhcp_relay_service",
    "body": [
      "resource \"nsxt_dhcp_relay_profile\" \"dr_profile\" {",
      "  description  = \"DRP provisioned by Terraform\"",
      "  display_name = \"DRP\"",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"red\"",
      "  }",
      "",
      "  server_addresses = [\"1.1.1.1\"]",
      "}",
      "",
      "resource \"nsxt_dhcp_relay_service\" \"dr_service\" {",
      "  display_name          = \"DRS\"",
      "  dhcp_relay_profile_id = \"${nsxt_dhcp_relay_profile.dr_profile.id}\"",
      "}",
      "",
      "resource \"nsxt_logical_router_downlink_port\" \"router_downlink\" {",
      "  display_name                  = \"logical_router_downlink_port\"",
      "  linked_logical_switch_port_id = \"${nsxt_logical_port.port1.id}\"",
      "  logical_router_id             = \"${nsxt_logical_tier1_router.rtr1.id}\"",
      "",
      "  subnet {",
      "    ip_addresses  = [\"8.0.0.1\"]",
      "    prefix_length = 24",
      "  }",
      "",
      "  service_binding {",
      "    target_id   = \"${nsxt_dhcp_relay_service.dr_service.id}\"",
      "    target_type = \"LogicalService\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-dhcp_server_profile": {
    "description": "Defines dhcp_server_profile",
    "prefix": "tf-nsxt-resource-dhcp_server_profile",
    "body": [
      "data \"nsxt_edge_cluster\" \"edge_cluster1\" {",
      "  display_name = \"edgecluster\"",
      "}",
      "",
      "resource \"nsxt_dhcp_server_profile\" \"dhcp_profile\" {",
      "  description                 = \"dhcp_profile provisioned by Terraform\"",
      "  display_name                = \"dhcp_profile\"",
      "  edge_cluster_id             = \"${data.nsxt_edge_cluster.edge_cluster1.id}\"",
      "  edge_cluster_member_indexes = [0, 1]",
      "",
      "  tag = {",
      "    scope = \"color\"",
      "    tag   = \"red\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-ether_type_ns_service": {
    "description": "Defines ether_type_ns_service",
    "prefix": "tf-nsxt-resource-ether_type_ns_service",
    "body": [
      "resource \"nsxt_ether_type_ns_service\" \"etns\" {",
      "  description  = \"S1 provisioned by Terraform\"",
      "  display_name = \"S1\"",
      "  ether_type   = \"1536\"",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-firewall_section": {
    "description": "Defines firewall_section",
    "prefix": "tf-nsxt-resource-firewall_section",
    "body": [
      "resource \"nsxt_firewall_section\" \"firewall_sect\" {",
      "  description  = \"FS provisioned by Terraform\"",
      "  display_name = \"FS\"",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "",
      "  applied_to {",
      "    target_type = \"NSGroup\"",
      "    target_id   = \"${nsxt_ns_group.group1.id}\"",
      "  }",
      "",
      "  section_type = \"LAYER3\"",
      "  stateful     = true",
      "",
      "  rule {",
      "    display_name = \"out_rule\"",
      "    description  = \"Out going rule\"",
      "    action       = \"ALLOW\"",
      "    logged       = true",
      "    ip_protocol  = \"IPV4\"",
      "    direction    = \"OUT\"",
      "",
      "    source {",
      "      target_type = \"LogicalSwitch\"",
      "      target_id   = \"${nsxt_logical_switch.switch1.id}\"",
      "    }",
      "",
      "    destination {",
      "      target_type = \"LogicalSwitch\"",
      "      target_id   = \"${nsxt_logical_switch.switch2.id}\"",
      "    }",
      "  }",
      "",
      "  rule {",
      "    display_name = \"in_rule\"",
      "    description  = \"In going rule\"",
      "    action       = \"DROP\"",
      "    logged       = true",
      "    ip_protocol  = \"IPV4\"",
      "    direction    = \"IN\"",
      "",
      "    service {",
      "      target_type = \"NSService\"",
      "      target_id   = \"e8d59e13-484b-4825-ae3b-4c11f83249d9\"",
      "    }",
      "",
      "    service {",
      "      target_type = \"NSService\"",
      "      target_id   = \"${nsxt_l4_port_set_ns_service.http.id}\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-icmp_type_ns_service": {
    "description": "Defines icmp_type_ns_service",
    "prefix": "tf-nsxt-resource-icmp_type_ns_service",
    "body": [
      "resource \"nsxt_icmp_type_ns_service\" \"ns_service_icmp\" {",
      "  description  = \"S1 provisioned by Terraform\"",
      "  display_name = \"S1\"",
      "  protocol     = \"ICMPv4\"",
      "  icmp_type    = \"5\"",
      "  icmp_code    = \"1\"",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-igmp_type_ns_service": {
    "description": "Defines igmp_type_ns_service",
    "prefix": "tf-nsxt-resource-igmp_type_ns_service",
    "body": [
      "resource \"nsxt_igmp_type_ns_service\" \"ns_service_igmp\" {",
      "  description  = \"S1 provisioned by Terraform\"",
      "  display_name = \"S1\"",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-ip_block": {
    "description": "Defines ip_block",
    "prefix": "tf-nsxt-resource-ip_block",
    "body": [
      "resource \"nsxt_ip_block\" \"ip_block\" {",
      "  description  = \"ip_block provisioned by Terraform\"",
      "  display_name = \"ip_block\"",
      "  cidr         = \"2.1.1.0/24\"",
      "",
      "  tag = {",
      "    scope = \"color\"",
      "    tag   = \"red\"",
      "  }",
      "}",
      "",
      "resource \"nsxt_ip_block_subnet\" \"ip_block_subnet\" {",
      "  description = \"ip_block_subnet\"",
      "  block_id    = \"${nsxt_ip_block.ip_block.id}\"",
      "  size        = 16",
      "}",
      ""
    ]
  },
  "nsxt-resource-ip_block_subnet": {
    "description": "Defines ip_block_subnet",
    "prefix": "tf-nsxt-resource-ip_block_subnet",
    "body": [
      "resource \"nsxt_ip_block\" \"ip_block\" {",
      "  display_name = \"block1\"",
      "  cidr         = \"55.0.0.0/24\"",
      "}",
      "",
      "resource \"nsxt_ip_block_subnet\" \"ip_block_subnet\" {",
      "  description  = \"ip_block_subnet provisioned by Terraform\"",
      "  display_name = \"ip_block_subnet\"",
      "  block_id     = \"${nsxt_ip_block.ip_block.id}\"",
      "  size         = 16",
      "",
      "  tag = {",
      "    scope = \"color\"",
      "    tag   = \"red\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-ip_pool": {
    "description": "Defines ip_pool",
    "prefix": "tf-nsxt-resource-ip_pool",
    "body": [
      "resource \"nsxt_ip_pool\" \"ip_pool\" {",
      "  description = \"ip_pool provisioned by Terraform\"",
      "  display_name = \"ip_pool\"",
      "",
      "  tag = {",
      "    scope = \"color\"",
      "    tag   = \"red\"",
      "  }",
      "",
      "  subnet = {",
      "    allocation_ranges = [\"2.1.1.1-2.1.1.11\", \"2.1.1.21-2.1.1.100\"]",
      "    cidr              = \"2.1.1.0/24\"",
      "    gateway_ip        = \"2.1.1.12\"",
      "    dns_suffix        = \"abc\"",
      "    dns_nameservers   = [\"33.33.33.33\"]",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-ip_protocol_ns_service": {
    "description": "Defines ip_protocol_ns_service",
    "prefix": "tf-nsxt-resource-ip_protocol_ns_service",
    "body": [
      "resource \"nsxt_ip_protocol_ns_service\" \"ns_service_ip\" {",
      "  description  = \"S1 provisioned by Terraform\"",
      "  display_name = \"S1\"",
      "  protocol     = \"10\"",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-ip_set": {
    "description": "Defines ip_set",
    "prefix": "tf-nsxt-resource-ip_set",
    "body": [
      "resource \"nsxt_ip_set\" \"ip_set1\" {",
      "  description  = \"IS provisioned by Terraform\"",
      "  display_name = \"IS\"",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "",
      "  ip_addresses = [\"1.1.1.1\", \"2.2.2.2\"]",
      "}"
    ]
  },
  "nsxt-resource-l4_port_set_ns_service": {
    "description": "Defines l4_port_set_ns_service",
    "prefix": "tf-nsxt-resource-l4_port_set_ns_service",
    "body": [
      "resource \"nsxt_l4_port_set_ns_service\" \"ns_service_l4\" {",
      "  description       = \"S1 provisioned by Terraform\"",
      "  display_name      = \"S1\"",
      "  protocol          = \"TCP\"",
      "  destination_ports = [\"73\", \"8080\", \"81\"]",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-lb_http_monitor": {
    "description": "Defines lb_http_monitor",
    "prefix": "tf-nsxt-resource-lb_http_monitor",
    "body": [
      "",
      "resource \"nsxt_lb_http_monitor\" \"lb_http_monitor\" {",
      "  description  = \"lb_http_monitor provisioned by Terraform\"",
      "  display_name = \"lb_http_monitor\"",
      "",
      "  tag = {",
      "    scope = \"color\"",
      "    tag   = \"red\"",
      "  }",
      "",
      "  fall_count            = 2",
      "  interval              = 5",
      "  monitor_port          = 8080",
      "  rise_count            = 5",
      "  timeout               = 10",
      "  request_body          = \"ping\"",
      "",
      "  request_header {",
      "    name  = \"X-healthcheck\"",
      "    value = \"NSX\"",
      "  }",
      "",
      "  request_method        = \"HEAD\"",
      "  request_url           = \"/index.html\"",
      "  request_version       = \"HTTP_VERSION_1_1\"",
      "  response_body         = \"pong\"",
      "  response_status_codes = [200, 304]",
      "}"
    ]
  },
  "nsxt-resource-lb_https_monitor": {
    "description": "Defines lb_https_monitor",
    "prefix": "tf-nsxt-resource-lb_https_monitor",
    "body": [
      "",
      "data \"nsxt_certificate\" \"client\" {",
      "  display_name = \"client-1\"",
      "}",
      "",
      "data \"nsxt_certificate\" \"CA\" {",
      "  display_name = \"ca-1\"",
      "}",
      "",
      "resource \"nsxt_lb_https_monitor\" \"lb_https_monitor\" {",
      "  description             = \"lb_https_monitor provisioned by Terraform\"",
      "  display_name            = \"lb_https_monitor\"",
      "",
      "  tag = {",
      "    scope = \"color\"",
      "    tag   = \"red\"",
      "  }",
      "",
      "  fall_count              = 2",
      "  interval                = 5",
      "  monitor_port            = 8080",
      "  rise_count              = 5",
      "  timeout                 = 10",
      "  certificate_chain_depth = 2",
      "  ciphers                 = [\"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\", \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\"]",
      "  client_certificate_id   = \"${data.nsxt_certificate.client.id}\"",
      "  protocols               = [\"TLS_V1_2\"]",
      "  request_body            = \"ping\"",
      "",
      "  request_header {",
      "    name  = \"X-healthcheck\"",
      "    value = \"NSX\"",
      "  }",
      "",
      "  request_method          = \"HEAD\"",
      "  request_url             = \"/index.html\"",
      "  request_version         = \"HTTP_VERSION_1_1\"",
      "  response_body           = \"pong\"",
      "  response_status_codes   = [200, 304]",
      "  server_auth             = \"REQUIRED\"",
      "  server_auth_ca_ids      = [\"${data.nsxt_certificate.CA.id}\"]",
      "  server_auth_crl_ids     = [\"78ba3814-bfe1-45e5-89d3-46862bed7896\"]",
      "}"
    ]
  },
  "nsxt-resource-lb_icmp_monitor": {
    "description": "Defines lb_icmp_monitor",
    "prefix": "tf-nsxt-resource-lb_icmp_monitor",
    "body": [
      "resource \"nsxt_lb_icmp_monitor\" \"lb_icmp_monitor\" {",
      "  description  = \"lb_icmp_monitor provisioned by Terraform\"",
      "  display_name = \"lb_icmp_monitor\"",
      "",
      "  tag = {",
      "    scope = \"color\"",
      "    tag   = \"red\"",
      "  }",
      "",
      "  fall_count   = 3",
      "  interval     = 5",
      "  monitor_port = 7887",
      "  rise_count   = 3",
      "  timeout      = 10",
      "  data_length  = 56",
      "}"
    ]
  },
  "nsxt-resource-lb_tcp_monitor": {
    "description": "Defines lb_tcp_monitor",
    "prefix": "tf-nsxt-resource-lb_tcp_monitor",
    "body": [
      "resource \"nsxt_lb_tcp_monitor\" \"lb_tcp_monitor\" {",
      "  description  = \"lb_tcp_monitor provisioned by Terraform\"",
      "  display_name = \"lb_tcp_monitor\"",
      "",
      "  tag = {",
      "    scope = \"color\"",
      "    tag   = \"red\"",
      "  }",
      "",
      "  fall_count   = 3",
      "  interval     = 5",
      "  monitor_port = 7887",
      "  rise_count   = 3",
      "  timeout      = 10",
      "}"
    ]
  },
  "nsxt-resource-lb_udp_monitor": {
    "description": "Defines lb_udp_monitor",
    "prefix": "tf-nsxt-resource-lb_udp_monitor",
    "body": [
      "resource \"nsxt_lb_udp_monitor\" \"lb_udp_monitor\" {",
      "  description  = \"lb_udp_monitor provisioned by Terraform\"",
      "  display_name = \"lb_udp_monitor\"",
      "",
      "  tag = {",
      "    scope = \"color\"",
      "    tag   = \"red\"",
      "  }",
      "",
      "  fall_count   = 3",
      "  interval     = 5",
      "  monitor_port = 7887",
      "  rise_count   = 3",
      "  timeout      = 10",
      "  send         = \"hi\"",
      "  receive      = \"hello\"",
      "}"
    ]
  },
  "nsxt-resource-logical_dhcp_port": {
    "description": "Defines logical_dhcp_port",
    "prefix": "tf-nsxt-resource-logical_dhcp_port",
    "body": [
      "resource \"nsxt_logical_dhcp_server\" \"logical_dhcp_server\" {",
      "  display_name    = \"logical_dhcp_server\"",
      "  dhcp_profile_id = \"${nsxt_dhcp_server_profile.PRF.id}\"",
      "  dhcp_server_ip  = \"1.1.1.10/24\"",
      "  gateway_ip      = \"1.1.1.20\"",
      "}",
      "",
      "resource \"nsxt_logical_switch\" \"switch\" {",
      "  display_name      = \"LS1\"",
      "  admin_state       = \"UP\"",
      "  transport_zone_id = \"${data.nsxt_transport_zone.transport_zone.id}\"",
      "}",
      "",
      "resource \"nsxt_logical_dhcp_port\" \"dhcp_port\" {",
      "  admin_state       = \"UP\"",
      "  description       = \"LP1 provisioned by Terraform\"",
      "  display_name      = \"LP1\"",
      "  logical_switch_id = \"${nsxt_logical_switch.switch.id}\"",
      "  dhcp_server_id    = \"${nsxt_logical_dhcp_server.logical_dhcp_server.id}\"",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-logical_dhcp_server": {
    "description": "Defines logical_dhcp_server",
    "prefix": "tf-nsxt-resource-logical_dhcp_server",
    "body": [
      "data \"nsxt_edge_cluster\" \"edgecluster\" {",
      "  display_name = \"edgecluster1\"",
      "}",
      "",
      "resource \"nsxt_dhcp_server_profile\" \"serverprofile\" {",
      "  edge_cluster_id = \"${data.nsxt_edge_cluster.edgecluster.id}\"",
      "}",
      "",
      "resource \"nsxt_logical_dhcp_server\" \"logical_dhcp_server\" {",
      "  display_name     = \"logical_dhcp_server\"",
      "  description      = \"logical_dhcp_server provisioned by Terraform\"",
      "  dhcp_profile_id  = \"${nsxt_dhcp_server_profile.PRF.id}\"",
      "  dhcp_server_ip   = \"1.1.1.10/24\"",
      "  gateway_ip       = \"1.1.1.20\"",
      "  domain_name      = \"abc.com\"",
      "  dns_name_servers = [\"5.5.5.5\"]",
      "",
      "  dhcp_option_121 {",
      "    network  = \"6.6.6.6/24\"",
      "    next_hop = \"1.1.1.21\"",
      "  }",
      "",
      "  dhcp_generic_option {",
      "    code = \"119\"",
      "    values = [\"abc\"]",
      "  }",
      "",
      "  tag = {",
      "    scope = \"color\"",
      "    tag   = \"red\"",
      "  }",
      "",
      "}"
    ]
  },
  "nsxt-resource-logical_port": {
    "description": "Defines logical_port",
    "prefix": "tf-nsxt-resource-logical_port",
    "body": [
      "resource \"nsxt_logical_port\" \"logical_port\" {",
      "  admin_state       = \"UP\"",
      "  description       = \"LP1 provisioned by Terraform\"",
      "  display_name      = \"LP1\"",
      "  logical_switch_id = \"${nsxt_logical_switch.switch1.id}\"",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "",
      "  switching_profile_id {",
      "    key   = \"${data.nsxt_switching_profile.qos_profile.resource_type}\"",
      "    value = \"${data.nsxt_switching_profile.qos_profile.id}\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-logical_router_downlink_port": {
    "description": "Defines logical_router_downlink_port",
    "prefix": "tf-nsxt-resource-logical_router_downlink_port",
    "body": [
      "resource \"nsxt_logical_router_downlink_port\" \"downlink_port\" {",
      "  description                   = \"DP1 provisioned by Terraform\"",
      "  display_name                  = \"DP1\"",
      "  logical_router_id             = \"${nsxt_logical_router.rtr1.id}\"",
      "  linked_logical_switch_port_id = \"${nsxt_logical_port.logical_port1.id}\"",
      "  ip_address                    = \"1.1.0.1/24\"",
      "",
      "  service_binding {",
      "    target_id   = \"${nsxt_dhcp_relay_service.dr_service.id}\"",
      "    target_type = \"LogicalService\"",
      "  }",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-logical_router_link_port_on_tier0": {
    "description": "Defines logical_router_link_port_on_tier0",
    "prefix": "tf-nsxt-resource-logical_router_link_port_on_tier0",
    "body": [
      "resource \"nsxt_logical_router_link_port_on_tier0\" \"link_port_tier0\" {",
      "  description       = \"TIER0_PORT1 provisioned by Terraform\"",
      "  display_name      = \"TIER0_PORT1\"",
      "  logical_router_id = \"${data.nsxt_logical_tier0_router.rtr1.id}\"",
      "",
      "  service_binding {",
      "    target_id   = \"${nsxt_dhcp_relay_service.dr_service.id}\"",
      "    target_type = \"LogicalService\"",
      "  }",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-logical_router_link_port_on_tier1": {
    "description": "Defines logical_router_link_port_on_tier1",
    "prefix": "tf-nsxt-resource-logical_router_link_port_on_tier1",
    "body": [
      "resource \"nsxt_logical_router_link_port_on_tier1\" \"link_port_tier1\" {",
      "  description                   = \"TIER1_PORT1 provisioned by Terraform\"",
      "  display_name                  = \"TIER1_PORT1\"",
      "  logical_router_id             = \"${nsxt_logical_tier1_router.rtr1.id}\"",
      "  linked_logical_router_port_id = \"${nsxt_logical_router_link_port_on_tier0.link_port_tier0.id}\"",
      "",
      "  service_binding {",
      "    target_id   = \"${nsxt_dhcp_relay_service.dr_service.id}\"",
      "    target_type = \"LogicalService\"",
      "  }",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-logical_switch": {
    "description": "Defines logical_switch",
    "prefix": "tf-nsxt-resource-logical_switch",
    "body": [
      "resource \"nsxt_logical_switch\" \"switch1\" {",
      "  admin_state       = \"UP\"",
      "  description       = \"LS1 provisioned by Terraform\"",
      "  display_name      = \"LS1\"",
      "  transport_zone_id = \"${data.nsxt_transport_zone.transport_zone.id}\"",
      "  replication_mode  = \"MTEP\"",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "",
      "  switching_profile_id {",
      "    key   = \"${data.nsxt_switching_profile.qos_profiles.resource_type}\"",
      "    value = \"${data.nsxt_switching_profile.qos_profiles.id}\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-logical_tier0_router": {
    "description": "Defines logical_tier0_router",
    "prefix": "tf-nsxt-resource-logical_tier0_router",
    "body": [
      "resource \"nsxt_logical_tier0_router\" \"tier0_router\" {",
      "  display_name           = \"RTR\"",
      "  description            = \"ACTIVE-STANDBY Tier0 router provisioned by Terraform\"",
      "  high_availability_mode = \"ACTIVE_STANDBY\"",
      "  edge_cluster_id        = \"${data.nsxt_edge_cluster.edge_cluster.id}\"",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-logical_tier1_router": {
    "description": "Defines logical_tier1_router",
    "prefix": "tf-nsxt-resource-logical_tier1_router",
    "body": [
      "resource \"nsxt_logical_tier1_router\" \"tier1_router\" {",
      "  description                 = \"RTR1 provisioned by Terraform\"",
      "  display_name                = \"RTR1\"",
      "  failover_mode               = \"PREEMPTIVE\"",
      "  edge_cluster_id             = \"${data.nsxt_edge_cluster.edge_cluster.id}\"",
      "  enable_router_advertisement = true",
      "  advertise_connected_routes  = false",
      "  advertise_static_routes     = true",
      "  advertise_nat_routes        = true",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-nat_rule": {
    "description": "Defines nat_rule",
    "prefix": "tf-nsxt-resource-nat_rule",
    "body": [
      "resource \"nsxt_nat_rule\" \"rule1\" {",
      "  logical_router_id         = \"${nsxt_logical_tier1_router.rtr1.id}\"",
      "  description               = \"NR provisioned by Terraform\"",
      "  display_name              = \"NR\"",
      "  action                    = \"SNAT\"",
      "  enabled                   = true",
      "  logging                   = true",
      "  nat_pass                  = false",
      "  translated_network        = \"4.4.0.0/24\"",
      "  match_destination_network = \"3.3.3.0/24\"",
      "  match_source_network      = \"5.5.5.0/24\"",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-ns_group": {
    "description": "Defines ns_group",
    "prefix": "tf-nsxt-resource-ns_group",
    "body": [
      "resource \"nsxt_ns_group\" \"group2\" {",
      "  description  = \"NG provisioned by Terraform\"",
      "  display_name = \"NG\"",
      "",
      "  member {",
      "    target_type = \"NSGroup\"",
      "    value       = \"${nsxt_ns_group.group1.id}\"",
      "  }",
      "",
      "  membership_criteria {",
      "    target_type = \"LogicalPort\"",
      "    scope       = \"XXX\"",
      "    tag         = \"YYY\"",
      "  }",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-static_route": {
    "description": "Defines static_route",
    "prefix": "tf-nsxt-resource-static_route",
    "body": [
      "resource \"nsxt_static_route\" \"static_route\" {",
      "  description       = \"SR provisioned by Terraform\"",
      "  display_name      = \"SR\"",
      "  logical_router_id = \"${nsxt_logical_tier1_router.router1.id}\"",
      "  network           = \"4.4.4.0/24\"",
      "",
      "  next_hop {",
      "    ip_address              = \"8.0.0.10\"",
      "    administrative_distance = \"1\"",
      "    logical_router_port_id  = \"${nsxt_logical_router_downlink_port.downlink_port.id}\"",
      "  }",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "}"
    ]
  },
  "nsxt-resource-vm_tags": {
    "description": "Defines vm_tags",
    "prefix": "tf-nsxt-resource-vm_tags",
    "body": [
      "resource \"nsxt_vm_tags\" \"vm1_tags\" {",
      "  instance_id = \"${vsphere_virtual_machine.vm1.id}\"",
      "",
      "  tag {",
      "    scope = \"color\"",
      "    tag   = \"blue\"",
      "  }",
      "}"
    ]
  },
  "oneandone-resource-block_storage": {
    "description": "Defines block_storage",
    "prefix": "tf-oneandone-resource-block_storage",
    "body": [
      "resource \"oneandone_block_storage\" \"storage\" {",
      "  name = \"test_blk_storage1\"",
      "  description = \"testing_blk_storage\"",
      "  size = 20",
      "  datacenter = \"US\"",
      "}"
    ]
  },
  "oneandone-resource-firewall_policy": {
    "description": "Defines firewall_policy",
    "prefix": "tf-oneandone-resource-firewall_policy",
    "body": [
      "resource \"oneandone_firewall_policy\" \"fw\" {",
      "  name = \"test_fw_011\"",
      "  rules = [",
      "    {",
      "      \"protocol\" = \"TCP\"",
      "      \"port_from\" = 80",
      "      \"port_to\" = 80",
      "      \"source_ip\" = \"0.0.0.0\"",
      "    },",
      "    {",
      "      \"protocol\" = \"ICMP\"",
      "      \"source_ip\" = \"0.0.0.0\"",
      "    },",
      "    {",
      "      \"protocol\" = \"TCP\"",
      "      \"port_from\" = 43",
      "      \"port_to\" = 43",
      "      \"source_ip\" = \"0.0.0.0\"",
      "    },",
      "    {",
      "      \"protocol\" = \"TCP\"",
      "      \"port_from\" = 22",
      "      \"port_to\" = 22",
      "      \"source_ip\" = \"0.0.0.0\"",
      "    }",
      "  ]",
      "}"
    ]
  },
  "oneandone-resource-instance_size": {
    "description": "Defines instance_size",
    "prefix": "tf-oneandone-resource-instance_size",
    "body": [
      "data \"oneandone_instance_size\" \"sizeByName\" {",
      "  name = \"L\"",
      "}",
      "",
      "data \"oneandone_instance_size\" \"sizeByHardware\" {",
      "  vcores = 2",
      "  ram = 4",
      "}",
      "",
      "resource \"oneandone_server\" \"server\" {",
      "  name                = \"Example\"",
      "  image               = \"debian8-64min\"",
      "  datacenter          = \"DE\"",
      "  fixed_instance_size = \"${data.oneandone_instance_size.sizeByName.id}\"",
      "  ...",
      "}"
    ]
  },
  "oneandone-resource-loadbalancer": {
    "description": "Defines loadbalancer",
    "prefix": "tf-oneandone-resource-loadbalancer",
    "body": [
      "resource \"oneandone_loadbalancer\" \"lb\" {",
      "  name = \"test_lb\"",
      "  method = \"ROUND_ROBIN\"",
      "  persistence = true",
      "  persistence_time = 60",
      "  health_check_test = \"TCP\"",
      "  health_check_interval = 300",
      "  datacenter = \"GB\"",
      "  rules = [",
      "    {",
      "      protocol = \"TCP\"",
      "      port_balancer = 8080",
      "      port_server = 8089",
      "      source_ip = \"0.0.0.0\"",
      "    },",
      "    {",
      "      protocol = \"TCP\"",
      "      port_balancer = 9090",
      "      port_server = 9099",
      "      source_ip = \"0.0.0.0\"",
      "    }",
      "  ]",
      "}"
    ]
  },
  "oneandone-resource-monitoring_policy": {
    "description": "Defines monitoring_policy",
    "prefix": "tf-oneandone-resource-monitoring_policy",
    "body": [
      "resource \"oneandone_monitoring_policy\" \"mp\" {",
      "  name = \"test_mp\"",
      "  agent = true",
      "  email = \"jasmin@stackpointcloud.com\"",
      "",
      "  thresholds = {",
      "    cpu = {",
      "      warning = {",
      "        value = 50,",
      "        alert = false",
      "      }",
      "      critical = {",
      "        value = 66,",
      "        alert = false",
      "      }",
      "",
      "    }",
      "    ram = {",
      "      warning = {",
      "        value = 70,",
      "        alert = true",
      "      }",
      "      critical = {",
      "        value = 80,",
      "        alert = true",
      "      }",
      "    },",
      "    ram = {",
      "      warning = {",
      "        value = 85,",
      "        alert = true",
      "      }",
      "      critical = {",
      "        value = 95,",
      "        alert = true",
      "      }",
      "    },",
      "    disk = {",
      "      warning = {",
      "        value = 84,",
      "        alert = true",
      "      }",
      "      critical = {",
      "        value = 94,",
      "        alert = true",
      "      }",
      "    },",
      "    transfer = {",
      "      warning = {",
      "        value = 1000,",
      "        alert = true",
      "      }",
      "      critical = {",
      "        value = 2000,",
      "        alert = true",
      "      }",
      "    },",
      "    internal_ping = {",
      "      warning = {",
      "        value = 3000,",
      "        alert = true",
      "      }",
      "      critical = {",
      "        value = 4000,",
      "        alert = true",
      "      }",
      "    }",
      "  }",
      "  ports = [",
      "    {",
      "      email_notification = true",
      "      port = 443",
      "      protocol = \"TCP\"",
      "      alert_if = \"NOT_RESPONDING\"",
      "    },",
      "    {",
      "      email_notification = false",
      "      port = 80",
      "      protocol = \"TCP\"",
      "      alert_if = \"NOT_RESPONDING\"",
      "    },",
      "    {",
      "      email_notification = true",
      "      port = 21",
      "      protocol = \"TCP\"",
      "      alert_if = \"NOT_RESPONDING\"",
      "    }",
      "  ]",
      "",
      "  processes = [",
      "    {",
      "      email_notification = false",
      "      process = \"httpdeamon\"",
      "      alert_if = \"RUNNING\"",
      "    },",
      "    {",
      "      process = \"iexplorer\",",
      "      alert_if = \"NOT_RUNNING\"",
      "      email_notification = true",
      "    }]",
      "}"
    ]
  },
  "oneandone-resource-private_network": {
    "description": "Defines private_network",
    "prefix": "tf-oneandone-resource-private_network",
    "body": [
      "resource \"oneandone_private_network\" \"pn\" {",
      "  name = \"pn_test\",",
      "  description = \"new stuff001\"",
      "  datacenter = \"GB\"",
      "  network_address = \"192.168.7.0\"",
      "  subnet_mask = \"255.255.255.0\"",
      "  server_ids = [",
      "    \"${oneandone_server.server.id}\",",
      "    \"${oneandone_server.server02.id}\",",
      "  ]",
      "}"
    ]
  },
  "oneandone-resource-public_ip": {
    "description": "Defines public_ip",
    "prefix": "tf-oneandone-resource-public_ip",
    "body": [
      "resource \"oneandone_public_ip\" \"ip\" {",
      "\t\"ip_type\"     = \"IPV4\"",
      "\t\"reverse_dns\" = \"%s\"",
      "\t\"datacenter\"  = \"GB\"",
      "}"
    ]
  },
  "oneandone-resource-server": {
    "description": "Defines server",
    "prefix": "tf-oneandone-resource-server",
    "body": [
      "resource \"oneandone_server\" \"server\" {",
      "  name = \"Example\"",
      "  description = \"Terraform 1and1 tutorial\"",
      "  image = \"ubuntu\"",
      "  datacenter = \"GB\"",
      "  vcores = 1",
      "  cores_per_processor = 1",
      "  ram = 2",
      "  ssh_key_path = \"/path/to/private/ssh_key\"",
      "  ssh_key_public = \"${file(\"/path/to/public/key.pub\")}\"",
      "  hdds = [",
      "    {",
      "      disk_size = 60",
      "      is_main = true",
      "    }",
      "  ]",
      "",
      "  provisioner \"remote-exec\" {",
      "    inline = [",
      "      \"apt-get update\",",
      "      \"apt-get -y install nginx\",",
      "    ]",
      "  }",
      "}"
    ]
  },
  "oneandone-resource-shared_storage": {
    "description": "Defines shared_storage",
    "prefix": "tf-oneandone-resource-shared_storage",
    "body": [
      "resource \"oneandone_shared_storage\" \"storage\" {",
      "  name = \"test_storage1\"",
      "  description = \"1234\"",
      "  size = 50",
      "",
      "  storage_servers = [",
      "    {",
      "      id = \"${oneandone_server.server.id}\"",
      "      rights = \"RW\"",
      "    },",
      "    {",
      "      id = \"${oneandone_server.server02.id}\"",
      "      rights = \"RW\"",
      "    }",
      "  ]",
      "}"
    ]
  },
  "oneandone-resource-ssh_key": {
    "description": "Defines ssh_key",
    "prefix": "tf-oneandone-resource-ssh_key",
    "body": [
      "resource \"oneandone_ssh_key\" \"sshkey\" {",
      "  name = \"test_ssh_key\"",
      "  description = \"testing_ssh_keys\"",
      "}"
    ]
  },
  "oneandone-resource-vpn": {
    "description": "Defines vpn",
    "prefix": "tf-oneandone-resource-vpn",
    "body": [
      "resource \"oneandone_vpn\" \"vpn\" {",
      "  datacenter  = \"GB\"",
      "  name        = \"%s\"",
      "  description = \"ttest descr\"",
      "}"
    ]
  },
  "opc-data-opc_compute_image_list_entry": {
    "description": "Defines opc_compute_image_list_entry",
    "prefix": "tf-opc-data-opc_compute_image_list_entry",
    "body": [
      "data \"opc_compute_image_list_entry\" \"foo\" {",
      "  image_list = \"my_image_list\"",
      "  version = \"version_of_my_list\"",
      "}",
      "",
      "output \"machine_images\" {",
      "  value = \"${data.opc_compute_image_list_entry.foo.machine_images}\"",
      "}",
      "",
      "output \"single_image\" {",
      "  value = \"${data.opc_compute_image_list_entry.foo.machine_images[1]}\"",
      "}"
    ]
  },
  "opc-data-opc_compute_machine_image": {
    "description": "Defines opc_compute_machine_image",
    "prefix": "tf-opc-data-opc_compute_machine_image",
    "body": [
      "data \"opc_compute_machine_image\" \"foo\" {",
      "  account = \"/Compute-${var.domain}/cloud_storage\"",
      "  name = \"Microsoft_Windows_Server_2012_R2\"",
      "}",
      "",
      "output \"attributes\" {",
      "  value = \"${data.opc_compute_machine_image.foo.attributes}\"",
      "}"
    ]
  },
  "opc-data-opc_compute_network_interface": {
    "description": "Defines opc_compute_network_interface",
    "prefix": "tf-opc-data-opc_compute_network_interface",
    "body": [
      "data \"opc_compute_network_interface\" \"foo\" {",
      "  instance_id   = \"${opc_compute_instance.my_instance.id}\"",
      "  instance_name = \"${opc_compute_instance.my_instance.name}\"",
      "  interface     = \"eth0\"",
      "}",
      "",
      "output \"mac_address\" {",
      "  value = \"${data.opc_compute_network_interface.foo.mac_address}\"",
      "}",
      "",
      "output \"vnic\" {",
      "  value = \"${data.opc_compute_network_interface.foo.vnic}\"",
      "}"
    ]
  },
  "opc-data-opc_compute_storage_volume_snapshot": {
    "description": "Defines opc_compute_storage_volume_snapshot",
    "prefix": "tf-opc-data-opc_compute_storage_volume_snapshot",
    "body": [
      "data \"opc_compute_storage_volume_snapshot\" \"foo\" {",
      "  name = \"my-storage-volume/my-storage-volume-snapshot-name\"",
      "}"
    ]
  },
  "opc-data-opc_compute_vnic": {
    "description": "Defines opc_compute_vnic",
    "prefix": "tf-opc-data-opc_compute_vnic",
    "body": [
      "data \"opc_compute_vnic\" \"current\" {",
      "  name = \"my_vnic_name\"",
      "}",
      "",
      "output \"mac_address\" {",
      "  value = \"${data.opc_compute_vnic.current.mac_address}\"",
      "}"
    ]
  },
  "opc-resource-opc_compute_acl": {
    "description": "Defines opc_compute_acl",
    "prefix": "tf-opc-resource-opc_compute_acl",
    "body": [
      "resource \"opc_compute_acl\" \"default\" {",
      "  name        = \"ACL1\"",
      "  description = \"This is a description for an acl\"",
      "  tags        = [\"tag1\", \"tag2\"]",
      "}"
    ]
  },
  "opc-resource-opc_compute_image_list": {
    "description": "Defines opc_compute_image_list",
    "prefix": "tf-opc-resource-opc_compute_image_list",
    "body": [
      "resource \"opc_compute_image_list\" \"test\" {",
      "  name        = \"imagelist1\"",
      "  description = \"This is a description of the Image List\"",
      "  default     = 21",
      "}"
    ]
  },
  "opc-resource-opc_compute_image_list_entry": {
    "description": "Defines opc_compute_image_list_entry",
    "prefix": "tf-opc-resource-opc_compute_image_list_entry",
    "body": [
      "resource \"opc_compute_image_list\" \"test\" {",
      "  name        = \"imagelist1\"",
      "  description = \"This is a description of the Image List\"",
      "  default     = 21",
      "}",
      "",
      "resource \"opc_compute_image_list_entry\" \"test\" {",
      "  name           = \"${opc_compute_image_list.test.name}\"",
      "  machine_images = [ \"/oracle/public/oel_6.7_apaas_16.4.5_1610211300\" ]",
      "  version        = 1",
      "  attributes     = <<JSON",
      "{",
      "  \"foo\": \"bar\"",
      "}",
      "JSON",
      "}"
    ]
  },
  "opc-resource-opc_compute_instance": {
    "description": "Defines opc_compute_instance",
    "prefix": "tf-opc-resource-opc_compute_instance",
    "body": [
      "resource \"opc_compute_ip_network\" \"test\" {",
      "  name                = \"internal-network\"",
      "  description         = \"Terraform Provisioned Internal Network\"",
      "  ip_address_prefix   = \"10.0.1.0/24\"",
      "  public_napt_enabled = false",
      "}",
      "",
      "resource \"opc_compute_storage_volume\" \"test\" {",
      "  name = \"internal\"",
      "  size = 100",
      "}",
      "",
      "resource \"opc_compute_instance\" \"test\" {",
      "  name       = \"instance1\"",
      "  label      = \"Terraform Provisioned Instance\"",
      "  shape      = \"oc3\"",
      "  image_list = \"/oracle/public/oel_6.7_apaas_16.4.5_1610211300\"",
      "",
      "  storage {",
      "    volume = \"${opc_compute_storage_volume.test.name}\"",
      "    index  = 1",
      "  }",
      "",
      "  networking_info {",
      "    index          = 0",
      "    nat            = [\"ippool:/oracle/public/ippool\"]",
      "    shared_network = true",
      "  }",
      "}",
      ""
    ]
  },
  "opc-resource-opc_compute_ip_address_association": {
    "description": "Defines opc_compute_ip_address_association",
    "prefix": "tf-opc-resource-opc_compute_ip_address_association",
    "body": [
      "resource \"opc_compute_ip_address_association\" \"default\" {",
      "  name                   = \"IPAddressAssociation1\"",
      "  ip_address_reservation = \"${opc_compute_ip_address_reservation.default.name}\"",
      "  vnic                   = \"${data.opc_compute_vnic.default.name}\"",
      "  tags                   = [\"tags1\", \"tags2\"]",
      "}"
    ]
  },
  "opc-resource-opc_compute_ip_address_prefix_set": {
    "description": "Defines opc_compute_ip_address_prefix_set",
    "prefix": "tf-opc-resource-opc_compute_ip_address_prefix_set",
    "body": [
      "resource \"opc_compute_ip_address_prefix_set\" \"default\" {",
      "  name     = \"PrefixSet1\"",
      "  prefixes = [\"192.168.0.0/16\", \"172.120.0.0/24\"]",
      "  tags     = [\"tags1\", \"tags2\"]",
      "}"
    ]
  },
  "opc-resource-opc_compute_ip_address_reservation": {
    "description": "Defines opc_compute_ip_address_reservation",
    "prefix": "tf-opc-resource-opc_compute_ip_address_reservation",
    "body": [
      "resource \"opc_compute_ip_address_reservation\" \"default\" {",
      "  name            = \"IPAddressReservation1\"",
      "  ip_address_pool = \"public-ippool\"",
      "}"
    ]
  },
  "opc-resource-opc_compute_ip_association": {
    "description": "Defines opc_compute_ip_association",
    "prefix": "tf-opc-resource-opc_compute_ip_association",
    "body": [
      "resource \"opc_compute_ip_association\" \"instance1_reservation1\" {",
      "  vcable     = \"${opc_compute_instance.test_instance.vcable}\"",
      "  parent_pool = \"ipreservation:${opc_compute_ip_reservation.reservation1.name}\"",
      "}"
    ]
  },
  "opc-resource-opc_compute_ip_network": {
    "description": "Defines opc_compute_ip_network",
    "prefix": "tf-opc-resource-opc_compute_ip_network",
    "body": [
      "resource \"opc_compute_ip_network\" \"foo\" {",
      "  name                = \"my-ip-network\"",
      "  description         = \"my IP Network\"",
      "  ip_address_prefix   = \"10.0.1.0/24\"",
      "  ip_network_exchange = \"${opc_compute_ip_exchange.foo.name}\"",
      "  public_napt_enabled = false",
      "  tags                = [\"tag1\", \"tag2\"]",
      "}"
    ]
  },
  "opc-resource-opc_compute_ip_network_exchange": {
    "description": "Defines opc_compute_ip_network_exchange",
    "prefix": "tf-opc-resource-opc_compute_ip_network_exchange",
    "body": [
      "resource \"opc_compute_ip_network_exchange\" \"default\" {",
      "  name = \"NetworkExchange1\"",
      "}"
    ]
  },
  "opc-resource-opc_compute_ip_reservation": {
    "description": "Defines opc_compute_ip_reservation",
    "prefix": "tf-opc-resource-opc_compute_ip_reservation",
    "body": [
      "resource \"opc_compute_ip_reservation\" \"reservation1\" {",
      "  parent_pool = \"/oracle/public/ippool\"",
      "  permanent   = true",
      "  tags        = [ \"test\" ]",
      "}"
    ]
  },
  "opc-resource-opc_compute_machine_image": {
    "description": "Defines opc_compute_machine_image",
    "prefix": "tf-opc-resource-opc_compute_machine_image",
    "body": [
      "resource \"opc_compute_machine_image\" \"centos\" {",
      "  account     = \"/Compute-${var.domain}/cloud_storage\"",
      "  name        = \"CentOS_7\"",
      "  file        = \"CentOS-7-x86_64-OracleCloud.raw.tar.gz\"",
      "  description = \"CentOS 7\"",
      "}"
    ]
  },
  "opc-resource-opc_compute_orchestrated_instance": {
    "description": "Defines opc_compute_orchestrated_instance",
    "prefix": "tf-opc-resource-opc_compute_orchestrated_instance",
    "body": [
      "resource \"opc_compute_orchestrated_instance\" \"default\" {",
      "  name          = \"default_orchestration\"",
      "  desired_state = \"active\"",
      "",
      "  instance {",
      "    name       = \"default-orchestrated-instance\"",
      "    label      = \"Orchestrated Instance 1 Label\"",
      "    shape      = \"oc3\"",
      "    image_list = \"/oracle/public/OL_7.2_UEKR4_x86_64\"",
      "  }",
      "}"
    ]
  },
  "opc-resource-opc_compute_route": {
    "description": "Defines opc_compute_route",
    "prefix": "tf-opc-resource-opc_compute_route",
    "body": [
      "resource \"opc_compute_route\" \"foo\" {",
      "  name              = \"my-route\"",
      "  description       = \"my IP Network route\"",
      "  admin_distance    = 1",
      "  ip_address_prefix = \"10.0.1.0/24\"",
      "  next_hop_vnic_set = \"${opc_compute_vnic_set.bar.name}\"",
      "  tags              = [\"tag1\", \"tag2\"]",
      "}"
    ]
  },
  "opc-resource-opc_compute_sec_rule": {
    "description": "Defines opc_compute_sec_rule",
    "prefix": "tf-opc-resource-opc_compute_sec_rule",
    "body": [
      "resource \"opc_compute_sec_rule\" \"test_rule\" {",
      "  name             = \"test\"",
      "  source_list      = \"seclist:${opc_compute_security_list.sec-list1.name}\"",
      "  destination_list = \"seciplist:${opc_compute_security_ip_list.sec-ip-list1.name}\"",
      "  action           = \"permit\"",
      "  application      = \"${opc_compute_security_application.spring-boot.name}\"",
      "}"
    ]
  },
  "opc-resource-opc_compute_security_application": {
    "description": "Defines opc_compute_security_application",
    "prefix": "tf-opc-resource-opc_compute_security_application",
    "body": [
      "resource \"opc_compute_security_application\" \"tomcat\" {",
      "  name     = \"tomcat\"",
      "  protocol = \"tcp\"",
      "  dport    = \"8080\"",
      "}"
    ]
  },
  "opc-resource-opc_compute_security_association": {
    "description": "Defines opc_compute_security_association",
    "prefix": "tf-opc-resource-opc_compute_security_association",
    "body": [
      "resource \"opc_compute_security_association\" \"test_instance_sec_list_1\" {",
      "  name    = \"association1\"",
      "  vcable  = \"${opc_compute_instance.test_instance.vcable}\"",
      "  seclist = \"${opc_compute_security_list.sec_list1.name}\"",
      "}"
    ]
  },
  "opc-resource-opc_compute_security_ip_list": {
    "description": "Defines opc_compute_security_ip_list",
    "prefix": "tf-opc-resource-opc_compute_security_ip_list",
    "body": [
      "resource \"opc_compute_security_ip_list\" \"sec_ip_list1\" {",
      "  name       = \"sec-ip-list1\"",
      "  ip_entries = [\"217.138.34.4\"]",
      "}"
    ]
  },
  "opc-resource-opc_compute_security_list": {
    "description": "Defines opc_compute_security_list",
    "prefix": "tf-opc-resource-opc_compute_security_list",
    "body": [
      "resource \"opc_compute_security_list\" \"sec_list1\" {",
      "  name                 = \"sec-list-1\"",
      "  policy               = \"permit\"",
      "  outbound_cidr_policy = \"deny\"",
      "}"
    ]
  },
  "opc-resource-opc_compute_security_protocol": {
    "description": "Defines opc_compute_security_protocol",
    "prefix": "tf-opc-resource-opc_compute_security_protocol",
    "body": [
      "resource \"opc_compute_security_protocol\" \"default\" {",
      "  name        = \"security-protocol-1\"",
      "  dst_ports   = [\"2045-2050\"]",
      "  src_ports   = [\"3045-3060\"]",
      "  ip_protocol = \"tcp\"",
      "}"
    ]
  },
  "opc-resource-opc_compute_security_rule": {
    "description": "Defines opc_compute_security_rule",
    "prefix": "tf-opc-resource-opc_compute_security_rule",
    "body": [
      "resource \"opc_compute_security_rule\" \"default\" {",
      "  name               = \"SecurityRule1\"",
      "  flow_direction     = \"ingress\"",
      "  acl                = \"${opc_compute_acl.default.name}\"",
      "  security_protocols = [\"${opc_compute_security_protocol.default.name}\"]",
      "}"
    ]
  },
  "opc-resource-opc_compute_ssh_key": {
    "description": "Defines opc_compute_ssh_key",
    "prefix": "tf-opc-resource-opc_compute_ssh_key",
    "body": [
      "resource \"opc_compute_ssh_key\" \"test\" {",
      "  name    = \"test-key\"",
      "  key     = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCqw6JwbjIk...\"",
      "  enabled = true",
      "}"
    ]
  },
  "opc-resource-opc_compute_storage_volume": {
    "description": "Defines opc_compute_storage_volume",
    "prefix": "tf-opc-resource-opc_compute_storage_volume",
    "body": [
      "resource \"opc_compute_storage_volume\" \"test\" {",
      "  name        = \"storageVolume1\"",
      "  description = \"Description for the Storage Volume\"",
      "  size        = 10",
      "  tags        = [\"bar\", \"foo\"]",
      "}"
    ]
  },
  "opc-resource-opc_compute_storage_volume_attachment": {
    "description": "Defines opc_compute_storage_volume_attachment",
    "prefix": "tf-opc-resource-opc_compute_storage_volume_attachment",
    "body": [
      "resource \"opc_compute_storage_volume\" \"default\" {",
      "  name = \"storage-volume-1\"",
      "  size = 1",
      "}",
      "",
      "resource \"opc_compute_instance\" \"default\" {",
      "  name = \"instance-1\"",
      "  label = \"instance-1\"",
      "  shape = \"oc3\"",
      "  image_list = \"/oracle/public/OL_7.2_UEKR4_x86_64\"",
      "}",
      "",
      "resource \"opc_compute_storage_attachment\" \"test\" {",
      "  instance = \"${opc_compute_instance.default.name}\"",
      "  storage_volume = \"${opc_compute_storage_volume.default.name}\"",
      "  index = 1",
      "}"
    ]
  },
  "opc-resource-opc_compute_storage_volume_snapshot": {
    "description": "Defines opc_compute_storage_volume_snapshot",
    "prefix": "tf-opc-resource-opc_compute_storage_volume_snapshot",
    "body": [
      "resource \"opc_compute_storage_volume_snapshot\" \"test\" {",
      "  name        = \"storageVolume1\"",
      "  description = \"Description for the Storage Volume\"",
      "  tags        = [\"bar\", \"foo\"]",
      "  collocated  = true",
      "  volume_name = \"${opc_compute_storage_volume.foo.name}\"",
      "}"
    ]
  },
  "opc-resource-opc_compute_vnic_set": {
    "description": "Defines opc_compute_vnic_set",
    "prefix": "tf-opc-resource-opc_compute_vnic_set",
    "body": [
      "resource \"opc_compute_vnic_set\" \"test_set\" {",
      "  name         = \"test_vnic_set\"",
      "  description  = \"My vnic set\"",
      "  applied_acls = [\"acl1\", \"acl2\"]",
      "  virtual_nics = [\"nic1\", \"nic2\", \"nic3\"]",
      "  tags         = [\"xyzzy\", \"quux\"]",
      "}"
    ]
  },
  "opc-resource-opc_storage_container": {
    "description": "Defines opc_storage_container",
    "prefix": "tf-opc-resource-opc_storage_container",
    "body": [
      "resource \"opc_storage_container\" \"default\" {",
      "  name = \"storage-container-1\"",
      "  read_acls = [ \".r:example.com\", \".rlistings\" ]",
      "}"
    ]
  },
  "opc-resource-opc_storage_object": {
    "description": "Defines opc_storage_object",
    "prefix": "tf-opc-resource-opc_storage_object",
    "body": [
      "resource \"opc_storage_object\" \"default\" {",
      "  name         = \"storage-object-1\"",
      "  container    = \"${opc_storage_container.container.name}\"",
      "  file         = \"${\"./source_file.txt\"}\"",
      "  etag         = \"${md5(file(\"./source_file.txt\"))}\"",
      "  content_type = \"text/plain;charset=utf-8\"",
      "}"
    ]
  },
  "openstack-data-compute_flavor_v2": {
    "description": "Defines compute_flavor_v2",
    "prefix": "tf-openstack-data-compute_flavor_v2",
    "body": [
      "data \"openstack_compute_flavor_v2\" \"small\" {",
      "  vcpus = 1",
      "  ram   = 512",
      "}"
    ]
  },
  "openstack-data-compute_keypair_v2": {
    "description": "Defines compute_keypair_v2",
    "prefix": "tf-openstack-data-compute_keypair_v2",
    "body": [
      "data \"openstack_compute_keypair_v2\" \"kp\" {",
      "  name = \"sand\"",
      "}"
    ]
  },
  "openstack-data-dns_zone_v2": {
    "description": "Defines dns_zone_v2",
    "prefix": "tf-openstack-data-dns_zone_v2",
    "body": [
      "data \"openstack_dns_zone_v2\" \"zone_1\" {",
      "  name = \"example.com\"",
      "}"
    ]
  },
  "openstack-data-identity_auth_scope_v3": {
    "description": "Defines identity_auth_scope_v3",
    "prefix": "tf-openstack-data-identity_auth_scope_v3",
    "body": [
      "data \"openstack_identity_auth_scope_v3\" \"scope\" {",
      "  name = \"my_scope\"",
      "}"
    ]
  },
  "openstack-data-identity_project_v3": {
    "description": "Defines identity_project_v3",
    "prefix": "tf-openstack-data-identity_project_v3",
    "body": [
      "data \"openstack_identity_project_v3\" \"project_1\" {",
      "  name = \"demo\"",
      "}"
    ]
  },
  "openstack-data-identity_role_v3": {
    "description": "Defines identity_role_v3",
    "prefix": "tf-openstack-data-identity_role_v3",
    "body": [
      "data \"openstack_identity_role_v3\" \"admin\" {",
      "  name = \"admin\"",
      "}"
    ]
  },
  "openstack-data-identity_user_v3": {
    "description": "Defines identity_user_v3",
    "prefix": "tf-openstack-data-identity_user_v3",
    "body": [
      "data \"openstack_identity_user_v3\" \"user_1\" {",
      "  name = \"user_1\"",
      "}"
    ]
  },
  "openstack-data-images_image_v2": {
    "description": "Defines images_image_v2",
    "prefix": "tf-openstack-data-images_image_v2",
    "body": [
      "data \"openstack_images_image_v2\" \"ubuntu\" {",
      "  name = \"Ubuntu 16.04\"",
      "  most_recent = true",
      "",
      "  properties {",
      "    key = \"value\"",
      "  }",
      "}"
    ]
  },
  "openstack-data-networking_network_v2": {
    "description": "Defines networking_network_v2",
    "prefix": "tf-openstack-data-networking_network_v2",
    "body": [
      "data \"openstack_networking_network_v2\" \"network\" {",
      "  name = \"tf_test_network\"",
      "}"
    ]
  },
  "openstack-data-networking_secgroup_v2": {
    "description": "Defines networking_secgroup_v2",
    "prefix": "tf-openstack-data-networking_secgroup_v2",
    "body": [
      "data \"openstack_networking_secgroup_v2\" \"secgroup\" {",
      "  name = \"tf_test_secgroup\"",
      "}"
    ]
  },
  "openstack-data-networking_subnet_v2": {
    "description": "Defines networking_subnet_v2",
    "prefix": "tf-openstack-data-networking_subnet_v2",
    "body": [
      "data \"openstack_networking_subnet_v2\" \"subnet_1\" {",
      "  name = \"subnet_1\"",
      "}"
    ]
  },
  "openstack-data-networking_subnetpool_v2": {
    "description": "Defines networking_subnetpool_v2",
    "prefix": "tf-openstack-data-networking_subnetpool_v2",
    "body": [
      "data \"openstack_networking_subnetpool_v2\" \"subnetpool_1\" {",
      "  name = \"subnetpool_1\"",
      "}"
    ]
  },
  "openstack-resource-blockstorage_volume_attach_v2": {
    "description": "Defines blockstorage_volume_attach_v2",
    "prefix": "tf-openstack-resource-blockstorage_volume_attach_v2",
    "body": [
      "resource \"openstack_blockstorage_volume_v2\" \"volume_1\" {",
      "  name = \"volume_1\"",
      "  size = 1",
      "}",
      "",
      "resource \"openstack_blockstorage_volume_attach_v2\" \"va_1\" {",
      "  volume_id = \"${openstack_blockstorage_volume_v2.volume_1.id}\"",
      "  device = \"auto\"",
      "  host_name = \"devstack\"",
      "  ip_address = \"192.168.255.10\"",
      "  initiator = \"iqn.1993-08.org.debian:01:e9861fb1859\"",
      "  os_type = \"linux2\"",
      "  platform = \"x86_64\"",
      "}"
    ]
  },
  "openstack-resource-blockstorage_volume_v1": {
    "description": "Defines blockstorage_volume_v1",
    "prefix": "tf-openstack-resource-blockstorage_volume_v1",
    "body": [
      "resource \"openstack_blockstorage_volume_v1\" \"volume_1\" {",
      "  region      = \"RegionOne\"",
      "  name        = \"tf-test-volume\"",
      "  description = \"first test volume\"",
      "  size        = 3",
      "}"
    ]
  },
  "openstack-resource-blockstorage_volume_v2": {
    "description": "Defines blockstorage_volume_v2",
    "prefix": "tf-openstack-resource-blockstorage_volume_v2",
    "body": [
      "resource \"openstack_blockstorage_volume_v2\" \"volume_1\" {",
      "  region      = \"RegionOne\"",
      "  name        = \"volume_1\"",
      "  description = \"first test volume\"",
      "  size        = 3",
      "}"
    ]
  },
  "openstack-resource-compute_flavor_v2": {
    "description": "Defines compute_flavor_v2",
    "prefix": "tf-openstack-resource-compute_flavor_v2",
    "body": [
      "resource \"openstack_compute_flavor_v2\" \"test-flavor\" {",
      "  name  = \"my-flavor\"",
      "  ram   = \"8096\"",
      "  vcpus = \"2\"",
      "  disk  = \"20\"",
      "",
      "  extra_specs {",
      "    \"hw:cpu_policy\" = \"CPU-POLICY\",",
      "    \"hw:cpu_thread_policy\" = \"CPU-THREAD-POLICY\"",
      "  }",
      "}"
    ]
  },
  "openstack-resource-compute_floatingip_associate_v2": {
    "description": "Defines compute_floatingip_associate_v2",
    "prefix": "tf-openstack-resource-compute_floatingip_associate_v2",
    "body": [
      "resource \"openstack_compute_instance_v2\" \"instance_1\" {",
      "  name            = \"instance_1\"",
      "  image_id        = \"ad091b52-742f-469e-8f3c-fd81cadf0743\"",
      "  flavor_id       = 3",
      "  key_pair        = \"my_key_pair_name\"",
      "  security_groups = [\"default\"]",
      "}",
      "",
      "resource \"openstack_networking_floatingip_v2\" \"fip_1\" {",
      "  pool = \"my_pool\"",
      "}",
      "",
      "resource \"openstack_compute_floatingip_associate_v2\" \"fip_1\" {",
      "  floating_ip = \"${openstack_networking_floatingip_v2.fip_1.address}\"",
      "  instance_id = \"${openstack_compute_instance_v2.instance_1.id}\"",
      "}"
    ]
  },
  "openstack-resource-compute_floatingip_v2": {
    "description": "Defines compute_floatingip_v2",
    "prefix": "tf-openstack-resource-compute_floatingip_v2",
    "body": [
      "resource \"openstack_compute_floatingip_v2\" \"floatip_1\" {",
      "  pool = \"public\"",
      "}"
    ]
  },
  "openstack-resource-compute_instance_v2": {
    "description": "Defines compute_instance_v2",
    "prefix": "tf-openstack-resource-compute_instance_v2",
    "body": [
      "resource \"openstack_compute_instance_v2\" \"basic\" {",
      "  name            = \"basic\"",
      "  image_id        = \"ad091b52-742f-469e-8f3c-fd81cadf0743\"",
      "  flavor_id       = \"3\"",
      "  key_pair        = \"my_key_pair_name\"",
      "  security_groups = [\"default\"]",
      "",
      "  metadata {",
      "    this = \"that\"",
      "  }",
      "",
      "  network {",
      "    name = \"my_network\"",
      "  }",
      "}"
    ]
  },
  "openstack-resource-compute_keypair_v2": {
    "description": "Defines compute_keypair_v2",
    "prefix": "tf-openstack-resource-compute_keypair_v2",
    "body": [
      "resource \"openstack_compute_keypair_v2\" \"test-keypair\" {",
      "  name       = \"my-keypair\"",
      "  public_key = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAjpC1hwiOCCmKEWxJ4qzTTsJbKzndLotBCz5PcwtUnflmU+gHJtWMZKpuEGVi29h0A/+ydKek1O18k10Ff+4tyFjiHDQAnOfgWf7+b1yK+qDip3X1C0UPMbwHlTfSGWLGZqd9LvEFx9k3h/M+VtMvwR1lJ9LUyTAImnNjWG7TaIPmui30HvM2UiFEmqkr4ijq45MyX2+fLIePLRIF61p4whjHAQYufqyno3BS48icQb4p6iVEZPo4AE2o9oIyQvj2mx4dk5Y8CgSETOZTYDOR3rU2fZTRDRgPJDH9FWvQjF5tA0p3d9CoWWd2s6GKKbfoUIi8R/Db1BSPJwkqB\"",
      "}"
    ]
  },
  "openstack-resource-compute_secgroup_v2": {
    "description": "Defines compute_secgroup_v2",
    "prefix": "tf-openstack-resource-compute_secgroup_v2",
    "body": [
      "resource \"openstack_compute_secgroup_v2\" \"secgroup_1\" {",
      "  name        = \"my_secgroup\"",
      "  description = \"my security group\"",
      "",
      "  rule {",
      "    from_port   = 22",
      "    to_port     = 22",
      "    ip_protocol = \"tcp\"",
      "    cidr        = \"0.0.0.0/0\"",
      "  }",
      "",
      "  rule {",
      "    from_port   = 80",
      "    to_port     = 80",
      "    ip_protocol = \"tcp\"",
      "    cidr        = \"0.0.0.0/0\"",
      "  }",
      "}"
    ]
  },
  "openstack-resource-compute_servergroup_v2": {
    "description": "Defines compute_servergroup_v2",
    "prefix": "tf-openstack-resource-compute_servergroup_v2",
    "body": [
      "resource \"openstack_compute_servergroup_v2\" \"test-sg\" {",
      "  name     = \"my-sg\"",
      "  policies = [\"anti-affinity\"]",
      "}"
    ]
  },
  "openstack-resource-compute_volume_attach_v2": {
    "description": "Defines compute_volume_attach_v2",
    "prefix": "tf-openstack-resource-compute_volume_attach_v2",
    "body": [
      "resource \"openstack_blockstorage_volume_v2\" \"volume_1\" {",
      "  name = \"volume_1\"",
      "  size = 1",
      "}",
      "",
      "resource \"openstack_compute_instance_v2\" \"instance_1\" {",
      "  name            = \"instance_1\"",
      "  security_groups = [\"default\"]",
      "}",
      "",
      "resource \"openstack_compute_volume_attach_v2\" \"va_1\" {",
      "  instance_id = \"${openstack_compute_instance_v2.instance_1.id}\"",
      "  volume_id   = \"${openstack_blockstorage_volume_v2.volume_1.id}\"",
      "}"
    ]
  },
  "openstack-resource-db_configuration_v1": {
    "description": "Defines db_configuration_v1",
    "prefix": "tf-openstack-resource-db_configuration_v1",
    "body": [
      "resource \"openstack_db_configuration_v1\" \"test\" {",
      "  name        = \"test\"",
      "  description = \"description\"",
      "",
      "  datastore {",
      "    version = \"mysql-5.7\"",
      "    type    = \"mysql\"",
      "  }",
      "",
      "  configuration {",
      "    name  = \"max_connections\"",
      "    value = 200",
      "  }",
      "}"
    ]
  },
  "openstack-resource-db_database_v1": {
    "description": "Defines db_database_v1",
    "prefix": "tf-openstack-resource-db_database_v1",
    "body": [
      "resource \"openstack_db_database_v1\" \"mydb\" {",
      "  name        = \"mydb\"",
      "  instance_id = \"${openstack_db_instance_v1.basic.id}\"",
      "}"
    ]
  },
  "openstack-resource-db_instance_v1": {
    "description": "Defines db_instance_v1",
    "prefix": "tf-openstack-resource-db_instance_v1",
    "body": [
      "resource \"openstack_db_instance_v1\" \"test\" {",
      "  region    = \"region-test\"",
      "  name      = \"test\"",
      "  flavor_id = \"31792d21-c355-4587-9290-56c1ed0ca376\"",
      "  size      = 8",
      "",
      "  network {",
      "    uuid = \"c0612505-caf2-4fb0-b7cb-56a0240a2b12\"",
      "  }",
      "",
      "  datastore {",
      "    version = \"mysql-5.7\"",
      "    type    = \"mysql\"",
      "  }",
      "}"
    ]
  },
  "openstack-resource-db_user_v1": {
    "description": "Defines db_user_v1",
    "prefix": "tf-openstack-resource-db_user_v1",
    "body": [
      "resource \"openstack_db_user_v1\" \"basic\" {",
      "  name      = \"basic\"",
      "  instance  = \"${openstack_db_instance_v1.basic.id}\"",
      "  password  = \"password\"",
      "  databases = [\"testdb\"]",
      "}"
    ]
  },
  "openstack-resource-dns_recordset_v2": {
    "description": "Defines dns_recordset_v2",
    "prefix": "tf-openstack-resource-dns_recordset_v2",
    "body": [
      "resource \"openstack_dns_zone_v2\" \"example_zone\" {",
      "  name = \"example.com.\"",
      "  email = \"email2@example.com\"",
      "  description = \"a zone\"",
      "  ttl = 6000",
      "  type = \"PRIMARY\"",
      "}",
      "",
      "resource \"openstack_dns_recordset_v2\" \"rs_example_com\" {",
      "  zone_id = \"${openstack_dns_zone_v2.example_zone.id}\"",
      "  name = \"rs.example.com.\"",
      "  description = \"An example record set\"",
      "  ttl = 3000",
      "  type = \"A\"",
      "  records = [\"10.0.0.1\"]",
      "}"
    ]
  },
  "openstack-resource-dns_zone_v2": {
    "description": "Defines dns_zone_v2",
    "prefix": "tf-openstack-resource-dns_zone_v2",
    "body": [
      "resource \"openstack_dns_zone_v2\" \"example.com\" {",
      "  name = \"example.com.\"",
      "  email = \"jdoe@example.com\"",
      "  description = \"An example zone\"",
      "  ttl = 3000",
      "  type = \"PRIMARY\"",
      "}"
    ]
  },
  "openstack-resource-fw_firewall_v1": {
    "description": "Defines fw_firewall_v1",
    "prefix": "tf-openstack-resource-fw_firewall_v1",
    "body": [
      "resource \"openstack_fw_rule_v1\" \"rule_1\" {",
      "  name             = \"my-rule-1\"",
      "  description      = \"drop TELNET traffic\"",
      "  action           = \"deny\"",
      "  protocol         = \"tcp\"",
      "  destination_port = \"23\"",
      "  enabled          = \"true\"",
      "}",
      "",
      "resource \"openstack_fw_rule_v1\" \"rule_2\" {",
      "  name             = \"my-rule-2\"",
      "  description      = \"drop NTP traffic\"",
      "  action           = \"deny\"",
      "  protocol         = \"udp\"",
      "  destination_port = \"123\"",
      "  enabled          = \"false\"",
      "}",
      "",
      "resource \"openstack_fw_policy_v1\" \"policy_1\" {",
      "  name = \"my-policy\"",
      "",
      "  rules = [\"${openstack_fw_rule_v1.rule_1.id}\",",
      "    \"${openstack_fw_rule_v1.rule_2.id}\",",
      "  ]",
      "}",
      "",
      "resource \"openstack_fw_firewall_v1\" \"firewall_1\" {",
      "  name      = \"my-firewall\"",
      "  policy_id = \"${openstack_fw_policy_v1.policy_1.id}\"",
      "}"
    ]
  },
  "openstack-resource-fw_policy_v1": {
    "description": "Defines fw_policy_v1",
    "prefix": "tf-openstack-resource-fw_policy_v1",
    "body": [
      "resource \"openstack_fw_rule_v1\" \"rule_1\" {",
      "  name             = \"my-rule-1\"",
      "  description      = \"drop TELNET traffic\"",
      "  action           = \"deny\"",
      "  protocol         = \"tcp\"",
      "  destination_port = \"23\"",
      "  enabled          = \"true\"",
      "}",
      "",
      "resource \"openstack_fw_rule_v1\" \"rule_2\" {",
      "  name             = \"my-rule-2\"",
      "  description      = \"drop NTP traffic\"",
      "  action           = \"deny\"",
      "  protocol         = \"udp\"",
      "  destination_port = \"123\"",
      "  enabled          = \"false\"",
      "}",
      "",
      "resource \"openstack_fw_policy_v1\" \"policy_1\" {",
      "  name = \"my-policy\"",
      "",
      "  rules = [\"${openstack_fw_rule_v1.rule_1.id}\",",
      "    \"${openstack_fw_rule_v1.rule_2.id}\",",
      "  ]",
      "}"
    ]
  },
  "openstack-resource-fw_rule_v1": {
    "description": "Defines fw_rule_v1",
    "prefix": "tf-openstack-resource-fw_rule_v1",
    "body": [
      "resource \"openstack_fw_rule_v1\" \"rule_1\" {",
      "  name             = \"my_rule\"",
      "  description      = \"drop TELNET traffic\"",
      "  action           = \"deny\"",
      "  protocol         = \"tcp\"",
      "  destination_port = \"23\"",
      "  enabled          = \"true\"",
      "}"
    ]
  },
  "openstack-resource-identity_project_v3": {
    "description": "Defines identity_project_v3",
    "prefix": "tf-openstack-resource-identity_project_v3",
    "body": [
      "resource \"openstack_identity_project_v3\" \"project_1\" {",
      "  name = \"project_1\"",
      "  description = \"A project\"",
      "}"
    ]
  },
  "openstack-resource-identity_role_assignment_v3": {
    "description": "Defines identity_role_assignment_v3",
    "prefix": "tf-openstack-resource-identity_role_assignment_v3",
    "body": [
      "resource \"openstack_identity_project_v3\" \"project_1\" {",
      "  name = \"project_1\"",
      "}",
      "",
      "resource \"openstack_identity_user_v3\" \"user_1\" {",
      "  name = \"user_1\"",
      "  default_project_id = \"${openstack_identity_project_v3.project_1.id}\"",
      "}",
      "",
      "resource \"openstack_identity_role_v3\" \"role_1\" {",
      "  name = \"role_1\"",
      "}",
      "",
      "resource \"openstack_identity_role_assignment_v3\" \"role_assignment_1\" {",
      "  user_id = \"${openstack_identity_user_v3.user_1.id}\"",
      "  project_id = \"${openstack_identity_project_v3.project_1.id}\"",
      "  role_id = \"${openstack_identity_role_v3.role_1.id}\"",
      "}"
    ]
  },
  "openstack-resource-identity_role_v3": {
    "description": "Defines identity_role_v3",
    "prefix": "tf-openstack-resource-identity_role_v3",
    "body": [
      "resource \"openstack_identity_role_v3\" \"role_1\" {",
      "  name = \"role_1\"",
      "}"
    ]
  },
  "openstack-resource-identity_user_v3": {
    "description": "Defines identity_user_v3",
    "prefix": "tf-openstack-resource-identity_user_v3",
    "body": [
      "resource \"openstack_identity_project_v3\" \"project_1\" {",
      "  name = \"project_1\"",
      "}",
      "",
      "resource \"openstack_identity_user_v3\" \"user_1\" {",
      "  default_project_id = \"${openstack_identity_project_v3.project_1.id}\"",
      "  name = \"user_1\"",
      "  description = \"A user\"",
      "",
      "  password = \"password123\"",
      "",
      "  ignore_change_password_upon_first_use = true",
      "",
      "  multi_factor_auth_enabled = true",
      "",
      "  multi_factor_auth_rule {",
      "    rule = [\"password\", \"totp\"]",
      "  }",
      "",
      "  multi_factor_auth_rule {",
      "    rule = [\"password\"]",
      "  }",
      "",
      "  extra {",
      "    email = \"user_1@foobar.com\"",
      "  }",
      "}"
    ]
  },
  "openstack-resource-images_image_v2": {
    "description": "Defines images_image_v2",
    "prefix": "tf-openstack-resource-images_image_v2",
    "body": [
      "resource \"openstack_images_image_v2\" \"rancheros\" {",
      "  name   = \"RancherOS\"",
      "  image_source_url = \"https://releases.rancher.com/os/latest/rancheros-openstack.img\"",
      "  container_format = \"bare\"",
      "  disk_format = \"qcow2\"",
      "",
      "  properties {",
      "    key = \"value\"",
      "  }",
      "}"
    ]
  },
  "openstack-resource-lb_listener_v2": {
    "description": "Defines lb_listener_v2",
    "prefix": "tf-openstack-resource-lb_listener_v2",
    "body": [
      "resource \"openstack_lb_listener_v2\" \"listener_1\" {",
      "  protocol        = \"HTTP\"",
      "  protocol_port   = 8080",
      "  loadbalancer_id = \"d9415786-5f1a-428b-b35f-2f1523e146d2\"",
      "}"
    ]
  },
  "openstack-resource-lb_loadbalancer_v2": {
    "description": "Defines lb_loadbalancer_v2",
    "prefix": "tf-openstack-resource-lb_loadbalancer_v2",
    "body": [
      "resource \"openstack_lb_loadbalancer_v2\" \"lb_1\" {",
      "  vip_subnet_id = \"d9415786-5f1a-428b-b35f-2f1523e146d2\"",
      "}"
    ]
  },
  "openstack-resource-lb_member_v1": {
    "description": "Defines lb_member_v1",
    "prefix": "tf-openstack-resource-lb_member_v1",
    "body": [
      "resource \"openstack_lb_member_v1\" \"member_1\" {",
      "  pool_id = \"d9415786-5f1a-428b-b35f-2f1523e146d2\"",
      "  address = \"192.168.0.10\"",
      "  port    = 80",
      "}"
    ]
  },
  "openstack-resource-lb_member_v2": {
    "description": "Defines lb_member_v2",
    "prefix": "tf-openstack-resource-lb_member_v2",
    "body": [
      "resource \"openstack_lb_member_v2\" \"member_1\" {",
      "  address       = \"192.168.199.23\"",
      "  protocol_port = 8080",
      "}"
    ]
  },
  "openstack-resource-lb_monitor_v1": {
    "description": "Defines lb_monitor_v1",
    "prefix": "tf-openstack-resource-lb_monitor_v1",
    "body": [
      "resource \"openstack_lb_monitor_v1\" \"monitor_1\" {",
      "  type           = \"PING\"",
      "  delay          = 30",
      "  timeout        = 5",
      "  max_retries    = 3",
      "  admin_state_up = \"true\"",
      "}"
    ]
  },
  "openstack-resource-lb_monitor_v2": {
    "description": "Defines lb_monitor_v2",
    "prefix": "tf-openstack-resource-lb_monitor_v2",
    "body": [
      "resource \"openstack_lb_monitor_v2\" \"monitor_1\" {",
      "  pool_id     = \"${openstack_lb_pool_v2.pool_1.id}\"",
      "  type        = \"PING\"",
      "  delay       = 20",
      "  timeout     = 10",
      "  max_retries = 5",
      "}"
    ]
  },
  "openstack-resource-lb_pool_v1": {
    "description": "Defines lb_pool_v1",
    "prefix": "tf-openstack-resource-lb_pool_v1",
    "body": [
      "resource \"openstack_lb_pool_v1\" \"pool_1\" {",
      "  name        = \"tf_test_lb_pool\"",
      "  protocol    = \"HTTP\"",
      "  subnet_id   = \"12345\"",
      "  lb_method   = \"ROUND_ROBIN\"",
      "  lb_provider = \"haproxy\"",
      "  monitor_ids = [\"67890\"]",
      "}"
    ]
  },
  "openstack-resource-lb_pool_v2": {
    "description": "Defines lb_pool_v2",
    "prefix": "tf-openstack-resource-lb_pool_v2",
    "body": [
      "resource \"openstack_lb_pool_v2\" \"pool_1\" {",
      "  protocol    = \"HTTP\"",
      "  lb_method   = \"ROUND_ROBIN\"",
      "  listener_id = \"d9415786-5f1a-428b-b35f-2f1523e146d2\"",
      "",
      "  persistence {",
      "    type        = \"HTTP_COOKIE\"",
      "    cookie_name = \"testCookie\"",
      "  }",
      "}"
    ]
  },
  "openstack-resource-lb_vip_v1": {
    "description": "Defines lb_vip_v1",
    "prefix": "tf-openstack-resource-lb_vip_v1",
    "body": [
      "resource \"openstack_lb_vip_v1\" \"vip_1\" {",
      "  name      = \"tf_test_lb_vip\"",
      "  subnet_id = \"12345\"",
      "  protocol  = \"HTTP\"",
      "  port      = 80",
      "  pool_id   = \"67890\"",
      "}"
    ]
  },
  "openstack-resource-networking_floatingip_associate_v2": {
    "description": "Defines networking_floatingip_associate_v2",
    "prefix": "tf-openstack-resource-networking_floatingip_associate_v2",
    "body": [
      "resource \"openstack_networking_port_v2\" \"port_1\" {",
      "  network_id = \"a5bbd213-e1d3-49b6-aed1-9df60ea94b9a\"",
      "}",
      "",
      "resource \"openstack_networking_floatingip_associate_v2\" \"fip_1\" {",
      "  floating_ip = \"1.2.3.4\"",
      "  port_id = \"${openstack_networking_port_v2.port_1.id}\"",
      "}"
    ]
  },
  "openstack-resource-networking_floatingip_v2": {
    "description": "Defines networking_floatingip_v2",
    "prefix": "tf-openstack-resource-networking_floatingip_v2",
    "body": [
      "resource \"openstack_networking_floatingip_v2\" \"floatip_1\" {",
      "  pool = \"public\"",
      "}"
    ]
  },
  "openstack-resource-networking_network_v2": {
    "description": "Defines networking_network_v2",
    "prefix": "tf-openstack-resource-networking_network_v2",
    "body": [
      "resource \"openstack_networking_network_v2\" \"network_1\" {",
      "  name           = \"network_1\"",
      "  admin_state_up = \"true\"",
      "}",
      "",
      "resource \"openstack_networking_subnet_v2\" \"subnet_1\" {",
      "  name       = \"subnet_1\"",
      "  network_id = \"${openstack_networking_network_v2.network_1.id}\"",
      "  cidr       = \"192.168.199.0/24\"",
      "  ip_version = 4",
      "}",
      "",
      "resource \"openstack_compute_secgroup_v2\" \"secgroup_1\" {",
      "  name        = \"secgroup_1\"",
      "  description = \"a security group\"",
      "",
      "  rule {",
      "    from_port   = 22",
      "    to_port     = 22",
      "    ip_protocol = \"tcp\"",
      "    cidr        = \"0.0.0.0/0\"",
      "  }",
      "}",
      "",
      "resource \"openstack_networking_port_v2\" \"port_1\" {",
      "  name               = \"port_1\"",
      "  network_id         = \"${openstack_networking_network_v2.network_1.id}\"",
      "  admin_state_up     = \"true\"",
      "  security_group_ids = [\"${openstack_compute_secgroup_v2.secgroup_1.id}\"]",
      "",
      "  fixed_ip {",
      "    \"subnet_id\"  = \"${openstack_networking_subnet_v2.subnet_1.id}\"",
      "    \"ip_address\" = \"192.168.199.10\"",
      "  }",
      "}",
      "",
      "resource \"openstack_compute_instance_v2\" \"instance_1\" {",
      "  name            = \"instance_1\"",
      "  security_groups = [\"${openstack_compute_secgroup_v2.secgroup_1.name}\"]",
      "",
      "  network {",
      "    port = \"${openstack_networking_port_v2.port_1.id}\"",
      "  }",
      "}"
    ]
  },
  "openstack-resource-networking_port_v2": {
    "description": "Defines networking_port_v2",
    "prefix": "tf-openstack-resource-networking_port_v2",
    "body": [
      "resource \"openstack_networking_network_v2\" \"network_1\" {",
      "  name           = \"network_1\"",
      "  admin_state_up = \"true\"",
      "}",
      "",
      "resource \"openstack_networking_port_v2\" \"port_1\" {",
      "  name           = \"port_1\"",
      "  network_id     = \"${openstack_networking_network_v2.network_1.id}\"",
      "  admin_state_up = \"true\"",
      "}"
    ]
  },
  "openstack-resource-networking_router_interface_v2": {
    "description": "Defines networking_router_interface_v2",
    "prefix": "tf-openstack-resource-networking_router_interface_v2",
    "body": [
      "resource \"openstack_networking_network_v2\" \"network_1\" {",
      "  name           = \"tf_test_network\"",
      "  admin_state_up = \"true\"",
      "}",
      "",
      "resource \"openstack_networking_subnet_v2\" \"subnet_1\" {",
      "  network_id = \"${openstack_networking_network_v2.network_1.id}\"",
      "  cidr       = \"192.168.199.0/24\"",
      "  ip_version = 4",
      "}",
      "",
      "resource \"openstack_networking_router_v2\" \"router_1\" {",
      "  name             = \"my_router\"",
      "  external_gateway = \"f67f0d72-0ddf-11e4-9d95-e1f29f417e2f\"",
      "}",
      "",
      "resource \"openstack_networking_router_interface_v2\" \"router_interface_1\" {",
      "  router_id = \"${openstack_networking_router_v2.router_1.id}\"",
      "  subnet_id = \"${openstack_networking_subnet_v2.subnet_1.id}\"",
      "}"
    ]
  },
  "openstack-resource-networking_router_route_v2": {
    "description": "Defines networking_router_route_v2",
    "prefix": "tf-openstack-resource-networking_router_route_v2",
    "body": [
      "resource \"openstack_networking_router_v2\" \"router_1\" {",
      "  name           = \"router_1\"",
      "  admin_state_up = \"true\"",
      "}",
      "",
      "resource \"openstack_networking_network_v2\" \"network_1\" {",
      "  name           = \"network_1\"",
      "  admin_state_up = \"true\"",
      "}",
      "",
      "resource \"openstack_networking_subnet_v2\" \"subnet_1\" {",
      "  network_id = \"${openstack_networking_network_v2.network_1.id}\"",
      "  cidr       = \"192.168.199.0/24\"",
      "  ip_version = 4",
      "}",
      "",
      "resource \"openstack_networking_router_interface_v2\" \"int_1\" {",
      "  router_id = \"${openstack_networking_router_v2.router_1.id}\"",
      "  subnet_id = \"${openstack_networking_subnet_v2.subnet_1.id}\"",
      "}",
      "",
      "resource \"openstack_networking_router_route_v2\" \"router_route_1\" {",
      "  depends_on       = [\"openstack_networking_router_interface_v2.int_1\"]",
      "  router_id        = \"${openstack_networking_router_v2.router_1.id}\"",
      "  destination_cidr = \"10.0.1.0/24\"",
      "  next_hop         = \"192.168.199.254\"",
      "}"
    ]
  },
  "openstack-resource-networking_router_v2": {
    "description": "Defines networking_router_v2",
    "prefix": "tf-openstack-resource-networking_router_v2",
    "body": [
      "resource \"openstack_networking_router_v2\" \"router_1\" {",
      "  name                = \"my_router\"",
      "  admin_state_up      = true",
      "  external_network_id = \"f67f0d72-0ddf-11e4-9d95-e1f29f417e2f\"",
      "}"
    ]
  },
  "openstack-resource-networking_secgroup_rule_v2": {
    "description": "Defines networking_secgroup_rule_v2",
    "prefix": "tf-openstack-resource-networking_secgroup_rule_v2",
    "body": [
      "resource \"openstack_networking_secgroup_v2\" \"secgroup_1\" {",
      "  name        = \"secgroup_1\"",
      "  description = \"My neutron security group\"",
      "}",
      "",
      "resource \"openstack_networking_secgroup_rule_v2\" \"secgroup_rule_1\" {",
      "  direction         = \"ingress\"",
      "  ethertype         = \"IPv4\"",
      "  protocol          = \"tcp\"",
      "  port_range_min    = 22",
      "  port_range_max    = 22",
      "  remote_ip_prefix  = \"0.0.0.0/0\"",
      "  security_group_id = \"${openstack_networking_secgroup_v2.secgroup_1.id}\"",
      "}"
    ]
  },
  "openstack-resource-networking_secgroup_v2": {
    "description": "Defines networking_secgroup_v2",
    "prefix": "tf-openstack-resource-networking_secgroup_v2",
    "body": [
      "resource \"openstack_networking_secgroup_v2\" \"secgroup_1\" {",
      "  name        = \"secgroup_1\"",
      "  description = \"My neutron security group\"",
      "}"
    ]
  },
  "openstack-resource-networking_subnet_route_v2": {
    "description": "Defines networking_subnet_route_v2",
    "prefix": "tf-openstack-resource-networking_subnet_route_v2",
    "body": [
      "resource \"openstack_networking_router_v2\" \"router_1\" {",
      "  name           = \"router_1\"",
      "  admin_state_up = \"true\"",
      "}",
      "",
      "resource \"openstack_networking_network_v2\" \"network_1\" {",
      "  name           = \"network_1\"",
      "  admin_state_up = \"true\"",
      "}",
      "",
      "resource \"openstack_networking_subnet_v2\" \"subnet_1\" {",
      "  network_id = \"${openstack_networking_network_v2.network_1.id}\"",
      "  cidr       = \"192.168.199.0/24\"",
      "  ip_version = 4",
      "}",
      "",
      "resource \"openstack_networking_subnet_route_v2\" \"subnet_route_1\" {",
      "  subnet_id        = \"${openstack_networking_subnet_v2.subnet_1.id}\"",
      "  destination_cidr = \"10.0.1.0/24\"",
      "  next_hop         = \"192.168.199.254\"",
      "}"
    ]
  },
  "openstack-resource-networking_subnet_v2": {
    "description": "Defines networking_subnet_v2",
    "prefix": "tf-openstack-resource-networking_subnet_v2",
    "body": [
      "resource \"openstack_networking_network_v2\" \"network_1\" {",
      "  name           = \"tf_test_network\"",
      "  admin_state_up = \"true\"",
      "}",
      "",
      "resource \"openstack_networking_subnet_v2\" \"subnet_1\" {",
      "  network_id = \"${openstack_networking_network_v2.network_1.id}\"",
      "  cidr       = \"192.168.199.0/24\"",
      "}"
    ]
  },
  "openstack-resource-networking_subnetpool_v2": {
    "description": "Defines networking_subnetpool_v2",
    "prefix": "tf-openstack-resource-networking_subnetpool_v2",
    "body": [
      "resource \"openstack_networking_subnetpool_v2\" \"subnetpool_1\" {",
      "  name = \"subnetpool_1\"",
      "  ip_version = 6",
      "  prefixes = [\"fdf7:b13d:dead:beef::/64\", \"fd65:86cc:a334:39b7::/64\"]",
      "}"
    ]
  },
  "openstack-resource-objectstorage_container_v1": {
    "description": "Defines objectstorage_container_v1",
    "prefix": "tf-openstack-resource-objectstorage_container_v1",
    "body": [
      "resource \"openstack_objectstorage_container_v1\" \"container_1\" {",
      "  region = \"RegionOne\"",
      "  name   = \"tf-test-container-1\"",
      "",
      "  metadata {",
      "    test = \"true\"",
      "  }",
      "",
      "  content_type = \"application/json\"",
      "}"
    ]
  },
  "openstack-resource-objectstorage_object_v1": {
    "description": "Defines objectstorage_object_v1",
    "prefix": "tf-openstack-resource-objectstorage_object_v1",
    "body": [
      "resource \"openstack_objectstorage_container_v1\" \"container_1\" {",
      "  region = \"RegionOne\"",
      "  name   = \"tf-test-container-1\"",
      "",
      "  metadata {",
      "    test = \"true\"",
      "  }",
      "",
      "  content_type = \"application/json\"",
      "}",
      "",
      "resource \"openstack_objectstorage_object_v1\" \"doc_1\" {",
      "  region         = \"RegionOne\"",
      "  container_name = \"${openstack_objectstorage_container_v1.container_1.name}\"",
      "  name           = \"test/default.json\"",
      "  metadata {",
      "    test = \"true\"",
      "  }",
      "",
      "  content_type = \"application/json\"",
      "  content = <<JSON",
      "               {",
      "                 \"foo\" : \"bar\"",
      "               }",
      "JSON",
      "",
      "}"
    ]
  },
  "openstack-resource-vpnaas_endpoint_group_v2": {
    "description": "Defines vpnaas_endpoint_group_v2",
    "prefix": "tf-openstack-resource-vpnaas_endpoint_group_v2",
    "body": [
      "resource \"openstack_vpnaas_endpoint_group_v2\" \"group_1\" {",
      "  name = \"Group 1\"",
      "  type = \"cidr\"",
      "  endpoints = [\"10.2.0.0/24\",",
      "        \"10.3.0.0/24\",]",
      "}"
    ]
  },
  "openstack-resource-vpnaas_ike_policy_v2": {
    "description": "Defines vpnaas_ike_policy_v2",
    "prefix": "tf-openstack-resource-vpnaas_ike_policy_v2",
    "body": [
      "resource \"openstack_vpnaas_ike_policy_v2\" \"policy_1\" {",
      "  name = \"my_policy\"",
      "}"
    ]
  },
  "openstack-resource-vpnaas_ipsec_policy_v2": {
    "description": "Defines vpnaas_ipsec_policy_v2",
    "prefix": "tf-openstack-resource-vpnaas_ipsec_policy_v2",
    "body": [
      "resource \"openstack_vpnaas_ipsec_policy_v2\" \"policy_1\" {",
      "  name = \"my_policy\"",
      "}"
    ]
  },
  "openstack-resource-vpnaas_service_v2": {
    "description": "Defines vpnaas_service_v2",
    "prefix": "tf-openstack-resource-vpnaas_service_v2",
    "body": [
      "resource \"openstack_vpnaas_service_v2\" \"service_1\" {",
      "  name = \"my_service\"",
      "  router_id = \"14a75700-fc03-4602-9294-26ee44f366b3\"",
      "  admin_state_up = \"true\"",
      "}"
    ]
  },
  "opentelekomcloud-data-cesalarm-rule": {
    "description": "Defines cesalarm-rule",
    "prefix": "tf-opentelekomcloud-data-cesalarm-rule",
    "body": [
      "resource \"opentelekomcloud_ces_alarmrule\" \"alarm_rule\" {",
      "  \"alarm_name\" = \"alarm_rule\"",
      "  \"metric\" {",
      "    \"namespace\" = \"SYS.ECS\"",
      "    \"metric_name\" = \"network_outgoing_bytes_rate_inband\"",
      "    \"dimensions\" {",
      "        \"name\" = \"instance_id\"",
      "        \"value\" = \"${opentelekomcloud_compute_instance_v2.webserver.id}\"",
      "    }",
      "  }",
      "  \"condition\"  {",
      "    \"period\" = 300",
      "    \"filter\" = \"average\"",
      "    \"comparison_operator\" = \">\"",
      "    \"value\" = 6",
      "    \"unit\" = \"B/s\"",
      "    \"count\" = 1",
      "  }",
      "  \"alarm_actions\" {",
      "    \"type\" = \"notification\"",
      "    \"notification_list\" = [",
      "      \"${opentelekomcloud_smn_topic_v2.topic.id}\"",
      "    ]",
      "  }",
      "}"
    ]
  },
  "opentelekomcloud-data-elb_backend": {
    "description": "Defines elb_backend",
    "prefix": "tf-opentelekomcloud-data-elb_backend",
    "body": [
      "resource \"opentelekomcloud_elb_backend\" \"backend_1\" {",
      "  address = \"1.1.1.1s\"",
      "  listener_id = \"d9415786-5f1a-428b-b35f-2f1523e146d2\"",
      "  server_id = \"%s\"",
      "  timeouts {",
      "    create = \"5m\"",
      "    delete = \"5m\"",
      "  }",
      "}"
    ]
  },
  "opentelekomcloud-data-elb_health": {
    "description": "Defines elb_health",
    "prefix": "tf-opentelekomcloud-data-elb_health",
    "body": [
      "resource \"opentelekomcloud_elb_health\" \"health_1\" {",
      "  listener_id = \"}\"",
      "  healthy_threshold = 3",
      "",
      "  timeouts {",
      "    create = \"5m\"",
      "    update = \"5m\"",
      "    delete = \"5m\"",
      "  }",
      "}"
    ]
  },
  "opentelekomcloud-data-elb_listener": {
    "description": "Defines elb_listener",
    "prefix": "tf-opentelekomcloud-data-elb_listener",
    "body": [
      "resource \"opentelekomcloud_elb_listener\" \"listener_1\" {",
      "  name = \"listener_1\"",
      "  protocol = \"TCP\"",
      "  protocol_port = 8080",
      "  backend_protocol = \"TCP\"",
      "  backend_port = 8080",
      "  lb_algorithm = \"roundrobin\"",
      "  loadbalancer_id = \"d9415786-5f1a-428b-b35f-2f1523e146d2\"",
      "    timeouts {",
      "\tcreate = \"5m\"",
      "\tupdate = \"5m\"",
      "\tdelete = \"5m\"",
      "    }",
      "}"
    ]
  },
  "opentelekomcloud-data-elb_loadbalancer": {
    "description": "Defines elb_loadbalancer",
    "prefix": "tf-opentelekomcloud-data-elb_loadbalancer",
    "body": [
      "resource \"opentelekomcloud_elb_loadbalancer\" \"loadbalancer_1\" {",
      "  name = \"loadbalancer_1\"",
      "  vpc_id = \"d9415786-5f1a-428b-b35f-2f1523e146d2\"",
      "  type = \"External\"",
      "  bandwidth = 5",
      "}"
    ]
  },
  "opentelekomcloud-data-images_image_v2": {
    "description": "Defines images_image_v2",
    "prefix": "tf-opentelekomcloud-data-images_image_v2",
    "body": [
      "data \"opentelekomcloud_images_image_v2\" \"ubuntu\" {",
      "  name = \"Ubuntu 16.04\"",
      "  most_recent = true",
      "}"
    ]
  },
  "opentelekomcloud-data-kms_data_key_v1": {
    "description": "Defines kms_data_key_v1",
    "prefix": "tf-opentelekomcloud-data-kms_data_key_v1",
    "body": [
      "",
      "resource \"huaweicloud_kms_key_v1\" \"key1\" {",
      "  key_alias       = \"key_1\"",
      "  pending_days    = \"7\"",
      "  key_description = \"first test key\"",
      "}",
      "",
      "data \"huaweicloud_kms_data_key_v1\" \"kms_datakey1\" {",
      "  key_id         = \"${huaweicloud_kms_key_v1.key1.id}\"",
      "  datakey_length = \"512\"",
      "}",
      ""
    ]
  },
  "opentelekomcloud-data-kms_key_v1": {
    "description": "Defines kms_key_v1",
    "prefix": "tf-opentelekomcloud-data-kms_key_v1",
    "body": [
      "",
      "data \"huaweicloud_kms_key_v1\" \"key_1\" {",
      "  key_alias        = \"test_key\"",
      "  key_description  = \"test key description\"",
      "  key_state        = \"2\"",
      "  key_id           = \"af650527-a0ff-4527-aef3-c493df1f3012\"",
      "  realm            = \"cn-north-1\"",
      "  default_key_flag = \"0\"",
      "  domain_id        = \"b168fe00ff56492495a7d22974df2d0b\"",
      "  origin           = \"kms\"",
      "}"
    ]
  },
  "opentelekomcloud-data-networking_network_v2": {
    "description": "Defines networking_network_v2",
    "prefix": "tf-opentelekomcloud-data-networking_network_v2",
    "body": [
      "data \"opentelekomcloud_networking_network_v2\" \"network\" {",
      "  name = \"tf_test_network\"",
      "}"
    ]
  },
  "opentelekomcloud-data-networking_secgroup_v2": {
    "description": "Defines networking_secgroup_v2",
    "prefix": "tf-opentelekomcloud-data-networking_secgroup_v2",
    "body": [
      "data \"opentelekomcloud_networking_secgroup_v2\" \"secgroup\" {",
      "  name = \"tf_test_secgroup\"",
      "}"
    ]
  },
  "opentelekomcloud-data-rds_flavors_v1": {
    "description": "Defines rds_flavors_v1",
    "prefix": "tf-opentelekomcloud-data-rds_flavors_v1",
    "body": [
      "data \"opentelekomcloud_rds_flavors_v1\" \"flavor\" {",
      "    region = \"eu-de\"",
      "    datastore_name = \"PostgreSQL\"",
      "    datastore_version = \"9.5.5\"",
      "    speccode = \"rds.pg.s1.medium\"",
      "}"
    ]
  },
  "opentelekomcloud-data-s3_bucket_object": {
    "description": "Defines s3_bucket_object data source",
    "prefix": "tf-opentelekomcloud-data-s3_bucket_object",
    "body": [
      "data \"opentelekomcloud_s3_bucket_object\" \"${1:object_name}\" {",
      "  bucket = \"my-test-bucket\"",
      "  key    = \"hello-world.zip\"",
      "}",
      ""
    ]
  },
  "opentelekomcloud-resource-blockstorage_volume_attach_v2": {
    "description": "Defines blockstorage_volume_attach_v2",
    "prefix": "tf-opentelekomcloud-resource-blockstorage_volume_attach_v2",
    "body": [
      "resource \"opentelekomcloud_blockstorage_volume_v2\" \"volume_1\" {",
      "  name = \"volume_1\"",
      "  size = 1",
      "}",
      "",
      "resource \"opentelekomcloud_blockstorage_volume_attach_v2\" \"va_1\" {",
      "  volume_id = \"${opentelekomcloud_blockstorage_volume_v2.volume_1.id}\"",
      "  device = \"auto\"",
      "  host_name = \"devstack\"",
      "  ip_address = \"192.168.255.10\"",
      "  initiator = \"iqn.1993-08.org.debian:01:e9861fb1859\"",
      "  os_type = \"linux2\"",
      "  platform = \"x86_64\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-blockstorage_volume_v1": {
    "description": "Defines blockstorage_volume_v1",
    "prefix": "tf-opentelekomcloud-resource-blockstorage_volume_v1",
    "body": [
      "resource \"opentelekomcloud_blockstorage_volume_v1\" \"volume_1\" {",
      "  region      = \"RegionOne\"",
      "  name        = \"tf-test-volume\"",
      "  description = \"first test volume\"",
      "  size        = 3",
      "}"
    ]
  },
  "opentelekomcloud-resource-blockstorage_volume_v2": {
    "description": "Defines blockstorage_volume_v2",
    "prefix": "tf-opentelekomcloud-resource-blockstorage_volume_v2",
    "body": [
      "resource \"opentelekomcloud_blockstorage_volume_v2\" \"volume_1\" {",
      "  region      = \"RegionOne\"",
      "  name        = \"volume_1\"",
      "  description = \"first test volume\"",
      "  size        = 3",
      "}"
    ]
  },
  "opentelekomcloud-resource-compute_floatingip_associate_v2": {
    "description": "Defines compute_floatingip_associate_v2",
    "prefix": "tf-opentelekomcloud-resource-compute_floatingip_associate_v2",
    "body": [
      "resource \"opentelekomcloud_compute_instance_v2\" \"instance_1\" {",
      "  name            = \"instance_1\"",
      "  image_id        = \"ad091b52-742f-469e-8f3c-fd81cadf0743\"",
      "  flavor_id       = 3",
      "  key_pair        = \"my_key_pair_name\"",
      "  security_groups = [\"default\"]",
      "}",
      "",
      "resource \"opentelekomcloud_networking_floatingip_v2\" \"fip_1\" {",
      "  pool = \"my_pool\"",
      "}",
      "",
      "resource \"opentelekomcloud_compute_floatingip_associate_v2\" \"fip_1\" {",
      "  floating_ip = \"${opentelekomcloud_networking_floatingip_v2.fip_1.address}\"",
      "  instance_id = \"${opentelekomcloud_compute_instance_v2.instance_1.id}\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-compute_floatingip_v2": {
    "description": "Defines compute_floatingip_v2",
    "prefix": "tf-opentelekomcloud-resource-compute_floatingip_v2",
    "body": [
      "resource \"opentelekomcloud_compute_floatingip_v2\" \"floatip_1\" {",
      "  pool = \"public\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-compute_instance_v2": {
    "description": "Defines compute_instance_v2",
    "prefix": "tf-opentelekomcloud-resource-compute_instance_v2",
    "body": [
      "resource \"opentelekomcloud_compute_instance_v2\" \"basic\" {",
      "  name            = \"basic\"",
      "  image_id        = \"ad091b52-742f-469e-8f3c-fd81cadf0743\"",
      "  flavor_id       = \"3\"",
      "  key_pair        = \"my_key_pair_name\"",
      "  security_groups = [\"default\"]",
      "  tags = [\"foo.bar\", \"tag.value\"]",
      "",
      "  metadata {",
      "    this = \"that\"",
      "  }",
      "",
      "  network {",
      "    name = \"my_network\"",
      "  }",
      "}"
    ]
  },
  "opentelekomcloud-resource-compute_keypair_v2": {
    "description": "Defines compute_keypair_v2",
    "prefix": "tf-opentelekomcloud-resource-compute_keypair_v2",
    "body": [
      "resource \"opentelekomcloud_compute_keypair_v2\" \"test-keypair\" {",
      "  name       = \"my-keypair\"",
      "  public_key = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAjpC1hwiOCCmKEWxJ4qzTTsJbKzndLotBCz5PcwtUnflmU+gHJtWMZKpuEGVi29h0A/+ydKek1O18k10Ff+4tyFjiHDQAnOfgWf7+b1yK+qDip3X1C0UPMbwHlTfSGWLGZqd9LvEFx9k3h/M+VtMvwR1lJ9LUyTAImnNjWG7TaIPmui30HvM2UiFEmqkr4ijq45MyX2+fLIePLRIF61p4whjHAQYufqyno3BS48icQb4p6iVEZPo4AE2o9oIyQvj2mx4dk5Y8CgSETOZTYDOR3rU2fZTRDRgPJDH9FWvQjF5tA0p3d9CoWWd2s6GKKbfoUIi8R/Db1BSPJwkqB\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-compute_secgroup_v2": {
    "description": "Defines compute_secgroup_v2",
    "prefix": "tf-opentelekomcloud-resource-compute_secgroup_v2",
    "body": [
      "resource \"opentelekomcloud_compute_secgroup_v2\" \"secgroup_1\" {",
      "  name        = \"my_secgroup\"",
      "  description = \"my security group\"",
      "",
      "  rule {",
      "    from_port   = 22",
      "    to_port     = 22",
      "    ip_protocol = \"tcp\"",
      "    cidr        = \"0.0.0.0/0\"",
      "  }",
      "",
      "  rule {",
      "    from_port   = 80",
      "    to_port     = 80",
      "    ip_protocol = \"tcp\"",
      "    cidr        = \"0.0.0.0/0\"",
      "  }",
      "}"
    ]
  },
  "opentelekomcloud-resource-compute_servergroup_v2": {
    "description": "Defines compute_servergroup_v2",
    "prefix": "tf-opentelekomcloud-resource-compute_servergroup_v2",
    "body": [
      "resource \"opentelekomcloud_compute_servergroup_v2\" \"test-sg\" {",
      "  name     = \"my-sg\"",
      "  policies = [\"anti-affinity\"]",
      "}"
    ]
  },
  "opentelekomcloud-resource-compute_volume_attach_v2": {
    "description": "Defines compute_volume_attach_v2",
    "prefix": "tf-opentelekomcloud-resource-compute_volume_attach_v2",
    "body": [
      "resource \"opentelekomcloud_blockstorage_volume_v2\" \"volume_1\" {",
      "  name = \"volume_1\"",
      "  size = 1",
      "}",
      "",
      "resource \"opentelekomcloud_compute_instance_v2\" \"instance_1\" {",
      "  name            = \"instance_1\"",
      "  security_groups = [\"default\"]",
      "}",
      "",
      "resource \"opentelekomcloud_compute_volume_attach_v2\" \"va_1\" {",
      "  instance_id = \"${opentelekomcloud_compute_instance_v2.instance_1.id}\"",
      "  volume_id   = \"${opentelekomcloud_blockstorage_volume_v2.volume_1.id}\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-dns_recordset_v2": {
    "description": "Defines dns_recordset_v2",
    "prefix": "tf-opentelekomcloud-resource-dns_recordset_v2",
    "body": [
      "resource \"opentelekomcloud_dns_zone_v2\" \"example_zone\" {",
      "  name = \"example.com.\"",
      "  email = \"email2@example.com\"",
      "  description = \"a zone\"",
      "  ttl = 6000",
      "  type = \"PRIMARY\"",
      "}",
      "",
      "resource \"opentelekomcloud_dns_recordset_v2\" \"rs_example_com\" {",
      "  zone_id = \"${opentelekomcloud_dns_zone_v2.example_zone.id}\"",
      "  name = \"rs.example.com.\"",
      "  description = \"An example record set\"",
      "  ttl = 3000",
      "  type = \"A\"",
      "  records = [\"10.0.0.1\"]",
      "}"
    ]
  },
  "opentelekomcloud-resource-dns_zone_v2": {
    "description": "Defines dns_zone_v2",
    "prefix": "tf-opentelekomcloud-resource-dns_zone_v2",
    "body": [
      "resource \"opentelekomcloud_dns_zone_v2\" \"example.com\" {",
      "  name = \"example.com.\"",
      "  email = \"jdoe@example.com\"",
      "  description = \"An example zone\"",
      "  ttl = 3000",
      "  type = \"PRIMARY\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-elb_backend": {
    "description": "Defines elb_backend",
    "prefix": "tf-opentelekomcloud-resource-elb_backend",
    "body": [
      "resource \"opentelekomcloud_elb_loadbalancer\" \"elb\" {",
      "  name = \"elb\"",
      "  type = \"External\"",
      "  description = \"test elb\"",
      "  vpc_id = \"e346dc4a-d9a6-46f4-90df-10153626076e\"",
      "  admin_state_up = 1",
      "  bandwidth = 5",
      "}",
      "",
      "resource \"opentelekomcloud_elb_listener\" \"listener\" {",
      "  name = \"test-elb-listener\"",
      "  description = \"great listener\"",
      "  protocol = \"TCP\"",
      "  backend_protocol = \"TCP\"",
      "  protocol_port = 12345",
      "  backend_port = 8080",
      "  lb_algorithm = \"roundrobin\"",
      "  loadbalancer_id = \"${opentelekomcloud_elb_loadbalancer.elb.id}\"",
      "  timeouts {",
      "\tcreate = \"5m\"",
      "\tupdate = \"5m\"",
      "\tdelete = \"5m\"",
      "  }",
      "}",
      "",
      "resource \"opentelekomcloud_elb_backend\" \"backend\" {",
      "  address = \"192.168.0.211\"",
      "  listener_id = \"${opentelekomcloud_elb_listener.listener.id}\"",
      "  server_id = \"8f7a32f1-f66c-4d13-9b17-3a13f9f0bb8d\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-elb_health": {
    "description": "Defines elb_health",
    "prefix": "tf-opentelekomcloud-resource-elb_health",
    "body": [
      "resource \"opentelekomcloud_elb_loadbalancer\" \"elb\" {",
      "  name = \"elb\"",
      "  type = \"External\"",
      "  description = \"test elb\"",
      "  vpc_id = \"e346dc4a-d9a6-46f4-90df-10153626076e\"",
      "  admin_state_up = 1",
      "  bandwidth = 5",
      "}",
      "",
      "resource \"opentelekomcloud_elb_listener\" \"listener\" {",
      "  name = \"test-elb-listener\"",
      "  description = \"great listener\"",
      "  protocol = \"TCP\"",
      "  backend_protocol = \"TCP\"",
      "  protocol_port = 12345",
      "  backend_port = 8080",
      "  lb_algorithm = \"roundrobin\"",
      "  loadbalancer_id = \"${opentelekomcloud_elb_loadbalancer.elb.id}\"",
      "  timeouts {",
      "\tcreate = \"5m\"",
      "\tupdate = \"5m\"",
      "\tdelete = \"5m\"",
      "  }",
      "}",
      "",
      "resource \"opentelekomcloud_elb_health\" \"healthcheck\" {",
      "  listener_id = \"${opentelekomcloud_elb_listener.listener.id}\"",
      "  healthcheck_protocol = \"TCP\"",
      "  healthcheck_connect_porta = 22",
      "  healthy_threshold = 5",
      "  healthcheck_timeout = 25",
      "  healthcheck_interval = 3",
      "  timeouts {",
      "    create = \"5m\"",
      "    update = \"5m\"",
      "    delete = \"5m\"",
      "  }",
      "}"
    ]
  },
  "opentelekomcloud-resource-elb_listener": {
    "description": "Defines elb_listener",
    "prefix": "tf-opentelekomcloud-resource-elb_listener",
    "body": [
      "resource \"opentelekomcloud_elb_loadbalancer\" \"elb\" {",
      "  name = \"elb\"",
      "  type = \"External\"",
      "  description = \"test elb\"",
      "  vpc_id = \"e346dc4a-d9a6-46f4-90df-10153626076e\"",
      "  admin_state_up = 1",
      "  bandwidth = 5",
      "}",
      "",
      "resource \"opentelekomcloud_elb_listener\" \"listener\" {",
      "  name = \"test-elb-listener\"",
      "  description = \"great listener\"",
      "  protocol = \"TCP\"",
      "  backend_protocol = \"TCP\"",
      "  protocol_port = 12345",
      "  backend_port = 8080",
      "  lb_algorithm = \"roundrobin\"",
      "  loadbalancer_id = \"${opentelekomcloud_elb_loadbalancer.elb.id}\"",
      "  timeouts {",
      "\tcreate = \"5m\"",
      "\tupdate = \"5m\"",
      "\tdelete = \"5m\"",
      "  }",
      "}"
    ]
  },
  "opentelekomcloud-resource-elb_loadbalancer": {
    "description": "Defines elb_loadbalancer",
    "prefix": "tf-opentelekomcloud-resource-elb_loadbalancer",
    "body": [
      "resource \"opentelekomcloud_elb_loadbalancer\" \"elb\" {",
      "  name = \"elb\"",
      "  type = \"External\"",
      "  description = \"test elb\"",
      "  vpc_id = \"e346dc4a-d9a6-46f4-90df-10153626076e\"",
      "  admin_state_up = 1",
      "  bandwidth = 5",
      "}"
    ]
  },
  "opentelekomcloud-resource-fw_firewall_group_v2": {
    "description": "Defines fw_firewall_group_v2",
    "prefix": "tf-opentelekomcloud-resource-fw_firewall_group_v2",
    "body": [
      "resource \"opentelekomcloud_fw_rule_v2\" \"rule_1\" {",
      "  name             = \"my-rule-1\"",
      "  description      = \"drop TELNET traffic\"",
      "  action           = \"deny\"",
      "  protocol         = \"tcp\"",
      "  destination_port = \"23\"",
      "  enabled          = \"true\"",
      "}",
      "",
      "resource \"opentelekomcloud_fw_rule_v2\" \"rule_2\" {",
      "  name             = \"my-rule-2\"",
      "  description      = \"drop NTP traffic\"",
      "  action           = \"deny\"",
      "  protocol         = \"udp\"",
      "  destination_port = \"123\"",
      "  enabled          = \"false\"",
      "}",
      "",
      "resource \"opentelekomcloud_fw_policy_v2\" \"policy_1\" {",
      "  name = \"my-policy\"",
      "",
      "  rules = [\"${opentelekomcloud_fw_rule_v2.rule_1.id}\",",
      "    \"${opentelekomcloud_fw_rule_v2.rule_2.id}\",",
      "  ]",
      "}",
      "",
      "resource \"opentelekomcloud_fw_firewall_group_v2\" \"firewall_group_1\" {",
      "  name      = \"my-firewall-group\"",
      "  ingress_policy_id = \"${opentelekomcloud_fw_policy_v2.policy_1.id}\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-fw_policy_v2": {
    "description": "Defines fw_policy_v2",
    "prefix": "tf-opentelekomcloud-resource-fw_policy_v2",
    "body": [
      "resource \"opentelekomcloud_fw_rule_v2\" \"rule_1\" {",
      "  name             = \"my-rule-1\"",
      "  description      = \"drop TELNET traffic\"",
      "  action           = \"deny\"",
      "  protocol         = \"tcp\"",
      "  destination_port = \"23\"",
      "  enabled          = \"true\"",
      "}",
      "",
      "resource \"opentelekomcloud_fw_rule_v2\" \"rule_2\" {",
      "  name             = \"my-rule-2\"",
      "  description      = \"drop NTP traffic\"",
      "  action           = \"deny\"",
      "  protocol         = \"udp\"",
      "  destination_port = \"123\"",
      "  enabled          = \"false\"",
      "}",
      "",
      "resource \"opentelekomcloud_fw_policy_v2\" \"policy_1\" {",
      "  name = \"my-policy\"",
      "",
      "  rules = [\"${opentelekomcloud_fw_rule_v2.rule_1.id}\",",
      "    \"${opentelekomcloud_fw_rule_v2.rule_2.id}\",",
      "  ]",
      "}"
    ]
  },
  "opentelekomcloud-resource-fw_rule_v2": {
    "description": "Defines fw_rule_v2",
    "prefix": "tf-opentelekomcloud-resource-fw_rule_v2",
    "body": [
      "resource \"opentelekomcloud_fw_rule_v2\" \"rule_1\" {",
      "  name             = \"my_rule\"",
      "  description      = \"drop TELNET traffic\"",
      "  action           = \"deny\"",
      "  protocol         = \"tcp\"",
      "  destination_port = \"23\"",
      "  enabled          = \"true\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-images_image_v2": {
    "description": "Defines images_image_v2",
    "prefix": "tf-opentelekomcloud-resource-images_image_v2",
    "body": [
      "resource \"opentelekomcloud_images_image_v2\" \"rancheros\" {",
      "  name   = \"RancherOS\"",
      "  image_source_url = \"https://releases.rancher.com/os/latest/rancheros-openstack.img\"",
      "  container_format = \"bare\"",
      "  disk_format = \"qcow2\"",
      "  tags = [\"foo.bar\", \"tag.value\"]",
      "}"
    ]
  },
  "opentelekomcloud-resource-kms_key_v1": {
    "description": "Defines kms_key_v1",
    "prefix": "tf-opentelekomcloud-resource-kms_key_v1",
    "body": [
      "resource \"huaweicloud_kms_key_v1\" \"key_1\" {",
      "  key_alias       = \"key_1\"",
      "  pending_days    = \"7\"",
      "  key_description = \"first test key\"",
      "  realm           = \"cn-north-1\"",
      "  is_enabled      = true",
      "}"
    ]
  },
  "opentelekomcloud-resource-lb_listener_v2": {
    "description": "Defines lb_listener_v2",
    "prefix": "tf-opentelekomcloud-resource-lb_listener_v2",
    "body": [
      "resource \"opentelekomcloud_lb_listener_v2\" \"listener_1\" {",
      "  protocol        = \"HTTP\"",
      "  protocol_port   = 8080",
      "  loadbalancer_id = \"d9415786-5f1a-428b-b35f-2f1523e146d2\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-lb_loadbalancer_v2": {
    "description": "Defines lb_loadbalancer_v2",
    "prefix": "tf-opentelekomcloud-resource-lb_loadbalancer_v2",
    "body": [
      "resource \"opentelekomcloud_lb_loadbalancer_v2\" \"lb_1\" {",
      "  vip_subnet_id = \"d9415786-5f1a-428b-b35f-2f1523e146d2\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-lb_member_v2": {
    "description": "Defines lb_member_v2",
    "prefix": "tf-opentelekomcloud-resource-lb_member_v2",
    "body": [
      "resource \"opentelekomcloud_lb_member_v2\" \"member_1\" {",
      "  address       = \"192.168.199.23\"",
      "  protocol_port = 8080",
      "}"
    ]
  },
  "opentelekomcloud-resource-lb_monitor_v2": {
    "description": "Defines lb_monitor_v2",
    "prefix": "tf-opentelekomcloud-resource-lb_monitor_v2",
    "body": [
      "resource \"opentelekomcloud_lb_monitor_v2\" \"monitor_1\" {",
      "  pool_id     = \"${opentelekomcloud_lb_pool_v2.pool_1.id}\"",
      "  type        = \"PING\"",
      "  delay       = 20",
      "  timeout     = 10",
      "  max_retries = 5",
      "}"
    ]
  },
  "opentelekomcloud-resource-lb_pool_v2": {
    "description": "Defines lb_pool_v2",
    "prefix": "tf-opentelekomcloud-resource-lb_pool_v2",
    "body": [
      "resource \"opentelekomcloud_lb_pool_v2\" \"pool_1\" {",
      "  protocol    = \"HTTP\"",
      "  lb_method   = \"ROUND_ROBIN\"",
      "  listener_id = \"d9415786-5f1a-428b-b35f-2f1523e146d2\"",
      "",
      "  persistence {",
      "    type        = \"HTTP_COOKIE\"",
      "    cookie_name = \"testCookie\"",
      "  }",
      "}"
    ]
  },
  "opentelekomcloud-resource-networking_floatingip_v2": {
    "description": "Defines networking_floatingip_v2",
    "prefix": "tf-opentelekomcloud-resource-networking_floatingip_v2",
    "body": [
      "resource \"opentelekomcloud_networking_floatingip_v2\" \"floatip_1\" {",
      "  pool = \"public\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-networking_network_v2": {
    "description": "Defines networking_network_v2",
    "prefix": "tf-opentelekomcloud-resource-networking_network_v2",
    "body": [
      "resource \"opentelekomcloud_networking_network_v2\" \"network_1\" {",
      "  name           = \"network_1\"",
      "  admin_state_up = \"true\"",
      "}",
      "",
      "resource \"opentelekomcloud_networking_subnet_v2\" \"subnet_1\" {",
      "  name       = \"subnet_1\"",
      "  network_id = \"${opentelekomcloud_networking_network_v2.network_1.id}\"",
      "  cidr       = \"192.168.199.0/24\"",
      "  ip_version = 4",
      "}",
      "",
      "resource \"opentelekomcloud_compute_secgroup_v2\" \"secgroup_1\" {",
      "  name        = \"secgroup_1\"",
      "  description = \"a security group\"",
      "",
      "  rule {",
      "    from_port   = 22",
      "    to_port     = 22",
      "    ip_protocol = \"tcp\"",
      "    cidr        = \"0.0.0.0/0\"",
      "  }",
      "}",
      "",
      "resource \"opentelekomcloud_networking_port_v2\" \"port_1\" {",
      "  name               = \"port_1\"",
      "  network_id         = \"${opentelekomcloud_networking_network_v2.network_1.id}\"",
      "  admin_state_up     = \"true\"",
      "  security_group_ids = [\"${opentelekomcloud_compute_secgroup_v2.secgroup_1.id}\"]",
      "",
      "  fixed_ip {",
      "    \"subnet_id\"  = \"${opentelekomcloud_networking_subnet_v2.subnet_1.id}\"",
      "    \"ip_address\" = \"192.168.199.10\"",
      "  }",
      "}",
      "",
      "resource \"opentelekomcloud_compute_instance_v2\" \"instance_1\" {",
      "  name            = \"instance_1\"",
      "  security_groups = [\"${opentelekomcloud_compute_secgroup_v2.secgroup_1.name}\"]",
      "",
      "  network {",
      "    port = \"${opentelekomcloud_networking_port_v2.port_1.id}\"",
      "  }",
      "}"
    ]
  },
  "opentelekomcloud-resource-networking_port_v2": {
    "description": "Defines networking_port_v2",
    "prefix": "tf-opentelekomcloud-resource-networking_port_v2",
    "body": [
      "resource \"opentelekomcloud_networking_network_v2\" \"network_1\" {",
      "  name           = \"network_1\"",
      "  admin_state_up = \"true\"",
      "}",
      "",
      "resource \"opentelekomcloud_networking_port_v2\" \"port_1\" {",
      "  name           = \"port_1\"",
      "  network_id     = \"${opentelekomcloud_networking_network_v2.network_1.id}\"",
      "  admin_state_up = \"true\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-networking_router_interface_v2": {
    "description": "Defines networking_router_interface_v2",
    "prefix": "tf-opentelekomcloud-resource-networking_router_interface_v2",
    "body": [
      "resource \"opentelekomcloud_networking_network_v2\" \"network_1\" {",
      "  name           = \"tf_test_network\"",
      "  admin_state_up = \"true\"",
      "}",
      "",
      "resource \"opentelekomcloud_networking_subnet_v2\" \"subnet_1\" {",
      "  network_id = \"${opentelekomcloud_networking_network_v2.network_1.id}\"",
      "  cidr       = \"192.168.199.0/24\"",
      "  ip_version = 4",
      "}",
      "",
      "resource \"opentelekomcloud_networking_router_v2\" \"router_1\" {",
      "  name             = \"my_router\"",
      "  external_gateway = \"f67f0d72-0ddf-11e4-9d95-e1f29f417e2f\"",
      "}",
      "",
      "resource \"opentelekomcloud_networking_router_interface_v2\" \"router_interface_1\" {",
      "  router_id = \"${opentelekomcloud_networking_router_v2.router_1.id}\"",
      "  subnet_id = \"${opentelekomcloud_networking_subnet_v2.subnet_1.id}\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-networking_router_route_v2": {
    "description": "Defines networking_router_route_v2",
    "prefix": "tf-opentelekomcloud-resource-networking_router_route_v2",
    "body": [
      "resource \"opentelekomcloud_networking_router_v2\" \"router_1\" {",
      "  name           = \"router_1\"",
      "  admin_state_up = \"true\"",
      "}",
      "",
      "resource \"opentelekomcloud_networking_network_v2\" \"network_1\" {",
      "  name           = \"network_1\"",
      "  admin_state_up = \"true\"",
      "}",
      "",
      "resource \"opentelekomcloud_networking_subnet_v2\" \"subnet_1\" {",
      "  network_id = \"${opentelekomcloud_networking_network_v2.network_1.id}\"",
      "  cidr       = \"192.168.199.0/24\"",
      "  ip_version = 4",
      "}",
      "",
      "resource \"opentelekomcloud_networking_router_interface_v2\" \"int_1\" {",
      "  router_id = \"${opentelekomcloud_networking_router_v2.router_1.id}\"",
      "  subnet_id = \"${opentelekomcloud_networking_subnet_v2.subnet_1.id}\"",
      "}",
      "",
      "resource \"opentelekomcloud_networking_router_route_v2\" \"router_route_1\" {",
      "  depends_on       = [\"opentelekomcloud_networking_router_interface_v2.int_1\"]",
      "  router_id        = \"${opentelekomcloud_networking_router_v2.router_1.id}\"",
      "  destination_cidr = \"10.0.1.0/24\"",
      "  next_hop         = \"192.168.199.254\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-networking_router_v2": {
    "description": "Defines networking_router_v2",
    "prefix": "tf-opentelekomcloud-resource-networking_router_v2",
    "body": [
      "resource \"opentelekomcloud_networking_router_v2\" \"router_1\" {",
      "  name             = \"my_router\"",
      "  external_gateway = \"f67f0d72-0ddf-11e4-9d95-e1f29f417e2f\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-networking_secgroup_rule_v2": {
    "description": "Defines networking_secgroup_rule_v2",
    "prefix": "tf-opentelekomcloud-resource-networking_secgroup_rule_v2",
    "body": [
      "resource \"opentelekomcloud_networking_secgroup_v2\" \"secgroup_1\" {",
      "  name        = \"secgroup_1\"",
      "  description = \"My neutron security group\"",
      "}",
      "",
      "resource \"opentelekomcloud_networking_secgroup_rule_v2\" \"secgroup_rule_1\" {",
      "  direction         = \"ingress\"",
      "  ethertype         = \"IPv4\"",
      "  protocol          = \"tcp\"",
      "  port_range_min    = 22",
      "  port_range_max    = 22",
      "  remote_ip_prefix  = \"0.0.0.0/0\"",
      "  security_group_id = \"${opentelekomcloud_networking_secgroup_v2.secgroup_1.id}\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-networking_secgroup_v2": {
    "description": "Defines networking_secgroup_v2",
    "prefix": "tf-opentelekomcloud-resource-networking_secgroup_v2",
    "body": [
      "resource \"opentelekomcloud_networking_secgroup_v2\" \"secgroup_1\" {",
      "  name        = \"secgroup_1\"",
      "  description = \"My neutron security group\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-networking_subnet_v2": {
    "description": "Defines networking_subnet_v2",
    "prefix": "tf-opentelekomcloud-resource-networking_subnet_v2",
    "body": [
      "resource \"opentelekomcloud_networking_network_v2\" \"network_1\" {",
      "  name           = \"tf_test_network\"",
      "  admin_state_up = \"true\"",
      "}",
      "",
      "resource \"opentelekomcloud_networking_subnet_v2\" \"subnet_1\" {",
      "  network_id = \"${opentelekomcloud_networking_network_v2.network_1.id}\"",
      "  cidr       = \"192.168.199.0/24\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-rds_instance_v1": {
    "description": "Defines rds_instance_v1",
    "prefix": "tf-opentelekomcloud-resource-rds_instance_v1",
    "body": [
      "data \"opentelekomcloud_rds_flavors_v1\" \"flavor\" {",
      "    region = \"eu-de\"",
      "    datastore_name = \"PostgreSQL\"",
      "    datastore_version = \"9.5.5\"",
      "    speccode = \"rds.pg.s1.large\"",
      "}",
      "",
      "resource \"opentelekomcloud_compute_secgroup_v2\" \"secgrp_rds\" {",
      "  name        = \"secgrp-rds-instance\"",
      "  description = \"Rds Security Group\"",
      "}",
      "",
      "resource \"opentelekomcloud_rds_instance_v1\" \"instance\" {",
      "  name = \"rds-instance\"",
      "  datastore {",
      "    type = \"PostgreSQL\"",
      "    version = \"9.5.5\"",
      "  }",
      "  flavorref = \"${data.opentelekomcloud_rds_flavors_v1.flavor.id}\"",
      "  volume {",
      "    type = \"COMMON\"",
      "    size = 200",
      "  }",
      "  region = \"eu-de\"",
      "  availabilityzone = \"eu-de-01\"",
      "  vpc = \"c1095fe7-03df-4205-ad2d-6f4c181d436e\"",
      "  nics {",
      "    subnetid = \"b65f8d25-c533-47e2-8601-cfaa265a3e3e\"",
      "  }",
      "  securitygroup {",
      "    id = \"${opentelekomcloud_compute_secgroup_v2.secgrp_rds.id}\"",
      "  }",
      "  dbport = \"8635\"",
      "  backupstrategy = {",
      "    starttime = \"04:00:00\"",
      "    keepdays = 4",
      "  }",
      "  dbrtpd = \"Huangwei!120521\"",
      "  ha = {",
      "    enable = true",
      "    replicationmode = \"async\"",
      "  }",
      "  depends_on = [\"opentelekomcloud_compute_secgroup_v2.secgrp_rds\"]",
      "}"
    ]
  },
  "opentelekomcloud-resource-s3_bucket": {
    "description": "Defines s3_bucket",
    "prefix": "tf-opentelekomcloud-resource-s3_bucket",
    "body": [
      "resource \"opentelekomcloud_s3_bucket\" \"b\" {",
      "  bucket = \"my-tf-test-bucket\"",
      "  acl    = \"private\"",
      "",
      "  tags {",
      "    Name        = \"My bucket\"",
      "    Environment = \"Dev\"",
      "  }",
      "}"
    ]
  },
  "opentelekomcloud-resource-s3_bucket_object": {
    "description": "Defines s3_bucket_object",
    "prefix": "tf-opentelekomcloud-resource-s3_bucket_object",
    "body": [
      "resource \"opentelekomcloud_s3_bucket_object\" \"object\" {",
      "  bucket = \"your_bucket_name\"",
      "  key    = \"new_object_key\"",
      "  source = \"path/to/file\"",
      "  etag   = \"${md5(file(\"path/to/file\"))}\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-s3_bucket_policy": {
    "description": "Defines s3_bucket_policy",
    "prefix": "tf-opentelekomcloud-resource-s3_bucket_policy",
    "body": [
      "resource \"opentelekomcloud_s3_bucket\" \"b\" {",
      "  bucket = \"my_tf_test_bucket\"",
      "}",
      "",
      "resource \"opentelekomcloud_s3_bucket_policy\" \"b\" {",
      "  bucket = \"${opentelekomcloud_s3_bucket.b.id}\"",
      "  policy =<<POLICY",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Id\": \"MYBUCKETPOLICY\",",
      "  \"Statement\": [",
      "    {",
      "      \"Sid\": \"IPAllow\",",
      "      \"Effect\": \"Deny\",",
      "      \"Principal\": \"*\",",
      "      \"Action\": \"s3:*\",",
      "      \"Resource\": \"arn:aws:s3:::my_tf_test_bucket/*\",",
      "      \"Condition\": {",
      "         \"IpAddress\": {\"aws:SourceIp\": \"8.8.8.8/32\"}",
      "      } ",
      "    } ",
      "  ]",
      "}",
      "POLICY",
      "}"
    ]
  },
  "opentelekomcloud-resource-smn_subscription_v2": {
    "description": "Defines smn_subscription_v2",
    "prefix": "tf-opentelekomcloud-resource-smn_subscription_v2",
    "body": [
      "resource \"opentelekomcloud_smn_topic_v2\" \"topic_1\" {",
      "  name\t\t  = \"topic_1\"",
      "  display_name    = \"The display name of topic_1\"",
      "}",
      "",
      "resource \"opentelekomcloud_smn_subscription_v2\" \"subscription_1\" {",
      "  topic_urn       = \"${opentelekomcloud_smn_topic_v2.topic_1.id}\"",
      "  endpoint        = \"mailtest@gmail.com\"",
      "  protocol        = \"email\"",
      "  remark          = \"O&M\"",
      "}",
      "",
      "resource \"opentelekomcloud_smn_subscription_v2\" \"subscription_2\" {",
      "  topic_urn       = \"${opentelekomcloud_smn_topic_v2.topic_1.id}\"",
      "  endpoint        = \"13600000000\"",
      "  protocol        = \"sms\"",
      "  remark          = \"O&M\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-smn_topic_v2": {
    "description": "Defines smn_topic_v2",
    "prefix": "tf-opentelekomcloud-resource-smn_topic_v2",
    "body": [
      "resource \"opentelekomcloud_smn_topic_v2\" \"topic_1\" {",
      "  name\t\t  = \"topic_1\"",
      "  display_name    = \"The display name of topic_1\"",
      "}",
      "",
      "resource \"opentelekomcloud_smn_subscription_v2\" \"subscription_1\" {",
      "  topic_urn       = \"${opentelekomcloud_smn_topic_v2.topic_1.id}\"",
      "  endpoint        = \"mailtest@gmail.com\"",
      "  protocol        = \"email\"",
      "  remark          = \"O&M\"",
      "}",
      "",
      "resource \"opentelekomcloud_smn_subscription_v2\" \"subscription_2\" {",
      "  topic_urn       = \"${opentelekomcloud_smn_topic_v2.topic_1.id}\"",
      "  endpoint        = \"13600000000\"",
      "  protocol        = \"sms\"",
      "  remark          = \"O&M\"",
      "}"
    ]
  },
  "opentelekomcloud-resource-vpc_eip_v1": {
    "description": "Defines vpc_eip_v1",
    "prefix": "tf-opentelekomcloud-resource-vpc_eip_v1",
    "body": [
      "resource \"opentelekomcloud_vpc_eip_v1\" \"eip_1\" {",
      "  publicip {",
      "    type = \"5_bgp\"",
      "  }",
      "  bandwidth {",
      "    name = \"test\"",
      "    size = 8",
      "    share_type = \"PER\"",
      "    charge_mode = \"traffic\"",
      "  }",
      "}"
    ]
  },
  "opsgenie-data-user": {
    "description": "Defines user",
    "prefix": "tf-opsgenie-data-user",
    "body": [
      "data \"opsgenie_user\" \"cookie_monster\" {",
      "  username = \"me@cookie-monster.com\"",
      "}",
      "",
      "resource \"opsgenie_team\" \"test\" {",
      "  name = \"cookieeaters\"",
      "",
      "  member {",
      "    username = \"${data.opsgenie_user.cookie_monster.username}\"",
      "    role     = \"${data.opsgenie_user.cookie_monster.role}\"",
      "  }",
      "}"
    ]
  },
  "opsgenie-resource-team": {
    "description": "Defines team",
    "prefix": "tf-opsgenie-resource-team",
    "body": [
      "resource \"opsgenie_user\" \"first\" {",
      "  username  = \"user@domain.com\"",
      "  full_name = \"Cookie Monster\"",
      "  role      = \"User\"",
      "}",
      "",
      "resource \"opsgenie_user\" \"second\" {",
      "  username  = \"eggman@dr-robotnik.com\"",
      "  full_name = \"Dr Ivo Eggman Robotnik\"",
      "  role      = \"User\"",
      "}",
      "",
      "resource \"opsgenie_team\" \"test\" {",
      "  name        = \"example\"",
      "  description = \"This team deals with all the things\"",
      "",
      "  member {",
      "    username = \"${opsgenie_user.first.username}\"",
      "    role     = \"admin\"",
      "  }",
      "",
      "  member {",
      "    username = \"${opsgenie_user.second.username}\"",
      "    role     = \"user\"",
      "  }",
      "}"
    ]
  },
  "opsgenie-resource-user": {
    "description": "Defines user",
    "prefix": "tf-opsgenie-resource-user",
    "body": [
      "resource \"opsgenie_user\" \"test\" {",
      "  username  = \"user@domain.com\"",
      "  full_name = \"Cookie Monster\"",
      "  role      = \"User\"",
      "  locale    = \"en_US\"",
      "  timezone  = \"America/New_York\"",
      "}"
    ]
  },
  "oraclepaas-data-oraclepaas_database_service_instance": {
    "description": "Defines oraclepaas_database_service_instance",
    "prefix": "tf-oraclepaas-data-oraclepaas_database_service_instance",
    "body": [
      "data \"oraclepaas_database_service_instance\" \"foo\" {",
      "  name = \"database-service-instance-1\"",
      "}",
      "",
      "output \"region\" {",
      "  value = \"${data.oraclepaas_database_service_instance.foo.region}\"",
      "}"
    ]
  },
  "oraclepaas-resource-oraclepaas_database_access_rule": {
    "description": "Defines oraclepaas_database_access_rule",
    "prefix": "tf-oraclepaas-resource-oraclepaas_database_access_rule",
    "body": [
      "resource \"oraclepaas_database_service_instance\" \"default\" {",
      "  name = \"database-service-instance-1\"",
      "  ...",
      "}",
      "",
      "resource \"oraclepaas_database_access_rule\" \"default\" {",
      "\tname                = \"example-access-rule\"",
      "\tservice_instance_id = \"${oraclepaas_database_service_instance.default.name}\"",
      "\tdescription         = \"enable port 8000\"",
      "\tports               = \"8000\"",
      "\tsource              = \"PUBLIC-INTERNET\"",
      "}"
    ]
  },
  "oraclepaas-resource-oraclepaas_database_service_instance": {
    "description": "Defines oraclepaas_database_service_instance",
    "prefix": "tf-oraclepaas-resource-oraclepaas_database_service_instance",
    "body": [
      "resource \"oraclepaas_database_service_instance\" \"default\" {",
      "  name        = \"database-service-instance\"",
      "  description = \"This is a description for an service instance\"",
      "",
      "  edition           = \"EE\"",
      "  shape             = \"oc1m\"",
      "  subscription_type = \"HOURLY\"",
      "  version           = \"12.2.0.1\"",
      "  vm_public_key     = \"An ssh public key\"",
      "",
      "  database_configuration {",
      "      admin_password     = \"Pa55_Word\"",
      "      sid                = \"BOTH\"",
      "      backup_destination = \"NONE\"",
      "      usable_storage     = 15",
      "  }",
      "",
      "  backups {",
      "      cloud_storage_container = \"Storage-${var.domain}/database-service-instance-backup\"",
      "      auto_generate = true",
      "  }",
      "}"
    ]
  },
  "oraclepaas-resource-oraclepaas_java_access_rule": {
    "description": "Defines oraclepaas_java_access_rule",
    "prefix": "tf-oraclepaas-resource-oraclepaas_java_access_rule",
    "body": [
      "resource \"oraclepaas_java_service_instance\" \"default\" {",
      "  name        = \"java-service-instance-1\"",
      "  ...",
      "}",
      "",
      "resource \"oraclepaas_java_access_rule\" \"default\" {",
      "\tname                = \"example-access-rule\"",
      "\tservice_instance_id = \"${oraclepaas_java_service_instance.default.name}\"",
      "\tdescription         = \"enable port 8000\"",
      "\tports               = \"8000\"",
      "\tsource              = \"PUBLIC-INTERNET\"",
      "}"
    ]
  },
  "oraclepaas-resource-oraclepaas_java_service_instance": {
    "description": "Defines oraclepaas_java_service_instance",
    "prefix": "tf-oraclepaas-resource-oraclepaas_java_service_instance",
    "body": [
      "resource \"oraclepaas_database_service_instance\" \"default\" {",
      "  ...",
      "}",
      "",
      "resource \"oraclepaas_java_service_instance\" \"default\" {",
      "  name            = \"java-service-instance\"",
      "  edition         = \"EE\"",
      "  service_version = \"12cRelease212\"",
      "  ssh_public_key  = \"ssh-rsa public_key\"",
      "",
      "  weblogic_server {",
      "    shape = \"oc3\"",
      "    database {",
      "      name     = \"${oraclepaas_database_service_instance.test.name}\"",
      "      username = \"sys\"",
      "      password = \"Pa55_word\"",
      "    }",
      "    admin {",
      "      username = \"weblogic\"",
      "      password = \"Weblogic_1\"",
      "    }",
      "  }",
      "",
      "  backups {",
      "    cloud_storage_container = \"Storage-${var.domain}/java-service-instance-backup\"",
      "    auto_generate = true",
      "  }",
      "}"
    ]
  },
  "ovh-data-publiccloud_region": {
    "description": "Defines publiccloud_region",
    "prefix": "tf-ovh-data-publiccloud_region",
    "body": [
      "data \"ovh_publiccloud_region\" \"GRA1\" {",
      "   project_id = \"XXXXXX\"",
      "   region = \"GRA1\"",
      "}"
    ]
  },
  "ovh-data-publiccloud_regions": {
    "description": "Defines publiccloud_regions",
    "prefix": "tf-ovh-data-publiccloud_regions",
    "body": [
      "data \"ovh_publiccloud_regions\" \"regions\" {",
      "  project_id = \"XXXXXX\"",
      "}"
    ]
  },
  "ovh-resource-ovh_domain_zone_record": {
    "description": "Defines ovh_domain_zone_record",
    "prefix": "tf-ovh-resource-ovh_domain_zone_record",
    "body": [
      "# Add a record to a sub-domain",
      "resource \"ovh_domain_zone_record\" \"test\" {",
      "    zone = \"testdemo.ovh\"",
      "    subdomain = \"test\"",
      "    fieldtype = \"A\"",
      "    ttl = \"3600\"",
      "    target = \"0.0.0.0\"",
      "}"
    ]
  },
  "ovh-resource-publiccloud_private_network": {
    "description": "Defines publiccloud_private_network",
    "prefix": "tf-ovh-resource-publiccloud_private_network",
    "body": [
      "resource \"ovh_publiccloud_private_network\" \"net\" {",
      "   project_id = \"67890\"",
      "   name       = \"admin_network\"",
      "   regions    = [\"GRA1\", \"BHS1\"]",
      "}"
    ]
  },
  "ovh-resource-publiccloud_private_network_subnet": {
    "description": "Defines publiccloud_private_network_subnet",
    "prefix": "tf-ovh-resource-publiccloud_private_network_subnet",
    "body": [
      "resource \"ovh_publiccloud_private_network_subnet\" \"subnet\" {",
      "   project_id = \"67890\"",
      "   network_id = \"0234543\"",
      "   region     = \"GRA1\"",
      "   start      = \"192.168.168.100\"",
      "   end        = \"192.168.168.200\"",
      "   network    = \"192.168.168.0/24\"",
      "   dhcp       = true",
      "   no_gateway = false",
      "}"
    ]
  },
  "ovh-resource-publiccloud_user": {
    "description": "Defines publiccloud_user",
    "prefix": "tf-ovh-resource-publiccloud_user",
    "body": [
      "resource \"ovh_publiccloud_user\" \"user1\" {",
      "   project_id = \"67890\"",
      "}"
    ]
  },
  "ovh-resource-vrack_publiccloud_attachment": {
    "description": "Defines vrack_publiccloud_attachment",
    "prefix": "tf-ovh-resource-vrack_publiccloud_attachment",
    "body": [
      "resource \"ovh_vrack_publiccloud_attachment\" \"attach\" {",
      "  vrack_id   = \"12345\"",
      "  project_id = \"67890\"",
      "}"
    ]
  },
  "packet-data-precreated_ip_block": {
    "description": "Defines precreated_ip_block",
    "prefix": "tf-packet-data-precreated_ip_block",
    "body": [
      "",
      "# Create project, device in it, and then assign /64 subnet from precreated block",
      "# to the new device",
      "",
      "resource \"packet_project\" \"test\" {",
      "    name = \"testpro\"",
      "}",
      "",
      "",
      "resource \"packet_device\" \"web1\" {",
      "  hostname         = \"tftest\"",
      "  plan             = \"baremetal_0\"",
      "  facility         = \"ewr1\"",
      "  operating_system = \"ubuntu_16_04\"",
      "  billing_cycle    = \"hourly\"",
      "  project_id       = \"${packet_project.test.id}\"",
      "}",
      "",
      "# we have to make the datasource depend on the device. Here I do it implicitly",
      "# with the project_id param, because an explicity \"depends_on\" attribute in",
      "# a datasource taints the state:",
      "# https://github.com/hashicorp/terraform/issues/11806",
      "data \"packet_precreated_ip_block\" \"test\" {",
      "    facility         = \"ewr1\"",
      "    project_id       = \"${packet_device.test.project_id}\"",
      "    address_family   = 6",
      "    public           = true",
      "}",
      "",
      "# The precreated IPv6 blocks are /56, so to get /64, we specify 8 more bits for network.",
      "# The cirdsubnet interpolation will pick second /64 subnet from the precreated block.",
      "",
      "resource \"packet_ip_attachment\" \"from_ipv6_block\" {",
      "    device_id = \"${packet_device.web1.id}\"",
      "    cidr_notation = \"${cidrsubnet(data.packet_precreated_ip_block.test.cidr_notation,8,2)}\"",
      "}",
      ""
    ]
  },
  "packet-resource-device": {
    "description": "Defines device",
    "prefix": "tf-packet-resource-device",
    "body": [
      "# Create a device and add it to cool_project",
      "resource \"packet_device\" \"web1\" {",
      "  hostname         = \"tf.coreos2\"",
      "  plan             = \"baremetal_1\"",
      "  facility         = \"ewr1\"",
      "  operating_system = \"coreos_stable\"",
      "  billing_cycle    = \"hourly\"",
      "  project_id       = \"${packet_project.cool_project.id}\"",
      "}"
    ]
  },
  "packet-resource-ip_attachment": {
    "description": "Defines ip_attachment",
    "prefix": "tf-packet-resource-ip_attachment",
    "body": [
      "",
      "# Reserve /30 block of max 2 public IPv4 addresses in Parsippany, NJ (ewr1) for myproject",
      "resource \"packet_reserved_ip_block\" \"myblock\" {",
      "    project_id = \"${packet_project.myproject.id}\"",
      "    facility = \"ewr1\"",
      "\tquantity = 2",
      "}",
      "",
      "# Assign /32 subnet (single address) from reserved block to a device",
      "resource \"packet_ip_attachment\" \"first_address_assingment\" {",
      "    device_id = \"${packet_device.mydevice.id}\"",
      "    # following interpolation will result to sth like \"147.229.10.152/32\"",
      "    cidr_notation = \"${cidrhost(packet_reserved_ip_block.myblock.cidr_notation,0)}/32\"",
      "}",
      ""
    ]
  },
  "packet-resource-organization": {
    "description": "Defines organization",
    "prefix": "tf-packet-resource-organization",
    "body": [
      "# Create a new Project",
      "resource \"packet_organization\" \"tf_organization_1\" {",
      "  name = \"foobar\"",
      "  description = \"quux\"",
      "}"
    ]
  },
  "packet-resource-project": {
    "description": "Defines project",
    "prefix": "tf-packet-resource-project",
    "body": [
      "# Create a new Project",
      "resource \"packet_project\" \"tf_project_1\" {",
      "  name           = \"Terraform Fun\"",
      "}"
    ]
  },
  "packet-resource-reserved_ip_block": {
    "description": "Defines reserved_ip_block",
    "prefix": "tf-packet-resource-reserved_ip_block",
    "body": [
      "# Allocate /30 block of max 2 public IPv4 addresses in Parsippany, NJ (ewr1) for myproject",
      "",
      "resource \"packet_reserved_ip_block\" \"two_elastic_addresses\" {",
      "    project_id = \"${packet_project.myproject.id}\"",
      "    facility = \"ewr1\"",
      "    quantity = 2",
      "}"
    ]
  },
  "packet-resource-ssh_key": {
    "description": "Defines ssh_key",
    "prefix": "tf-packet-resource-ssh_key",
    "body": [
      "# Create a new SSH key",
      "resource \"packet_ssh_key\" \"key1\" {",
      "  name       = \"terraform-1\"",
      "  public_key = \"${file(\"/home/terraform/.ssh/id_rsa.pub\")}\"",
      "}"
    ]
  },
  "packet-resource-volume": {
    "description": "Defines volume",
    "prefix": "tf-packet-resource-volume",
    "body": [
      "# Create a new block volume",
      "resource \"packet_volume\" \"volume1\" {",
      "  description   = \"terraform-volume-1\"",
      "  facility      = \"ewr1\"",
      "  project_id    = \"${packet_project.cool_project.id}\"",
      "  plan          = \"storage_1\"",
      "  size          = 100",
      "  billing_cycle = \"hourly\"",
      "",
      "  snapshot_policies = {",
      "    snapshot_frequency = \"1day\"",
      "",
      "    snapshot_count = 7",
      "  }",
      "",
      "  snapshot_policies = {",
      "    snapshot_frequency = \"1month\"",
      "",
      "    snapshot_count = 6",
      "  }",
      "}"
    ]
  },
  "packet-resource-volume_attachment": {
    "description": "Defines volume_attachment",
    "prefix": "tf-packet-resource-volume_attachment",
    "body": [
      "  resource \"packet_project\" \"test_project\" {",
      "      name = \"test-project\"",
      "  }",
      "",
      "  resource \"packet_device\" \"test_device_va\" {",
      "      hostname         = \"terraform-test-device-va\"",
      "      plan             = \"baremetal_0\"",
      "      facility         = \"ewr1\"",
      "      operating_system = \"ubuntu_16_04\"",
      "      billing_cycle    = \"hourly\"",
      "      project_id       = \"${packet_project.test_project.id}\"",
      "  }",
      "",
      "  resource \"packet_volume\" \"test_volume_va\" {",
      "      plan = \"storage_1\"",
      "      billing_cycle = \"hourly\"",
      "      size = 100",
      "      project_id = \"${packet_project.test_project.id}\"",
      "      facility = \"ewr1\"",
      "      snapshot_policies = { snapshot_frequency = \"1day\", snapshot_count = 7 }",
      "  }",
      "",
      "  resource \"packet_volume_attachment\" \"test_volume_attachment\" {",
      "      device_id = \"${packet_device.test_device_va.id}\"",
      "      volume_id = \"${packet_volume.test_volume_va.id}\"",
      "  }"
    ]
  },
  "pagerduty-data-escalation_policy": {
    "description": "Defines escalation_policy",
    "prefix": "tf-pagerduty-data-escalation_policy",
    "body": [
      "data \"pagerduty_escalation_policy\" \"test\" {",
      "  name = \"Engineering Escalation Policy\"",
      "}",
      "",
      "resource \"pagerduty_service\" \"test\" {",
      "  name                    = \"My Web App\"",
      "  auto_resolve_timeout    = 14400",
      "  acknowledgement_timeout = 600",
      "  escalation_policy       = \"${data.pagerduty_escalation_policy.test.id}\"",
      "}"
    ]
  },
  "pagerduty-data-extension_schema": {
    "description": "Defines extension_schema",
    "prefix": "tf-pagerduty-data-extension_schema",
    "body": [
      "data \"pagerduty_extension_schema\" \"webhook\" {",
      "  name = \"Generic V2 Webhook\"",
      "}",
      "",
      "resource \"pagerduty_user\" \"example\" {",
      "  name  = \"Howard James\"",
      "  email = \"howard.james@example.domain\"",
      "  teams = [\"${pagerduty_team.example.id}\"]",
      "}",
      "",
      "resource \"pagerduty_escalation_policy\" \"foo\" {",
      "  name      = \"Engineering Escalation Policy\"",
      "  num_loops = 2",
      "",
      "  rule {",
      "    escalation_delay_in_minutes = 10",
      "",
      "    target {",
      "      type = \"user\"",
      "      id   = \"${pagerduty_user.example.id}\"",
      "    }",
      "  }",
      "}",
      "",
      "resource \"pagerduty_service\" \"example\" {",
      "  name                    = \"My Web App\"",
      "  auto_resolve_timeout    = 14400",
      "  acknowledgement_timeout = 600",
      "  escalation_policy       = \"${pagerduty_escalation_policy.example.id}\"",
      "}",
      "",
      "",
      "resource \"pagerduty_extension\" \"slack\"{",
      "  name = \"My Web App Extension\"",
      "  endpoint_url = \"https://generic_webhook_url/XXXXXX/BBBBBB\"",
      "  extension_schema = \"${data.pagerduty_extension_schema.webhook.id}\"",
      "  extension_objects    = [\"${pagerduty_service.example.id}\"]",
      "}"
    ]
  },
  "pagerduty-data-schedule": {
    "description": "Defines schedule",
    "prefix": "tf-pagerduty-data-schedule",
    "body": [
      "data \"pagerduty_schedule\" \"test\" {",
      "  name = \"Daily Engineering Rotation\"",
      "}",
      "",
      "resource \"pagerduty_escalation_policy\" \"foo\" {",
      "  name      = \"Engineering Escalation Policy\"",
      "  num_loops = 2",
      "",
      "  rule {",
      "    escalation_delay_in_minutes = 10",
      "",
      "    target {",
      "      type = \"schedule\"",
      "      id   = \"${data.pagerduty_schedule.test.id}\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "pagerduty-data-team": {
    "description": "Defines team",
    "prefix": "tf-pagerduty-data-team",
    "body": [
      "data \"pagerduty_user\" \"me\" {",
      "  email = \"me@example.com\"",
      "}",
      "",
      "data \"pagerduty_team\" \"devops\" {",
      "  name = \"devops\"",
      "}",
      "",
      "resource \"pagerduty_escalation_policy\" \"foo\" {",
      "  name      = \"DevOps Escalation Policy\"",
      "  num_loops = 2",
      "",
      "  teams = [\"${data.pagerduty_team.devops}\"]",
      "",
      "  rule {",
      "    escalation_delay_in_minutes = 10",
      "",
      "    target {",
      "      type = \"user\"",
      "      id   = \"${data.pagerduty_user.me.id}\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "pagerduty-data-user": {
    "description": "Defines user",
    "prefix": "tf-pagerduty-data-user",
    "body": [
      "data \"pagerduty_user\" \"me\" {",
      "  email = \"me@example.com\"",
      "}",
      "",
      "resource \"pagerduty_escalation_policy\" \"foo\" {",
      "  name      = \"Engineering Escalation Policy\"",
      "  num_loops = 2",
      "",
      "  rule {",
      "    escalation_delay_in_minutes = 10",
      "",
      "    target {",
      "      type = \"user\"",
      "      id   = \"${data.pagerduty_user.me.id}\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "pagerduty-data-vendor": {
    "description": "Defines vendor",
    "prefix": "tf-pagerduty-data-vendor",
    "body": [
      "data \"pagerduty_vendor\" \"datadog\" {",
      "  name = \"Datadog\"",
      "}",
      "",
      "resource \"pagerduty_user\" \"example\" {",
      "  name  = \"Earline Greenholt\"",
      "  email = \"125.greenholt.earline@graham.name\"",
      "  teams = [\"${pagerduty_team.example.id}\"]",
      "}",
      "",
      "resource \"pagerduty_escalation_policy\" \"foo\" {",
      "  name      = \"Engineering Escalation Policy\"",
      "  num_loops = 2",
      "",
      "  rule {",
      "    escalation_delay_in_minutes = 10",
      "",
      "    target {",
      "      type = \"user\"",
      "      id   = \"${pagerduty_user.example.id}\"",
      "    }",
      "  }",
      "}",
      "",
      "resource \"pagerduty_service\" \"example\" {",
      "  name                    = \"My Web App\"",
      "  auto_resolve_timeout    = 14400",
      "  acknowledgement_timeout = 600",
      "  escalation_policy       = \"${pagerduty_escalation_policy.example.id}\"",
      "}",
      "",
      "resource \"pagerduty_service_integration\" \"example\" {",
      "  name    = \"Datadog Integration\"",
      "  vendor  = \"${data.pagerduty_vendor.datadog.id}\"",
      "  service = \"${pagerduty_service.example.id}\"",
      "  type    = \"generic_events_api_inbound_integration\"",
      "}"
    ]
  },
  "pagerduty-resource-addon": {
    "description": "Defines addon",
    "prefix": "tf-pagerduty-resource-addon",
    "body": [
      "resource \"pagerduty_addon\" \"example\" {",
      "  name = \"Internal Status Page\"",
      "  src  = \"https://intranet.example.com/status\"",
      "}"
    ]
  },
  "pagerduty-resource-escalation_policy": {
    "description": "Defines escalation_policy",
    "prefix": "tf-pagerduty-resource-escalation_policy",
    "body": [
      "resource \"pagerduty_team\" \"example\" {",
      "  name        = \"Engineering\"",
      "  description = \"All engineering\"",
      "}",
      "",
      "resource \"pagerduty_user\" \"example\" {",
      "  name  = \"Earline Greenholt\"",
      "  email = \"125.greenholt.earline@graham.name\"",
      "  teams = [\"${pagerduty_team.example.id}\"]",
      "}",
      "",
      "resource \"pagerduty_escalation_policy\" \"example\" {",
      "  name      = \"Engineering Escalation Policy\"",
      "  num_loops = 2",
      "  teams     = [\"${pagerduty_team.example.id}\"]",
      "",
      "  rule {",
      "    escalation_delay_in_minutes = 10",
      "",
      "    target {",
      "      type = \"user\"",
      "      id   = \"${pagerduty_user.example.id}\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "pagerduty-resource-extension": {
    "description": "Defines extension",
    "prefix": "tf-pagerduty-resource-extension",
    "body": [
      "data \"pagerduty_extension_schema\" \"webhook\" {",
      "  name = \"Generic V2 Webhook\"",
      "}",
      "",
      "resource \"pagerduty_user\" \"example\" {",
      "  name  = \"Howard James\"",
      "  email = \"howard.james@example.domain\"",
      "  teams = [\"${pagerduty_team.example.id}\"]",
      "}",
      "",
      "resource \"pagerduty_escalation_policy\" \"foo\" {",
      "  name      = \"Engineering Escalation Policy\"",
      "  num_loops = 2",
      "",
      "  rule {",
      "    escalation_delay_in_minutes = 10",
      "",
      "    target {",
      "      type = \"user\"",
      "      id   = \"${pagerduty_user.example.id}\"",
      "    }",
      "  }",
      "}",
      "",
      "resource \"pagerduty_service\" \"example\" {",
      "  name                    = \"My Web App\"",
      "  auto_resolve_timeout    = 14400",
      "  acknowledgement_timeout = 600",
      "  escalation_policy       = \"${pagerduty_escalation_policy.example.id}\"",
      "}",
      "",
      "",
      "resource \"pagerduty_extension\" \"slack\"{",
      "  name = \"My Web App Extension\"",
      "  endpoint_url = \"https://generic_webhook_url/XXXXXX/BBBBBB\"",
      "  extension_schema = \"${data.pagerduty_extension_schema.webhook.id}\"",
      "  extension_objects    = [\"${pagerduty_service.example.id}\"]",
      "}"
    ]
  },
  "pagerduty-resource-maintenance_window": {
    "description": "Defines maintenance_window",
    "prefix": "tf-pagerduty-resource-maintenance_window",
    "body": [
      "resource \"pagerduty_maintenance_window\" \"example\" {",
      "  start_time  = \"2015-11-09T20:00:00-05:00\"",
      "  end_time    = \"2015-11-09T22:00:00-05:00\"",
      "  services    = [\"${pagerduty_service.example.id}\"]",
      "}"
    ]
  },
  "pagerduty-resource-schedule": {
    "description": "Defines schedule",
    "prefix": "tf-pagerduty-resource-schedule",
    "body": [
      "resource \"pagerduty_user\" \"example\" {",
      "  name  = \"Earline Greenholt\"",
      "  email = \"125.greenholt.earline@graham.name\"",
      "  teams = [\"${pagerduty_team.example.id}\"]",
      "}",
      "",
      "resource \"pagerduty_schedule\" \"foo\" {",
      "  name      = \"Daily Engineering Rotation\"",
      "  time_zone = \"America/New_York\"",
      "",
      "  layer {",
      "    name                         = \"Night Shift\"",
      "    start                        = \"2015-11-06T20:00:00-05:00\"",
      "    rotation_virtual_start       = \"2015-11-06T20:00:00-05:00\"",
      "    rotation_turn_length_seconds = 86400",
      "    users                        = [\"${pagerduty_user.foo.id}\"]",
      "",
      "    restriction {",
      "      type              = \"daily_restriction\"",
      "      start_time_of_day = \"08:00:00\"",
      "      duration_seconds  = 32400",
      "    }",
      "  }",
      "}"
    ]
  },
  "pagerduty-resource-service": {
    "description": "Defines service",
    "prefix": "tf-pagerduty-resource-service",
    "body": [
      "resource \"pagerduty_user\" \"example\" {",
      "  name  = \"Earline Greenholt\"",
      "  email = \"125.greenholt.earline@graham.name\"",
      "  teams = [\"${pagerduty_team.example.id}\"]",
      "}",
      "",
      "resource \"pagerduty_escalation_policy\" \"foo\" {",
      "  name      = \"Engineering Escalation Policy\"",
      "  num_loops = 2",
      "",
      "  rule {",
      "    escalation_delay_in_minutes = 10",
      "",
      "    target {",
      "      type = \"user\"",
      "      id   = \"${pagerduty_user.example.id}\"",
      "    }",
      "  }",
      "}",
      "",
      "resource \"pagerduty_service\" \"example\" {",
      "  name                    = \"My Web App\"",
      "  auto_resolve_timeout    = 14400",
      "  acknowledgement_timeout = 600",
      "  escalation_policy       = \"${pagerduty_escalation_policy.example.id}\"",
      "  alert_creation          = \"create_incidents\"",
      "}"
    ]
  },
  "pagerduty-resource-service_integration": {
    "description": "Defines service_integration",
    "prefix": "tf-pagerduty-resource-service_integration",
    "body": [
      "resource \"pagerduty_user\" \"example\" {",
      "  name  = \"Earline Greenholt\"",
      "  email = \"125.greenholt.earline@graham.name\"",
      "  teams = [\"${pagerduty_team.example.id}\"]",
      "}",
      "",
      "resource \"pagerduty_escalation_policy\" \"foo\" {",
      "  name      = \"Engineering Escalation Policy\"",
      "  num_loops = 2",
      "",
      "  rule {",
      "    escalation_delay_in_minutes = 10",
      "",
      "    target {",
      "      type = \"user\"",
      "      id   = \"${pagerduty_user.example.id}\"",
      "    }",
      "  }",
      "}",
      "",
      "resource \"pagerduty_service\" \"example\" {",
      "  name                    = \"My Web App\"",
      "  auto_resolve_timeout    = 14400",
      "  acknowledgement_timeout = 600",
      "  escalation_policy       = \"${pagerduty_escalation_policy.example.id}\"",
      "}",
      "",
      "resource \"pagerduty_service_integration\" \"example\" {",
      "  name    = \"Generic API Service Integration\"",
      "  type    = \"generic_events_api_inbound_integration\"",
      "  service = \"${pagerduty_service.example.id}\"",
      "}",
      "",
      "data \"pagerduty_vendor\" \"datadog\" {",
      "  name = \"Datadog\"",
      "}",
      "",
      "resource \"pagerduty_service_integration\" \"datadog\" {",
      "  name    = \"${data.pagerduty_vendor.datadog.name}\"",
      "  service = \"${pagerduty_service.example.id}\"",
      "  vendor  = \"${data.pagerduty_vendor.datadog.id}\"",
      "}",
      "",
      "data \"pagerduty_vendor\" \"cloudwatch\" {",
      "  name = \"Cloudwatch\"",
      "}",
      "",
      "resource \"pagerduty_service_integration\" \"cloudwatch\" {",
      "  name    = \"${data.pagerduty_vendor.cloudwatch.name}\"",
      "  service = \"${pagerduty_service.example.id}\"",
      "  vendor  = \"${data.pagerduty_vendor.cloudwatch.id}\"",
      "}"
    ]
  },
  "pagerduty-resource-team": {
    "description": "Defines team",
    "prefix": "tf-pagerduty-resource-team",
    "body": [
      "resource \"pagerduty_team\" \"example\" {",
      "  name        = \"Engineering\"",
      "  description = \"All engineering\"",
      "}"
    ]
  },
  "pagerduty-resource-team_membership": {
    "description": "Defines team_membership",
    "prefix": "tf-pagerduty-resource-team_membership",
    "body": [
      "resource \"pagerduty_user\" \"foo\" {",
      "  name = \"foo\"",
      "  email = \"foo@bar.com\"",
      "}",
      "",
      "resource \"pagerduty_team\" \"foo\" {",
      "  name        = \"foo\"",
      "  description = \"foo\"",
      "}",
      "",
      "resource \"pagerduty_team_membership\" \"foo\" {",
      "  user_id = \"${pagerduty_user.foo.id}\"",
      "  team_id = \"${pagerduty_team.foo.id}\"",
      "}"
    ]
  },
  "pagerduty-resource-user": {
    "description": "Defines user",
    "prefix": "tf-pagerduty-resource-user",
    "body": [
      "resource \"pagerduty_team\" \"example\" {",
      "  name        = \"Engineering\"",
      "  description = \"All engineering\"",
      "}",
      "",
      "resource \"pagerduty_user\" \"example\" {",
      "  name  = \"Earline Greenholt\"",
      "  email = \"125.greenholt.earline@graham.name\"",
      "  teams = [\"${pagerduty_team.example.id}\"]",
      "}"
    ]
  },
  "pagerduty-resource-user_contact_method": {
    "description": "Defines user_contact_method",
    "prefix": "tf-pagerduty-resource-user_contact_method",
    "body": [
      "resource \"pagerduty_user\" \"example\" {",
      "  name  = \"Earline Greenholt\"",
      "  email = \"125.greenholt.earline@graham.name\"",
      "  teams = [\"${pagerduty_team.example.id}\"]",
      "}",
      "",
      "resource \"pagerduty_user_contact_method\" \"email\" {",
      "  user_id = \"${pagerduty_user.example.id}\"",
      "  type    = \"email_contact_method\"",
      "  address = \"foo@bar.com\"",
      "  label   = \"Work\"",
      "}",
      "",
      "resource \"pagerduty_user_contact_method\" \"phone\" {",
      "  user_id      = \"${pagerduty_user.example.id}\"",
      "  type         = \"phone_contact_method\"",
      "  country_code = \"+1\"",
      "  address      = \"2025550199\"",
      "  label        = \"Work\"",
      "}",
      "",
      "resource \"pagerduty_user_contact_method\" \"sms\" {",
      "  user_id      = \"${pagerduty_user.example.id}\"",
      "  type         = \"sms_contact_method\"",
      "  country_code = \"+1\"",
      "  address      = \"2025550199\"",
      "  label        = \"Work\"",
      "}"
    ]
  },
  "panos-data-system_info": {
    "description": "Defines system_info",
    "prefix": "tf-panos-data-system_info",
    "body": [
      "data \"panos_system_info\" \"example\" {}"
    ]
  },
  "panos-resource-address_group": {
    "description": "Defines address_group",
    "prefix": "tf-panos-resource-address_group",
    "body": [
      "# Static group",
      "resource \"panos_address_group\" \"example1\" {",
      "    name = \"static ntp grp\"",
      "    description = \"My NTP servers\"",
      "    static_addresses = [\"ntp1\", \"ntp2\", \"ntp3\"]",
      "}",
      "",
      "# Dynamic group",
      "resource \"panos_address_group\" \"example2\" {",
      "    name = \"dynamic grp\"",
      "    description = \"My internal NTP servers\"",
      "    dynamic_match = \"'internal' and 'ntp'\"",
      "}"
    ]
  },
  "panos-resource-address_object": {
    "description": "Defines address_object",
    "prefix": "tf-panos-resource-address_object",
    "body": [
      "resource \"panos_address_object\" \"example\" {",
      "    name = \"localnet\"",
      "    value = \"192.168.80.0/24\"",
      "    description = \"The 192.168.80 network\"",
      "    tags = [\"internal\", \"dmz\"]",
      "}"
    ]
  },
  "panos-resource-administrative_tag": {
    "description": "Defines administrative_tag",
    "prefix": "tf-panos-resource-administrative_tag",
    "body": [
      "resource \"panos_administrative_tag\" \"example\" {",
      "    name = \"tag1\"",
      "    vsys = \"vsys2\"",
      "    color = \"color5\"",
      "    comment = \"Internal resources\"",
      "}"
    ]
  },
  "panos-resource-dag_tags": {
    "description": "Defines dag_tags",
    "prefix": "tf-panos-resource-dag_tags",
    "body": [
      "resource \"panos_dag_tags\" \"example\" {",
      "    vsys = \"vsys1\"",
      "    register {",
      "        ip = \"10.1.1.1\"",
      "        tags = [\"tag1\", \"tag2\"]",
      "    }",
      "    register {",
      "        ip = \"10.1.1.2\"",
      "        tags = [\"tag3\"]",
      "    }",
      "}"
    ]
  },
  "panos-resource-ethernet_interface": {
    "description": "Defines ethernet_interface",
    "prefix": "tf-panos-resource-ethernet_interface",
    "body": [
      "# Configure a bare-bones ethernet interface.",
      "resource \"panos_ethernet_interface\" \"example1\" {",
      "    name = \"ethernet1/3\"",
      "    vsys = \"vsys1\"",
      "    mode = \"layer3\"",
      "    static_ips = [\"10.1.1.1/24\"]",
      "    comment = \"Configured for internal traffic\"",
      "}",
      "",
      "# Configure a DHCP ethernet interface for vsys1 to use.",
      "resource \"panos_ethernet_interface\" \"example2\" {",
      "    name = \"ethernet1/4\"",
      "    vsys = \"vsys1\"",
      "    mode = \"layer3\"",
      "    enable_dhcp = true",
      "    create_dhcp_default_route = true",
      "    dhcp_default_route_metric = 10",
      "}"
    ]
  },
  "panos-resource-general_settings": {
    "description": "Defines general_settings",
    "prefix": "tf-panos-resource-general_settings",
    "body": [
      "resource \"panos_general_settings\" \"example\" {",
      "    hostname = \"ngfw220\"",
      "    dns_primary = \"10.5.1.10\"",
      "    ntp_primary = \"10.5.1.10\"",
      "    ntp_primary_auth_type = \"none\"",
      "}"
    ]
  },
  "panos-resource-management_profile": {
    "description": "Defines management_profile",
    "prefix": "tf-panos-resource-management_profile",
    "body": [
      "resource \"panos_management_profile\" \"example\" {",
      "    name = \"allow ping\"",
      "    ping = true",
      "    permitted_ips = [\"10.1.1.0/24\", \"192.168.80.0/24\"]",
      "}"
    ]
  },
  "panos-resource-nat_policy": {
    "description": "Defines nat_policy",
    "prefix": "tf-panos-resource-nat_policy",
    "body": [
      "resource \"panos_nat_policy\" \"example\" {",
      "    name = \"my nat policy\"",
      "    source_zones = [\"zone1\"]",
      "    destination_zone = \"zone2\"",
      "    to_interface = \"ethernet1/3\"",
      "    source_addresses = [\"any\"]",
      "    destination_addresses = [\"any\"]",
      "    sat_type = \"none\"",
      "    dat_address = \"my dat address object\"",
      "}"
    ]
  },
  "panos-resource-panorama_address_group": {
    "description": "Defines panorama_address_group",
    "prefix": "tf-panos-resource-panorama_address_group",
    "body": [
      "# Static group",
      "resource \"panos_panorama_address_group\" \"example1\" {",
      "    name = \"static ntp grp\"",
      "    description = \"My NTP servers\"",
      "    static_addresses = [\"ntp1\", \"ntp2\", \"ntp3\"]",
      "}",
      "",
      "# Dynamic group",
      "resource \"panos_panorama_address_group\" \"example2\" {",
      "    name = \"dynamic grp\"",
      "    description = \"My internal NTP servers\"",
      "    dynamic_match = \"'internal' and 'ntp'\"",
      "}"
    ]
  },
  "panos-resource-panorama_address_object": {
    "description": "Defines panorama_address_object",
    "prefix": "tf-panos-resource-panorama_address_object",
    "body": [
      "resource \"panos_panorama_address_object\" \"example\" {",
      "    name = \"localnet\"",
      "    value = \"192.168.80.0/24\"",
      "    description = \"The 192.168.80 network\"",
      "    tags = [\"internal\", \"dmz\"]",
      "}"
    ]
  },
  "panos-resource-panorama_administrative_tag": {
    "description": "Defines panorama_administrative_tag",
    "prefix": "tf-panos-resource-panorama_administrative_tag",
    "body": [
      "resource \"panos_panorama_administrative_tag\" \"example\" {",
      "    name = \"tag1\"",
      "    color = \"color5\"",
      "    comment = \"Internal resources\"",
      "}"
    ]
  },
  "panos-resource-panorama_device_group": {
    "description": "Defines panorama_device_group",
    "prefix": "tf-panos-resource-panorama_device_group",
    "body": [
      "resource \"panos_panorama_device_group\" \"example\" {",
      "    name = \"my device group\"",
      "    description = \"description here\"",
      "    device {",
      "        serial = \"00112233\"",
      "    }",
      "    device {",
      "        serial = \"44556677\"",
      "        vsys_list = [\"vsys1\", \"vsys2\"]",
      "    }",
      "}"
    ]
  },
  "panos-resource-panorama_device_group_entry": {
    "description": "Defines panorama_device_group_entry",
    "prefix": "tf-panos-resource-panorama_device_group_entry",
    "body": [
      "# Example for a virtual firewall.",
      "resource \"panos_panorama_device_group_entry\" \"example1\" {",
      "    device_group = \"my device group\"",
      "    serial = \"00112233\"",
      "}",
      "",
      "# Example for a physical firewall with multi-vsys enabled.",
      "resource \"panos_panorama_device_group_entry\" \"example2\" {",
      "    device_group = \"my device group\"",
      "    serial = \"44556677\"",
      "    vsys_list = [\"vsys1\", \"vsys2\"]",
      "}"
    ]
  },
  "panos-resource-panorama_nat_policy": {
    "description": "Defines panorama_nat_policy",
    "prefix": "tf-panos-resource-panorama_nat_policy",
    "body": [
      "resource \"panos_panorama_nat_policy\" \"example\" {",
      "    name = \"my nat policy\"",
      "    source_zones = [\"zone1\"]",
      "    destination_zone = \"zone2\"",
      "    to_interface = \"ethernet1/3\"",
      "    source_addresses = [\"any\"]",
      "    destination_addresses = [\"any\"]",
      "    sat_type = \"none\"",
      "    dat_address = \"my dat address object\"",
      "    target {",
      "        serial = \"123456\"",
      "        vsys_list = [\"vsys1\", \"vsys2\"]",
      "    }",
      "}"
    ]
  },
  "panos-resource-panorama_security_policies": {
    "description": "Defines panorama_security_policies",
    "prefix": "tf-panos-resource-panorama_security_policies",
    "body": [
      "resource \"panos_panorama_security_policies\" \"example\" {",
      "    rule {",
      "        name = \"allow bizdev to dmz\"",
      "        source_zones = [\"bizdev\"]",
      "        source_addresses = [\"any\"]",
      "        source_users = [\"any\"]",
      "        hip_profiles = [\"any\"]",
      "        destination_zones = [\"dmz\"]",
      "        destination_addresses = [\"any\"]",
      "        applications = [\"any\"]",
      "        services = [\"application-default\"]",
      "        categories = [\"any\"]",
      "        action = \"allow\"",
      "    }",
      "    rule {",
      "        name = \"deny sales to eng\"",
      "        source_zones = [\"sales\"]",
      "        source_addresses = [\"any\"]",
      "        source_users = [\"any\"]",
      "        hip_profiles = [\"any\"]",
      "        destination_zones = [\"eng\"]",
      "        destination_addresses = [\"any\"]",
      "        applications = [\"any\"]",
      "        services = [\"application-default\"]",
      "        categories = [\"any\"]",
      "        action = \"deny\"",
      "        target {",
      "            serial = \"01234\"",
      "        }",
      "        target {",
      "            serial = \"56789\"",
      "            vsys_list = [\"vsys1\", \"vsys3\"]",
      "        }",
      "    }",
      "}"
    ]
  },
  "panos-resource-panorama_service_group": {
    "description": "Defines panorama_service_group",
    "prefix": "tf-panos-resource-panorama_service_group",
    "body": [
      "resource \"panos_panorama_service_group\" \"example\" {",
      "    name = \"static ntp grp\"",
      "    services = [\"svc1\", \"svc2\"]",
      "}"
    ]
  },
  "panos-resource-panorama_service_object": {
    "description": "Defines panorama_service_object",
    "prefix": "tf-panos-resource-panorama_service_object",
    "body": [
      "resource \"panos_panorama_service_object\" \"example\" {",
      "    name = \"my_service\"",
      "    protocol = \"tcp\"",
      "    description = \"My service object\"",
      "    source_port = \"2000-2049,2051-2099\"",
      "    destination_port = \"32123\"",
      "    tags = [\"internal\", \"dmz\"]",
      "}"
    ]
  },
  "panos-resource-security_policies": {
    "description": "Defines security_policies",
    "prefix": "tf-panos-resource-security_policies",
    "body": [
      "resource \"panos_security_policies\" \"example\" {",
      "    rule {",
      "        name = \"allow bizdev to dmz\"",
      "        source_zones = [\"bizdev\"]",
      "        source_addresses = [\"any\"]",
      "        source_users = [\"any\"]",
      "        hip_profiles = [\"any\"]",
      "        destination_zones = [\"dmz\"]",
      "        destination_addresses = [\"any\"]",
      "        applications = [\"any\"]",
      "        services = [\"application-default\"]",
      "        categories = [\"any\"]",
      "        action = \"allow\"",
      "    }",
      "    rule {",
      "        name = \"deny sales to eng\"",
      "        source_zones = [\"sales\"]",
      "        source_addresses = [\"any\"]",
      "        source_users = [\"any\"]",
      "        hip_profiles = [\"any\"]",
      "        destination_zones = [\"eng\"]",
      "        destination_addresses = [\"any\"]",
      "        applications = [\"any\"]",
      "        services = [\"application-default\"]",
      "        categories = [\"any\"]",
      "        action = \"deny\"",
      "    }",
      "}"
    ]
  },
  "panos-resource-service_group": {
    "description": "Defines service_group",
    "prefix": "tf-panos-resource-service_group",
    "body": [
      "resource \"panos_service_group\" \"example\" {",
      "    name = \"static ntp grp\"",
      "    services = [\"svc1\", \"svc2\"]",
      "}"
    ]
  },
  "panos-resource-service_object": {
    "description": "Defines service_object",
    "prefix": "tf-panos-resource-service_object",
    "body": [
      "resource \"panos_service_object\" \"example\" {",
      "    name = \"my_service\"",
      "    vsys = \"vsys1\"",
      "    protocol = \"tcp\"",
      "    description = \"My service object\"",
      "    source_port = \"2000-2049,2051-2099\"",
      "    destination_port = \"32123\"",
      "    tags = [\"internal\", \"dmz\"]",
      "}"
    ]
  },
  "panos-resource-virtual_router": {
    "description": "Defines virtual_router",
    "prefix": "tf-panos-resource-virtual_router",
    "body": [
      "# Configure a bare-bones ethernet interface.",
      "resource \"panos_virtual_router\" \"example\" {",
      "    name = \"my virtual router\"",
      "    static_dist = 15",
      "    interfaces = [\"ethernet1/1\", \"ethernet1/2\"]",
      "}"
    ]
  },
  "panos-resource-zone": {
    "description": "Defines zone",
    "prefix": "tf-panos-resource-zone",
    "body": [
      "resource \"panos_zone\" \"example\" {",
      "    name = \"my_service\"",
      "    mode = \"layer3\"",
      "    interfaces = [\"ethernet1/1\", \"ethernet1/2\"]",
      "    enable_user_id = true",
      "    exclude_acls = [\"192.168.0.0/16\"]",
      "}"
    ]
  },
  "postgresql-resource-postgresql_database": {
    "description": "Defines postgresql_database",
    "prefix": "tf-postgresql-resource-postgresql_database",
    "body": [
      "resource \"postgresql_database\" \"my_db\" {",
      "  name              = \"my_db\"",
      "  owner             = \"my_role\"",
      "  template          = \"template0\"",
      "  lc_collate        = \"C\"",
      "  connection_limit  = -1",
      "  allow_connections = true",
      "}"
    ]
  },
  "postgresql-resource-postgresql_extension": {
    "description": "Defines postgresql_extension",
    "prefix": "tf-postgresql-resource-postgresql_extension",
    "body": [
      "resource \"postgresql_extension\" \"my_extension\" {",
      "  name = \"pg_trgm\"",
      "}"
    ]
  },
  "postgresql-resource-postgresql_role": {
    "description": "Defines postgresql_role",
    "prefix": "tf-postgresql-resource-postgresql_role",
    "body": [
      "resource \"postgresql_role\" \"my_role\" {",
      "  name     = \"my_role\"",
      "  login    = true",
      "  password = \"mypass\"",
      "}",
      "",
      "resource \"postgresql_role\" \"my_replication_role\" {",
      "  name             = \"replication_role\"",
      "  replication      = true",
      "  login            = true",
      "  connection_limit = 5",
      "  password         = \"md5c98cbfeb6a347a47eb8e96cfb4c4b890\"",
      "}"
    ]
  },
  "postgresql-resource-postgresql_schema": {
    "description": "Defines postgresql_schema",
    "prefix": "tf-postgresql-resource-postgresql_schema",
    "body": [
      "resource \"postgresql_role\" \"app_www\" {",
      "  name = \"app_www\"",
      "}",
      "",
      "resource \"postgresql_role\" \"app_dba\" {",
      "  name = \"app_dba\"",
      "}",
      "",
      "resource \"postgresql_role\" \"app_releng\" {",
      "  name = \"app_releng\"",
      "}",
      "",
      "resource \"postgresql_schema\" \"my_schema\" {",
      "  name  = \"my_schema\"",
      "  owner = \"postgres\"",
      "",
      "  policy {",
      "    usage = true",
      "    role  = \"${postgresql_role.app_www.name}\"",
      "  }",
      "",
      "  # app_releng can create new objects in the schema.  This is the role that",
      "  # migrations are executed as.",
      "  policy {",
      "    create = true",
      "    usage  = true",
      "    role   = \"${postgresql_role.app_releng.name}\"",
      "  }",
      "",
      "  policy {",
      "    create_with_grant = true",
      "    usage_with_grant  = true",
      "    role              = \"${postgresql_role.app_dba.name}\"",
      "  }",
      "}"
    ]
  },
  "powerdns-resource-record": {
    "description": "Defines record",
    "prefix": "tf-powerdns-resource-record",
    "body": [
      "# Add a record to the zone",
      "resource \"powerdns_record\" \"foobar\" {",
      "  zone    = \"example.com.\"",
      "  name    = \"www.example.com\"",
      "  type    = \"A\"",
      "  ttl     = 300",
      "  records = [\"192.168.0.11\"]",
      "}"
    ]
  },
  "profitbricks-data-profitbricks_datacenter": {
    "description": "Defines profitbricks_datacenter",
    "prefix": "tf-profitbricks-data-profitbricks_datacenter",
    "body": [
      "data \"profitbricks_datacenter\" \"dc_example\" {",
      "  name     = \"test_dc\"",
      "  location = \"us\"",
      "}"
    ]
  },
  "profitbricks-data-profitbricks_image": {
    "description": "Defines profitbricks_image",
    "prefix": "tf-profitbricks-data-profitbricks_image",
    "body": [
      "data \"profitbricks_image\" \"image_example\" {",
      "  name     = \"Ubuntu\"",
      "  type     = \"HDD\"",
      "  version  = \"14\"",
      "  location = \"location_id\"",
      "}"
    ]
  },
  "profitbricks-data-profitbricks_location": {
    "description": "Defines profitbricks_location",
    "prefix": "tf-profitbricks-data-profitbricks_location",
    "body": [
      "data \"profitbricks_location\" \"loc1\" {",
      "  name    = \"karlsruhe\"",
      "  feature = \"SSD\"",
      "}"
    ]
  },
  "profitbricks-data-profitbricks_resource": {
    "description": "Defines profitbricks_resource",
    "prefix": "tf-profitbricks-data-profitbricks_resource",
    "body": [
      "data \"profitbricks_resource\" \"res\" {\r",
      "  resource_type = \"datacenter\"\r",
      "  resource_id=\"datacenter uuid\"\r",
      "}\r"
    ]
  },
  "profitbricks-data-profitbricks_snapshot": {
    "description": "Defines profitbricks_snapshot",
    "prefix": "tf-profitbricks-data-profitbricks_snapshot",
    "body": [
      "data \"profitbricks_snapshot\" \"snapshot_example\" {\r",
      "  name     = \"my snapshot\"\r",
      "  size     = \"2\"\r",
      "  location = \"location_id\"\r",
      "}\r"
    ]
  },
  "profitbricks-resource-profitbricks_datacenter": {
    "description": "Defines profitbricks_datacenter",
    "prefix": "tf-profitbricks-resource-profitbricks_datacenter",
    "body": [
      "resource \"profitbricks_datacenter\" \"example\" {",
      "  name        = \"datacenter name\"",
      "  location    = \"us/las\"",
      "  description = \"datacenter description\"",
      "}"
    ]
  },
  "profitbricks-resource-profitbricks_firewall": {
    "description": "Defines profitbricks_firewall",
    "prefix": "tf-profitbricks-resource-profitbricks_firewall",
    "body": [
      "resource \"profitbricks_firewall\" \"example\" {",
      "  datacenter_id    = \"${profitbricks_datacenter.example.id}\"",
      "  server_id        = \"${profitbricks_server.example.id}\"",
      "  nic_id           = \"${profitbricks_server.example.primary_nic}\"",
      "  protocol         = \"TCP\"",
      "  name             = \"test\"",
      "  port_range_start = 1",
      "  port_range_end   = 2",
      "}"
    ]
  },
  "profitbricks-resource-profitbricks_group": {
    "description": "Defines profitbricks_group",
    "prefix": "tf-profitbricks-resource-profitbricks_group",
    "body": [
      "resource \"profitbricks_group\" \"group\" {\r",
      "  name = \"my group\"\r",
      "  create_datacenter = true\r",
      "  create_snapshot = true\r",
      "  reserve_ip = true\r",
      "  access_activity_log = false\r",
      "  user_id=\"user_id\"\r",
      "}\r"
    ]
  },
  "profitbricks-resource-profitbricks_ipblock": {
    "description": "Defines profitbricks_ipblock",
    "prefix": "tf-profitbricks-resource-profitbricks_ipblock",
    "body": [
      "resource \"profitbricks_ipblock\" \"example\" {",
      "  location = \"${profitbricks_datacenter.example.location}\"",
      "  size     = 1",
      "}"
    ]
  },
  "profitbricks-resource-profitbricks_ipfailover": {
    "description": "Defines profitbricks_ipfailover",
    "prefix": "tf-profitbricks-resource-profitbricks_ipfailover",
    "body": [
      "resource \"profitbricks_ipfailover\" \"failovertest\" {\r",
      "  datacenter_id = \"datacenterId\"\r",
      "  lan_id=\"lanId\"\r",
      "  ip =\"reserved IP\"\r",
      "  nicuuid= \"nicId\"\r",
      "}\r"
    ]
  },
  "profitbricks-resource-profitbricks_lan": {
    "description": "Defines profitbricks_lan",
    "prefix": "tf-profitbricks-resource-profitbricks_lan",
    "body": [
      "resource \"profitbricks_lan\" \"example\" {\r",
      "  datacenter_id = \"${profitbricks_datacenter.example.id}\"\r",
      "  public        = true\r",
      "}\r"
    ]
  },
  "profitbricks-resource-profitbricks_loadbalancer": {
    "description": "Defines profitbricks_loadbalancer",
    "prefix": "tf-profitbricks-resource-profitbricks_loadbalancer",
    "body": [
      "resource \"profitbricks_loadbalancer\" \"example\" {",
      "  datacenter_id = \"${profitbricks_datacenter.example.id}\"",
      "  nic_ids        = [\"${profitbricks_nic.example.id}\"]",
      "  name          = \"load balancer name\"",
      "  dhcp          = true",
      "}"
    ]
  },
  "profitbricks-resource-profitbricks_nic": {
    "description": "Defines profitbricks_nic",
    "prefix": "tf-profitbricks-resource-profitbricks_nic",
    "body": [
      "resource \"profitbricks_nic\" \"example\" {",
      "  datacenter_id = \"${profitbricks_datacenter.example.id}\"",
      "  server_id     = \"${profitbricks_server.example.id}\"",
      "  lan           = 2",
      "  dhcp          = true",
      "  ip            = \"${profitbricks_ipblock.example.ip}\"",
      "}"
    ]
  },
  "profitbricks-resource-profitbricks_server": {
    "description": "Defines profitbricks_server",
    "prefix": "tf-profitbricks-resource-profitbricks_server",
    "body": [
      "resource \"profitbricks_server\" \"example\" {",
      "  name              = \"server\"",
      "  datacenter_id     = \"${profitbricks_datacenter.example.id}\"",
      "  cores             = 1",
      "  ram               = 1024",
      "  availability_zone = \"ZONE_1\"",
      "  cpu_family        = \"AMD_OPTERON\"",
      "",
      "  volume {",
      "    name           = \"new\"",
      "    image_name     = \"${var.ubuntu}\"",
      "    size           = 5",
      "    disk_type      = \"SSD\"",
      "    ssh_key_path   = \"${var.private_key_path}\"",
      "    image_password = \"test1234\"",
      "  }",
      "",
      "  nic {",
      "    lan             = \"${profitbricks_lan.example.id}\"",
      "    dhcp            = true",
      "    ip              = \"${profitbricks_ipblock.example.ip}\"",
      "    firewall_active = true",
      "",
      "    firewall {",
      "      protocol         = \"TCP\"",
      "      name             = \"SSH\"",
      "      port_range_start = 22",
      "      port_range_end   = 22",
      "    }",
      "  }",
      "}"
    ]
  },
  "profitbricks-resource-profitbricks_share": {
    "description": "Defines profitbricks_share",
    "prefix": "tf-profitbricks-resource-profitbricks_share",
    "body": [
      "resource \"profitbricks_share\" \"share\" {\r",
      "  group_id = \"groupId\"\r",
      "  resource_id = \"resourceId\"\r",
      "  edit_privilege = true\r",
      "  share_privilege = false\r",
      "}\r"
    ]
  },
  "profitbricks-resource-profitbricks_snapshot": {
    "description": "Defines profitbricks_snapshot",
    "prefix": "tf-profitbricks-resource-profitbricks_snapshot",
    "body": [
      "resource \"profitbricks_snapshot\" \"test_snapshot\" {\r",
      "  datacenter_id = \"datacenterId\"\r",
      "  volume_id = \"volumeId\"\r",
      "  name = \"my snapshot\"\r",
      "}\r"
    ]
  },
  "profitbricks-resource-profitbricks_user": {
    "description": "Defines profitbricks_user",
    "prefix": "tf-profitbricks-resource-profitbricks_user",
    "body": [
      "resource \"profitbricks_user\" \"user\" {\r",
      "  first_name = \"terraform\"\r",
      "  last_name = \"test\"\r",
      "  email = \"%s\"\r",
      "  password = \"abc123-321CBA\"\r",
      "  administrator = false\r",
      "  force_sec_auth= false\r",
      "}\r"
    ]
  },
  "profitbricks-resource-profitbricks_volume": {
    "description": "Defines profitbricks_volume",
    "prefix": "tf-profitbricks-resource-profitbricks_volume",
    "body": [
      "resource \"profitbricks_volume\" \"example\" {",
      "  datacenter_id = \"${profitbricks_datacenter.example.id}\"",
      "  server_id     = \"${profitbricks_server.example.id}\"",
      "  image_name    = \"${var.ubuntu}\"",
      "  size          = 5",
      "  disk_type     = \"HDD\"",
      "  ssh_key_path  = \"${var.private_key_path}\"",
      "  bus           = \"VIRTIO\"",
      "}"
    ]
  },
  "rabbitmq-resource-binding": {
    "description": "Defines binding",
    "prefix": "tf-rabbitmq-resource-binding",
    "body": [
      "resource \"rabbitmq_vhost\" \"test\" {",
      "  name = \"test\"",
      "}",
      "",
      "resource \"rabbitmq_permissions\" \"guest\" {",
      "  user  = \"guest\"",
      "  vhost = \"${rabbitmq_vhost.test.name}\"",
      "",
      "  permissions {",
      "    configure = \".*\"",
      "    write     = \".*\"",
      "    read      = \".*\"",
      "  }",
      "}",
      "",
      "resource \"rabbitmq_exchange\" \"test\" {",
      "  name  = \"test\"",
      "  vhost = \"${rabbitmq_permissions.guest.vhost}\"",
      "",
      "  settings {",
      "    type        = \"fanout\"",
      "    durable     = false",
      "    auto_delete = true",
      "  }",
      "}",
      "",
      "resource \"rabbitmq_queue\" \"test\" {",
      "  name  = \"test\"",
      "  vhost = \"${rabbitmq_permissions.guest.vhost}\"",
      "",
      "  settings {",
      "    durable     = true",
      "    auto_delete = false",
      "  }",
      "}",
      "",
      "resource \"rabbitmq_binding\" \"test\" {",
      "  source           = \"${rabbitmq_exchange.test.name}\"",
      "  vhost            = \"${rabbitmq_vhost.test.name}\"",
      "  destination      = \"${rabbitmq_queue.test.name}\"",
      "  destination_type = \"queue\"",
      "  routing_key      = \"#\"",
      "}"
    ]
  },
  "rabbitmq-resource-exchange": {
    "description": "Defines exchange",
    "prefix": "tf-rabbitmq-resource-exchange",
    "body": [
      "resource \"rabbitmq_vhost\" \"test\" {",
      "  name = \"test\"",
      "}",
      "",
      "resource \"rabbitmq_permissions\" \"guest\" {",
      "  user  = \"guest\"",
      "  vhost = \"${rabbitmq_vhost.test.name}\"",
      "",
      "  permissions {",
      "    configure = \".*\"",
      "    write     = \".*\"",
      "    read      = \".*\"",
      "  }",
      "}",
      "",
      "resource \"rabbitmq_exchange\" \"test\" {",
      "  name  = \"test\"",
      "  vhost = \"${rabbitmq_permissions.guest.vhost}\"",
      "",
      "  settings {",
      "    type        = \"fanout\"",
      "    durable     = false",
      "    auto_delete = true",
      "  }",
      "}"
    ]
  },
  "rabbitmq-resource-permissions": {
    "description": "Defines permissions",
    "prefix": "tf-rabbitmq-resource-permissions",
    "body": [
      "resource \"rabbitmq_vhost\" \"test\" {",
      "  name = \"test\"",
      "}",
      "",
      "resource \"rabbitmq_user\" \"test\" {",
      "  name     = \"mctest\"",
      "  password = \"foobar\"",
      "  tags     = [\"administrator\"]",
      "}",
      "",
      "resource \"rabbitmq_permissions\" \"test\" {",
      "  user  = \"${rabbitmq_user.test.name}\"",
      "  vhost = \"${rabbitmq_vhost.test.name}\"",
      "",
      "  permissions {",
      "    configure = \".*\"",
      "    write     = \".*\"",
      "    read      = \".*\"",
      "  }",
      "}"
    ]
  },
  "rabbitmq-resource-policy": {
    "description": "Defines policy",
    "prefix": "tf-rabbitmq-resource-policy",
    "body": [
      "resource \"rabbitmq_vhost\" \"test\" {",
      "  name = \"test\"",
      "}",
      "",
      "resource \"rabbitmq_permissions\" \"guest\" {",
      "  user  = \"guest\"",
      "  vhost = \"${rabbitmq_vhost.test.name}\"",
      "",
      "  permissions {",
      "    configure = \".*\"",
      "    write     = \".*\"",
      "    read      = \".*\"",
      "  }",
      "}",
      "",
      "resource \"rabbitmq_policy\" \"test\" {",
      "  name  = \"test\"",
      "  vhost = \"${rabbitmq_permissions.guest.vhost}\"",
      "",
      "  policy {",
      "    pattern  = \".*\"",
      "    priority = 0",
      "    apply_to = \"all\"",
      "",
      "    definition {",
      "      ha-mode = \"all\"",
      "    }",
      "  }",
      "}"
    ]
  },
  "rabbitmq-resource-queue": {
    "description": "Defines queue",
    "prefix": "tf-rabbitmq-resource-queue",
    "body": [
      "resource \"rabbitmq_vhost\" \"test\" {",
      "  name = \"test\"",
      "}",
      "",
      "resource \"rabbitmq_permissions\" \"guest\" {",
      "  user  = \"guest\"",
      "  vhost = \"${rabbitmq_vhost.test.name}\"",
      "",
      "  permissions {",
      "    configure = \".*\"",
      "    write     = \".*\"",
      "    read      = \".*\"",
      "  }",
      "}",
      "",
      "resource \"rabbitmq_queue\" \"test\" {",
      "  name  = \"test\"",
      "  vhost = \"${rabbitmq_permissions.guest.vhost}\"",
      "",
      "  settings {",
      "    durable     = false",
      "    auto_delete = true",
      "  }",
      "}"
    ]
  },
  "rabbitmq-resource-user": {
    "description": "Defines user",
    "prefix": "tf-rabbitmq-resource-user",
    "body": [
      "resource \"rabbitmq_user\" \"test\" {",
      "  name     = \"mctest\"",
      "  password = \"foobar\"",
      "  tags     = [\"administrator\", \"management\"]",
      "}"
    ]
  },
  "rabbitmq-resource-vhost": {
    "description": "Defines vhost",
    "prefix": "tf-rabbitmq-resource-vhost",
    "body": [
      "resource \"rabbitmq_vhost\" \"my_vhost\" {",
      "  name = \"my_vhost\"",
      "}"
    ]
  },
  "rancher-data-certificate": {
    "description": "Defines certificate",
    "prefix": "tf-rancher-data-certificate",
    "body": [
      "data \"rancher_certificate\" \"foo\" {",
      "  name           = \"foo\"",
      "  environment_id = \"1a5\"",
      "}"
    ]
  },
  "rancher-data-environment": {
    "description": "Defines environment",
    "prefix": "tf-rancher-data-environment",
    "body": [
      "data \"rancher_environment\" \"foo\" {",
      "  name = \"foo\"",
      "}"
    ]
  },
  "rancher-data-setting": {
    "description": "Defines setting",
    "prefix": "tf-rancher-data-setting",
    "body": [
      "data \"rancher_setting\" \"cattle.cattle.version\" {",
      "  name = \"cattle.cattle.version\"",
      "}"
    ]
  },
  "rancher-resource-certificate": {
    "description": "Defines certificate",
    "prefix": "tf-rancher-resource-certificate",
    "body": [
      "# Create a new Rancher Certificate",
      "resource rancher_certificate \"foo\" {",
      "  name           = \"foo\"",
      "  description    = \"my foo certificate\"",
      "  environment_id = \"${rancher_environment.test.id}\"",
      "  cert = \"${file(\"server.crt\")}\"",
      "  key = \"${file(\"server.key\")}\"",
      "}"
    ]
  },
  "rancher-resource-environment": {
    "description": "Defines environment",
    "prefix": "tf-rancher-resource-environment",
    "body": [
      "# Create a new Rancher environment",
      "resource \"rancher_environment\" \"default\" {",
      "  name = \"staging\"",
      "  description = \"The staging environment\"",
      "  orchestration = \"cattle\"",
      "",
      "  member {",
      "    external_id = \"650430\"",
      "    external_id_type = \"github_user\"",
      "    role = \"owner\"",
      "  }",
      "",
      "  member {",
      "    external_id = \"1234\"",
      "    external_id_type = \"github_team\"",
      "    role = \"member\"",
      "  }",
      "}"
    ]
  },
  "rancher-resource-host": {
    "description": "Defines host",
    "prefix": "tf-rancher-resource-host",
    "body": [
      "# Manage an existing Rancher host",
      "resource rancher_host \"foo\" {",
      "  name           = \"foo\"",
      "  description    = \"The foo node\"",
      "  environment_id = \"1a5\"",
      "  hostname       = \"foo.example.com\"",
      "  labels {",
      "    role = \"database\"",
      "  }",
      "}"
    ]
  },
  "rancher-resource-registration_token": {
    "description": "Defines registration_token",
    "prefix": "tf-rancher-resource-registration_token",
    "body": [
      "# Create a new Rancher registration token",
      "resource \"rancher_registration_token\" \"default\" {",
      "  name           = \"staging_token\"",
      "  description    = \"Registration token for the staging environment\"",
      "  environment_id = \"${rancher_environment.default.id}\"",
      "  agent_ip       = \"1.2.3.4\"",
      "",
      "  host_labels    {",
      "    orchestration = \"true\",",
      "    etcd          = \"true\",",
      "    compute       = \"true\"",
      "  }",
      "}"
    ]
  },
  "rancher-resource-registry": {
    "description": "Defines registry",
    "prefix": "tf-rancher-resource-registry",
    "body": [
      "# Create a new Rancher registry",
      "resource \"rancher_registry\" \"dockerhub\" {",
      "  name           = \"dockerhub\"",
      "  description    = \"DockerHub Registry\"",
      "  environment_id = \"${rancher_environment.default.id}\"",
      "  server_address = \"index.dockerhub.io\"",
      "}"
    ]
  },
  "rancher-resource-registry_credential": {
    "description": "Defines registry_credential",
    "prefix": "tf-rancher-resource-registry_credential",
    "body": [
      "# Create a new Rancher registry",
      "resource \"rancher_registry_credential\" \"dockerhub\" {",
      "  name         = \"dockerhub\"",
      "  description  = \"DockerHub Registry Credential\"",
      "  registry_id  = \"${rancher_registry.dockerhub.id}\"",
      "  public_value = \"myself\"",
      "  secret_value = \"mypass\"",
      "}"
    ]
  },
  "rancher-resource-secret": {
    "description": "Defines secret",
    "prefix": "tf-rancher-resource-secret",
    "body": [
      "# Create a new Rancher Secret",
      "resource rancher_secret \"foo\" {",
      "  name           = \"foo\"",
      "  environment_id = \"${rancher_environment.test.id}\"",
      "  value          = \"my great password\"",
      "}"
    ]
  },
  "rancher-resource-stack": {
    "description": "Defines stack",
    "prefix": "tf-rancher-resource-stack",
    "body": [
      "# Create a new empty Rancher stack",
      "resource \"rancher_stack\" \"external-dns\" {",
      "  name           = \"route53\"",
      "  description    = \"Route53 stack\"",
      "  environment_id = \"${rancher_environment.default.id}\"",
      "  catalog_id     = \"library:route53:7\"",
      "  scope          = \"system\"",
      "",
      "  environment {",
      "    AWS_ACCESS_KEY        = \"MYKEY\"",
      "    AWS_SECRET_KEY        = \"MYSECRET\"",
      "    AWS_REGION            = \"eu-central-1\"",
      "    TTL                   = \"60\"",
      "    ROOT_DOMAIN           = \"example.com\"",
      "    ROUTE53_ZONE_ID       = \"\"",
      "    HEALTH_CHECK_INTERVAL = \"15\"",
      "  }",
      "}"
    ]
  },
  "rancher-resource-volume": {
    "description": "Defines volume",
    "prefix": "tf-rancher-resource-volume",
    "body": [
      "# Create a new Rancher Volume",
      "resource rancher_volume \"foo\" {",
      "  name           = \"foo\"",
      "  environment_id = \"${rancher_environment.test.id}\"",
      "  driver         = \"rancher-nfs\"",
      "}"
    ]
  },
  "random-resource-id": {
    "description": "Defines id",
    "prefix": "tf-random-resource-id",
    "body": [
      "resource \"random_id\" \"server\" {",
      "  keepers = {",
      "    # Generate a new id each time we switch to a new AMI id",
      "    ami_id = \"${var.ami_id}\"",
      "  }",
      "",
      "  byte_length = 8",
      "}",
      "",
      "resource \"aws_instance\" \"server\" {",
      "  tags = {",
      "    Name = \"web-server ${random_id.server.hex}\"",
      "  }",
      "",
      "  # Read the AMI id \"through\" the random_id resource to ensure that",
      "  # both will change together.",
      "  ami = \"${random_id.server.keepers.ami_id}\"",
      "",
      "  # ... (other aws_instance arguments) ...",
      "}"
    ]
  },
  "random-resource-integer": {
    "description": "Defines integer",
    "prefix": "tf-random-resource-integer",
    "body": [
      "resource \"random_integer\" \"priority\" {",
      "  min     = 1",
      "  max     = 99999",
      "  keepers = {",
      "    # Generate a new integer each time we switch to a new listener ARN",
      "    listener_arn = \"${var.listener_arn}\"",
      "  }",
      "}",
      "",
      "resource \"aws_alb_listener_rule\" \"main\" {",
      "  listener_arn = \"${var.listener_arn}\"",
      "  priority     = \"${random_integer.priority.result}\"",
      "",
      "  action {",
      "    type             = \"forward\"",
      "    target_group_arn = \"${var.target_group_arn}\"",
      "  }",
      "  # ... (other aws_alb_listener_rule arguments) ...",
      "}"
    ]
  },
  "random-resource-pet": {
    "description": "Defines pet",
    "prefix": "tf-random-resource-pet",
    "body": [
      "resource \"random_pet\" \"server\" {",
      "  keepers = {",
      "    # Generate a new pet name each time we switch to a new AMI id",
      "    ami_id = \"${var.ami_id}\"",
      "  }",
      "}",
      "",
      "resource \"aws_instance\" \"server\" {",
      "  tags = {",
      "    Name = \"web-server-${random_pet.server.id}\"",
      "  }",
      "",
      "  # Read the AMI id \"through\" the random_pet resource to ensure that",
      "  # both will change together.",
      "  ami = \"${random_pet.server.keepers.ami_id}\"",
      "",
      "  # ... (other aws_instance arguments) ...",
      "}"
    ]
  },
  "random-resource-shuffle": {
    "description": "Defines shuffle",
    "prefix": "tf-random-resource-shuffle",
    "body": [
      "resource \"random_shuffle\" \"az\" {",
      "  input = [\"us-west-1a\", \"us-west-1c\", \"us-west-1d\", \"us-west-1e\"]",
      "  result_count = 2",
      "}",
      "",
      "resource \"aws_elb\" \"example\" {",
      "  # Place the ELB in any two of the given availability zones, selected",
      "  # at random.",
      "  availability_zones = [\"${random_shuffle.az.result}\"]",
      "",
      "  # ... and other aws_elb arguments ...",
      "}"
    ]
  },
  "random-resource-string": {
    "description": "Defines string",
    "prefix": "tf-random-resource-string",
    "body": [
      "resource \"random_string\" \"password\" {",
      "  length = 16",
      "  special = true",
      "  override_special = \"/@\\\" \"",
      "}",
      "",
      "resource \"aws_db_instance\" \"example\" {",
      "  password = \"${random_string.password.result}\"",
      "}"
    ]
  },
  "rundeck-resource-job": {
    "description": "Defines job",
    "prefix": "tf-rundeck-resource-job",
    "body": [
      "resource \"rundeck_job\" \"bounceweb\" {",
      "    name = \"Bounce Web Servers\"",
      "    project_name = \"anvils\"",
      "    node_filter_query = \"tags: web\"",
      "    description = \"Restart the service daemons on all the web servers\"",
      "",
      "    command {",
      "        shell_command = \"sudo service anvils restart\"",
      "    }",
      "}"
    ]
  },
  "rundeck-resource-private_key": {
    "description": "Defines private_key",
    "prefix": "tf-rundeck-resource-private_key",
    "body": [
      "resource \"rundeck_private_key\" \"anvils\" {",
      "    path = \"anvils/id_rsa\"",
      "    key_material = \"${file(\"/id_rsa\")}\"",
      "}"
    ]
  },
  "rundeck-resource-project": {
    "description": "Defines project",
    "prefix": "tf-rundeck-resource-project",
    "body": [
      "resource \"rundeck_project\" \"anvils\" {",
      "    name = \"anvils\"",
      "    description = \"Application for managing Anvils\"",
      "",
      "    ssh_key_storage_path = \"anvils/id_rsa\"",
      "",
      "    resource_model_source {",
      "        type = \"file\"",
      "        config = {",
      "            format = \"resourcexml\"",
      "            # This path is interpreted on the Rundeck server.",
      "            file = \"/var/rundeck/projects/anvils/resources.xml\"",
      "        }",
      "    }",
      "}"
    ]
  },
  "rundeck-resource-public_key": {
    "description": "Defines public_key",
    "prefix": "tf-rundeck-resource-public_key",
    "body": [
      "resource \"rundeck_public_key\" \"anvils\" {",
      "    path = \"anvils/id_rsa.pub\"",
      "    key_material = \"ssh-rsa yada-yada-yada\"",
      "}"
    ]
  },
  "scaleway-data-bootscript": {
    "description": "Defines bootscript",
    "prefix": "tf-scaleway-data-bootscript",
    "body": [
      "data \"scaleway_bootscript\" \"debug\" {",
      "  architecture = \"arm\"",
      "  name_filter  = \"Rescue\"",
      "}"
    ]
  },
  "scaleway-data-image": {
    "description": "Defines image",
    "prefix": "tf-scaleway-data-image",
    "body": [
      "data \"scaleway_image\" \"ubuntu\" {",
      "  architecture = \"arm\"",
      "  name         = \"Ubuntu Precise\"",
      "}",
      "",
      "resource \"scaleway_server\" \"base\" {",
      "  name  = \"test\"",
      "  image = \"${data.scaleway_image.ubuntu.id}\"",
      "  type  = \"C1\"",
      "}"
    ]
  },
  "scaleway-resource-ip": {
    "description": "Defines ip",
    "prefix": "tf-scaleway-resource-ip",
    "body": [
      "resource \"scaleway_ip\" \"test_ip\" {}"
    ]
  },
  "scaleway-resource-security_group": {
    "description": "Defines security_group",
    "prefix": "tf-scaleway-resource-security_group",
    "body": [
      "resource \"scaleway_security_group\" \"test\" {",
      "  name                    = \"test\"",
      "  description             = \"test\"",
      "  enable_default_security = true",
      "}"
    ]
  },
  "scaleway-resource-security_group_rule": {
    "description": "Defines security_group_rule",
    "prefix": "tf-scaleway-resource-security_group_rule",
    "body": [
      "resource \"scaleway_security_group\" \"test\" {",
      "  name        = \"test\"",
      "  description = \"test\"",
      "}",
      "",
      "resource \"scaleway_security_group_rule\" \"smtp_drop_1\" {",
      "  security_group = \"${scaleway_security_group.test.id}\"",
      "",
      "  action    = \"accept\"",
      "  direction = \"inbound\"",
      "  ip_range  = \"0.0.0.0/0\"",
      "  protocol  = \"TCP\"",
      "  port      = 25",
      "}"
    ]
  },
  "scaleway-resource-server": {
    "description": "Defines server",
    "prefix": "tf-scaleway-resource-server",
    "body": [
      "resource \"scaleway_server\" \"test\" {",
      "  name  = \"test\"",
      "  image = \"5faef9cd-ea9b-4a63-9171-9e26bec03dbc\"",
      "  type  = \"VC1M\"",
      "",
      "  volume {",
      "    size_in_gb = 20",
      "    type       = \"l_ssd\"",
      "  }",
      "}"
    ]
  },
  "scaleway-resource-ssh_key": {
    "description": "Defines ssh_key",
    "prefix": "tf-scaleway-resource-ssh_key",
    "body": [
      "resource \"scaleway_ssh_key\" \"test\" {",
      "    key = \"ssh-rsa <some-key>\"",
      "}"
    ]
  },
  "scaleway-resource-token": {
    "description": "Defines token",
    "prefix": "tf-scaleway-resource-token",
    "body": [
      "resource \"scaleway_token\" \"karls_token\" {",
      "    expires = false",
      "    description = \"karls scaleway access: karl@company.com\"",
      "}"
    ]
  },
  "scaleway-resource-user_data": {
    "description": "Defines user_data",
    "prefix": "tf-scaleway-resource-user_data",
    "body": [
      "resource \"scaleway_server\" \"base\" {",
      "  name = \"test\"",
      "  # ubuntu 14.04",
      "  image = \"5faef9cd-ea9b-4a63-9171-9e26bec03dbc\"",
      "  type = \"C1\"",
      "  state = \"stopped\"",
      "}",
      "",
      "resource \"scaleway_user_data\" \"gcp\" {",
      "\tserver = \"${scaleway_server.base.id}\"",
      "\tkey = \"gcp_username\"",
      "\tvalue = \"supersecret\"",
      "}"
    ]
  },
  "scaleway-resource-volume": {
    "description": "Defines volume",
    "prefix": "tf-scaleway-resource-volume",
    "body": [
      "resource \"scaleway_server\" \"test\" {",
      "  name    = \"test\"",
      "  image   = \"aecaed73-51a5-4439-a127-6d8229847145\"",
      "  type    = \"C2S\"",
      "  volumes = [\"${scaleway_volume.test.id}\"]",
      "}",
      "",
      "resource \"scaleway_volume\" \"test\" {",
      "  name       = \"test\"",
      "  size_in_gb = 20",
      "  type       = \"l_ssd\"",
      "}"
    ]
  },
  "scaleway-resource-volume_attachment": {
    "description": "Defines volume_attachment",
    "prefix": "tf-scaleway-resource-volume_attachment",
    "body": [
      "resource \"scaleway_server\" \"test\" {",
      "  name  = \"test\"",
      "  image = \"aecaed73-51a5-4439-a127-6d8229847145\"",
      "  type  = \"C2S\"",
      "}",
      "",
      "resource \"scaleway_volume\" \"test\" {",
      "  name       = \"test\"",
      "  size_in_gb = 20",
      "  type       = \"l_ssd\"",
      "}",
      "",
      "resource \"scaleway_volume_attachment\" \"test\" {",
      "  server = \"${scaleway_server.test.id}\"",
      "  volume = \"${scaleway_volume.test.id}\"",
      "}"
    ]
  },
  "softlayer-resource-ssh_key": {
    "description": "Defines ssh_key",
    "prefix": "tf-softlayer-resource-ssh_key",
    "body": [
      "resource \"softlayer_ssh_key\" \"test_ssh_key\" {",
      "  name       = \"test_ssh_key_name\"",
      "  notes      = \"test_ssh_key_notes\"",
      "  public_key = \"ssh-rsa <rsa_public_key>\"",
      "}"
    ]
  },
  "softlayer-resource-virtual_guest": {
    "description": "Defines virtual_guest",
    "prefix": "tf-softlayer-resource-virtual_guest",
    "body": [
      "resource \"softlayer_virtual_guest\" \"twc_terraform_sample\" {",
      "  name                     = \"twc-terraform-sample-name\"",
      "  domain                   = \"bar.example.com\"",
      "  image                    = \"DEBIAN_7_64\"",
      "  region                   = \"ams01\"",
      "  public_network_speed     = 10",
      "  hourly_billing           = true",
      "  private_network_only     = false",
      "  cpu                      = 1",
      "  ram                      = 1024",
      "  disks                    = [25, 10, 20]",
      "  user_data                = \"{\\\"value\\\":\\\"newvalue\\\"}\"",
      "  dedicated_acct_host_only = true",
      "  local_disk               = false",
      "  frontend_vlan_id         = 1085155",
      "  backend_vlan_id          = 1085157",
      "}"
    ]
  },
  "spotinst-resource-aws_group": {
    "description": "Defines aws_group",
    "prefix": "tf-spotinst-resource-aws_group",
    "body": [
      "# Create an AWS group",
      "resource \"spotinst_aws_group\" \"workers\" {",
      "  name = \"workers-group\"",
      "  description = \"created by Terraform\"",
      "  product = \"Linux/UNIX\"",
      "",
      "  capacity {",
      "    target = 50",
      "    minimum = 25",
      "    maximum = 100",
      "  }",
      "",
      "  strategy {",
      "    risk = 100",
      "  }",
      "",
      "  scheduled_task {",
      "    task_type = \"scale\"",
      "    cron_expression = \"0 5 * * 0-4\"",
      "    scale_target_capacity = 80",
      "  }",
      "",
      "  scheduled_task {",
      "    task_type = \"backup_ami\"",
      "    frequency = \"hourly\"",
      "  }",
      "",
      "  instance_types {",
      "    ondemand = \"c3.large\"",
      "    spot = [\"m3.large\", \"m4.large\", \"c3.large\", \"c4.large\"]",
      "  }",
      "",
      "  availability_zone {",
      "    name = \"us-west-2b\"",
      "    subnet_id = \"subnet-7bbbf51e\"",
      "  }",
      "",
      "  launch_specification {",
      "    monitoring = false",
      "    image_id = \"ami-f0091d91\"",
      "    key_pair = \"pemfile\"",
      "    security_group_ids = [\"default\", \"allow-ssh\"]",
      "  }",
      "",
      "  tags {",
      "    foo = \"bar\"",
      "    bar = \"baz\"",
      "  }",
      "",
      "  scaling_up_policy {",
      "    policy_name = \"Scaling Policy 1\"",
      "    metric_name = \"CPUUtilization\"",
      "    statistic = \"average\"",
      "    unit = \"percent\"",
      "    threshold = 80",
      "    adjustment = 1",
      "    namespace = \"AWS/EC2\"",
      "    period = 300",
      "    evaluation_periods = 2",
      "    cooldown = 300",
      "  }",
      "",
      "  scaling_down_policy {",
      "    policy_name = \"Scaling Policy 2\"",
      "    metric_name = \"CPUUtilization\"",
      "    statistic = \"average\"",
      "    unit = \"percent\"",
      "    threshold = 40",
      "    adjustment = 1",
      "    namespace = \"AWS/EC2\"",
      "    period = 300",
      "    evaluation_periods = 2",
      "    cooldown = 300",
      "  }"
    ]
  },
  "spotinst-resource-healthcheck": {
    "description": "Defines healthcheck",
    "prefix": "tf-spotinst-resource-healthcheck",
    "body": [
      "resource \"spotinst_healthcheck\" \"foo\" {",
      "\tname = \"hc-foo\"",
      "\tresource_id = \"sig-foo\"",
      "\tcheck {",
      "\t\tprotocol = \"http\"",
      "\t\tendpoint = \"http://endpoint.com\"",
      "\t\tport = 1337",
      "\t\tinterval = 10",
      "\t\ttimeout = 10",
      "\t}",
      "\tthreshold {",
      "\t\thealthy = 1",
      "\t\tunhealthy = 1",
      "\t}",
      "\tproxy {",
      "\t\taddr = \"http://proxy.com\"",
      "\t\tport = 80",
      "\t}",
      "}"
    ]
  },
  "spotinst-resource-subscription": {
    "description": "Defines subscription",
    "prefix": "tf-spotinst-resource-subscription",
    "body": [
      "resource \"spotinst_subscription\" \"foo\" {",
      "\tresource_id = \"sig-foo\"",
      "\tevent_type = \"aws_ec2_instance_launch\"",
      "\tprotocol = \"http\"",
      "\tendpoint = \"http://endpoint.com\"",
      "\tformat = {",
      "\t\tinstance_id = \"%instance-id%\"",
      "\t\ttags = \"foo,baz,baz\"",
      "\t}",
      "}"
    ]
  },
  "statuscake-resource-test": {
    "description": "Defines test",
    "prefix": "tf-statuscake-resource-test",
    "body": [
      "resource \"statuscake_test\" \"google\" {",
      "  website_name = \"google.com\"",
      "  website_url  = \"www.google.com\"",
      "  test_type    = \"HTTP\"",
      "  check_rate   = 300",
      "  contact_id   = 12345",
      "}"
    ]
  },
  "template-data-cloudinit_config": {
    "description": "Defines cloudinit_config",
    "prefix": "tf-template-data-cloudinit_config",
    "body": [
      "# Render a part using a `template_file`",
      "data \"template_file\" \"script\" {",
      "  template = \"${file(\"${path.module}/init.tpl\")}\"",
      "",
      "  vars {",
      "    consul_address = \"${aws_instance.consul.private_ip}\"",
      "  }",
      "}",
      "",
      "# Render a multi-part cloudinit config making use of the part",
      "# above, and other source files",
      "data \"template_cloudinit_config\" \"config\" {",
      "  gzip          = true",
      "  base64_encode = true",
      "",
      "  # Setup hello world script to be called by the cloud-config",
      "  part {",
      "    filename     = \"init.cfg\"",
      "    content_type = \"text/cloud-config\"",
      "    content      = \"${data.template_file.script.rendered}\"",
      "  }",
      "",
      "  part {",
      "    content_type = \"text/x-shellscript\"",
      "    content      = \"baz\"",
      "  }",
      "",
      "  part {",
      "    content_type = \"text/x-shellscript\"",
      "    content      = \"ffbaz\"",
      "  }",
      "}",
      "",
      "# Start an AWS instance with the cloudinit config as user data",
      "resource \"aws_instance\" \"web\" {",
      "  ami           = \"ami-d05e75b8\"",
      "  instance_type = \"t2.micro\"",
      "  user_data     = \"${data.template_cloudinit_config.config.rendered}\"",
      "}"
    ]
  },
  "template-data-file": {
    "description": "Defines file",
    "prefix": "tf-template-data-file",
    "body": [
      "data \"template_file\" \"init\" {",
      "  template = \"${file(\"${path.module}/init.tpl\")}\"",
      "",
      "  vars {",
      "    consul_address = \"${aws_instance.consul.private_ip}\"",
      "  }",
      "}"
    ]
  },
  "template-resource-dir": {
    "description": "Defines dir",
    "prefix": "tf-template-resource-dir",
    "body": [
      "resource \"template_dir\" \"config\" {",
      "  source_dir      = \"${path.module}/instance_config_templates\"",
      "  destination_dir = \"${path.cwd}/instance_config\"",
      "  ",
      "  vars {",
      "    consul_addr = \"${var.consul_addr}\"",
      "  }",
      "}",
      "",
      "resource \"aws_instance\" \"server\" {",
      "  ami           = \"${var.server_ami}\"",
      "  instance_type = \"t2.micro\"",
      "",
      "  connection {",
      "    # ...connection configuration...",
      "  }",
      "",
      "  provisioner \"file\" {",
      "    # Referencing the template_dir resource ensures that it will be",
      "    # created or updated before this aws_instance resource is provisioned.",
      "    source      = \"${template_dir.config.destination_dir}\"",
      "    destination = \"/etc/myapp\"",
      "  }",
      "}",
      "",
      "variable \"consul_addr\" {}",
      "",
      "variable \"server_ami\" {}"
    ]
  },
  "terraform-data-remote_state": {
    "description": "Defines remote_state",
    "prefix": "tf-terraform-data-remote_state",
    "body": [
      "data \"terraform_remote_state\" \"vpc\" {",
      "  backend = \"atlas\"",
      "  config {",
      "    name = \"hashicorp/vpc-prod\"",
      "  }",
      "}",
      "",
      "resource \"aws_instance\" \"foo\" {",
      "  # ...",
      "  subnet_id = \"${data.terraform_remote_state.vpc.subnet_id}\"",
      "}"
    ]
  },
  "tf-aws": {
    "prefix": "tf-aws",
    "body": [
      "/*",
      "# tf_aws_${1:module_name}",
      "",
      "A terraform module to ${2:describe a thing}",
      "*/",
      "",
      "provider \"aws\" {",
      "  version = \">~ ${3:1.6.0}\"",
      "}",
      ""
    ],
    "description": "The beginnings of a main.tf"
  },
  "tf-conditional": {
    "prefix": "tf-conditional",
    "body": [
      "${var.${1:if_this} == \"${2:equals}\" ? ${3:then} : ${4:else}}"
    ],
    "description": "A terraform conditional."
  },
  "tf-locals": {
    "prefix": "tf-locals",
    "body": [
      "locals {",
      "  ${1:key}  = \"${2:value}\"",
      "}",
      ""
    ],
    "description": "An empty definition of locals."
  },
  "tf-out": {
    "prefix": "tf-out",
    "body": [
      "output \"${1:output}\" {",
      "  description = \"${2:description}\"",
      "  value       = \"${${3:value}}\"",
      "}",
      ""
    ],
    "description": "A terraform output with a description."
  },
  "tf-var": {
    "prefix": "tf-var",
    "body": [
      "variable \"${1:variable_name}\" {",
      "  description = \"${2:description}\"",
      "  default     = \"${3:default}\"",
      "}",
      ""
    ],
    "description": "A terraform variable with a default and description."
  },
  "tls-data-public_key": {
    "description": "Defines public_key",
    "prefix": "tf-tls-data-public_key",
    "body": [
      "data \"tls_public_key\" \"example\" {",
      "  private_key_pem = \"${file(\"~/.ssh/id_rsa\")}\"",
      "}"
    ]
  },
  "tls-resource-cert_request": {
    "description": "Defines cert_request",
    "prefix": "tf-tls-resource-cert_request",
    "body": [
      "resource \"tls_cert_request\" \"example\" {",
      "  key_algorithm   = \"ECDSA\"",
      "  private_key_pem = \"${file(\"private_key.pem\")}\"",
      "",
      "  subject {",
      "    common_name  = \"example.com\"",
      "    organization = \"ACME Examples, Inc\"",
      "  }",
      "}"
    ]
  },
  "tls-resource-locally_signed_cert": {
    "description": "Defines locally_signed_cert",
    "prefix": "tf-tls-resource-locally_signed_cert",
    "body": [
      "resource \"tls_locally_signed_cert\" \"example\" {",
      "  cert_request_pem   = \"${file(\"cert_request.pem\")}\"",
      "  ca_key_algorithm   = \"ECDSA\"",
      "  ca_private_key_pem = \"${file(\"ca_private_key.pem\")}\"",
      "  ca_cert_pem        = \"${file(\"ca_cert.pem\")}\"",
      "",
      "  validity_period_hours = 12",
      "",
      "  allowed_uses = [",
      "    \"key_encipherment\",",
      "    \"digital_signature\",",
      "    \"server_auth\",",
      "  ]",
      "}"
    ]
  },
  "tls-resource-private_key": {
    "description": "Defines private_key",
    "prefix": "tf-tls-resource-private_key",
    "body": [
      "resource \"tls_private_key\" \"example\" {",
      "  algorithm   = \"ECDSA\"",
      "  ecdsa_curve = \"P384\"",
      "}"
    ]
  },
  "tls-resource-self_signed_cert": {
    "description": "Defines self_signed_cert",
    "prefix": "tf-tls-resource-self_signed_cert",
    "body": [
      "resource \"tls_self_signed_cert\" \"example\" {",
      "  key_algorithm   = \"ECDSA\"",
      "  private_key_pem = \"${file(\\\"private_key.pem\\\")}\"",
      "",
      "  subject {",
      "    common_name  = \"example.com\"",
      "    organization = \"ACME Examples, Inc\"",
      "  }",
      "",
      "  validity_period_hours = 12",
      "",
      "  allowed_uses = [",
      "    \"key_encipherment\",",
      "    \"digital_signature\",",
      "    \"server_auth\",",
      "  ]",
      "}"
    ]
  },
  "triton-data-triton_account": {
    "description": "Defines triton_account",
    "prefix": "tf-triton-data-triton_account",
    "body": [
      "# Declare the data source.",
      "data \"triton_account\" \"main\" {}",
      "",
      "# Access unique Account ID using output from the data source.",
      "output \"account_id\" {",
      "  value = \"${data.triton_account.main.id}\"",
      "}"
    ]
  },
  "triton-data-triton_datacenter": {
    "description": "Defines triton_datacenter",
    "prefix": "tf-triton-data-triton_datacenter",
    "body": [
      "# Declare the data source.",
      "data \"triton_datacenter\" \"current\" {}",
      "",
      "# Access current endpoint URL using output from the data source.",
      "output \"endpoint\" {",
      "  value = \"${data.triton_datacenter.current.endpoint}\"",
      "}"
    ]
  },
  "triton-data-triton_fabric_network": {
    "description": "Defines triton_fabric_network",
    "prefix": "tf-triton-data-triton_fabric_network",
    "body": [
      "# Declare the data source to retrieve Fabric VLAN details.",
      "data \"triton_fabric_vlan\" \"private\" {",
      "  name = \"Private-VLAN-Production\"",
      "}",
      "",
      "# Declare the data source to retrieve Fabric Network details.",
      "data \"triton_fabric_network\" \"private\" {",
      "  name     = \"Private-Network-Production\"",
      "  vland_id = \"${data.triton_fabric_vlan.private.vlan_id}\"",
      "}",
      "",
      "# Access subnet CIDR using output from the data source.",
      "output \"private_network_cidr\" {",
      "  value = \"${data.triton_fabric_network.private.subnet}\"",
      "}"
    ]
  },
  "triton-data-triton_fabric_vlan": {
    "description": "Defines triton_fabric_vlan",
    "prefix": "tf-triton-data-triton_fabric_vlan",
    "body": [
      "# Declare the data source.",
      "data \"triton_fabric_vlan\" \"public\" {",
      "  name = \"Public-VLAN-Production\"",
      "}",
      "",
      "# Access unique VLAN ID using output from the data source.",
      "output \"public_vlan_id\" {",
      "  value = \"${data.triton_fabric_vlan.public.vlan_id}\"",
      "}"
    ]
  },
  "triton-data-triton_image": {
    "description": "Defines triton_image",
    "prefix": "tf-triton-data-triton_image",
    "body": [
      "data \"triton_image\" \"base\" {",
      "  name    = \"base-64-lts\"",
      "  version = \"16.4.1\"",
      "}",
      "",
      "output \"image_id\" {",
      "  value = \"${data.triton_image.base.id}\"",
      "}"
    ]
  },
  "triton-data-triton_network": {
    "description": "Defines triton_network",
    "prefix": "tf-triton-data-triton_network",
    "body": [
      "# Declare the data source.",
      "data \"triton_network\" \"private\" {",
      "  name = \"Joyent-SDC-Private\"",
      "}",
      "",
      "# Access unique Network ID using output from the data source. ",
      "output \"private_network_id\" {",
      "  value = \"${data.triton_network.private.id}\"",
      "}"
    ]
  },
  "triton-resource-triton_fabric": {
    "description": "Defines triton_fabric",
    "prefix": "tf-triton-resource-triton_fabric",
    "body": [
      "resource \"triton_fabric\" \"dmz\" {",
      "  vlan_id            = 100",
      "  name               = \"dmz\"",
      "  description        = \"DMZ Network\"",
      "  subnet             = \"10.60.1.0/24\"",
      "  provision_start_ip = \"10.60.1.10\"",
      "  provision_end_ip   = \"10.60.1.240\"",
      "  gateway            = \"10.60.1.1\"",
      "  resolvers          = [\"8.8.8.8\", \"8.8.4.4\"]",
      "",
      "  internet_nat = true",
      "}"
    ]
  },
  "triton-resource-triton_firewall_rule": {
    "description": "Defines triton_firewall_rule",
    "prefix": "tf-triton-resource-triton_firewall_rule",
    "body": [
      "resource \"triton_firewall_rule\" \"www\" {",
      "  description = \"Allow web traffic on ports tcp/80 and tcp/443 to machines with the 'www' tag from any source.\"",
      "  rule        = \"FROM any TO tag \\\"www\\\" ALLOW tcp (PORT 80 AND PORT 443)\"",
      "  enabled     = true",
      "}"
    ]
  },
  "triton-resource-triton_instance_template": {
    "description": "Defines triton_instance_template",
    "prefix": "tf-triton-resource-triton_instance_template",
    "body": [
      "data \"triton_image\" \"base\" {",
      "  name    = \"base-64-lts\"",
      "  version = \"16.4.1\"",
      "}",
      "",
      "data \"triton_network\" \"private\" {",
      "  name = \"Joyent-SDC-Private\"",
      "}",
      "",
      "resource \"triton_instance_template\" \"base\" {",
      "  template_name    = \"Base template\"",
      "  image            = \"${data.triton_image.base.id}\"",
      "  package          = \"g4-highcpu-128M\"",
      "  ",
      "  firewall_enabled = false",
      "  ",
      "  networks         = [\"${data.triton_network.private.id}\"]",
      "  ",
      "  tags {",
      "    hello = \"world\"",
      "    role  = \"database\"",
      "  }",
      "}"
    ]
  },
  "triton-resource-triton_key": {
    "description": "Defines triton_key",
    "prefix": "tf-triton-resource-triton_key",
    "body": [
      "resource \"triton_key\" \"example\" {",
      "  name = \"Example Key\"",
      "  key  = \"${file(\"keys/id_rsa\")}\"",
      "}"
    ]
  },
  "triton-resource-triton_machine": {
    "description": "Defines triton_machine",
    "prefix": "tf-triton-resource-triton_machine",
    "body": [
      "resource \"triton_machine\" \"test-smartos\" {",
      "  name    = \"test-smartos\"",
      "  package = \"g3-standard-0.25-smartos\"",
      "  image   = \"842e6fa6-6e9b-11e5-8402-1b490459e334\"",
      "",
      "  tags {",
      "    hello = \"world\"",
      "    role  = \"database\"",
      "  }",
      "",
      "  cns {",
      "    services = [\"web\", \"frontend\"]",
      "  }",
      "",
      "  metadata {",
      "    hello = \"again\"",
      "  }",
      "}"
    ]
  },
  "triton-resource-triton_service_group": {
    "description": "Defines triton_service_group",
    "prefix": "tf-triton-resource-triton_service_group",
    "body": [
      "resource \"triton_service_group\" \"web\" {",
      "  group_name = \"web_group\"",
      "  template   = \"${triton_instance_template.base.id}\"",
      "  capacity   = 3",
      "}"
    ]
  },
  "triton-resource-triton_snapshot": {
    "description": "Defines triton_snapshot",
    "prefix": "tf-triton-resource-triton_snapshot",
    "body": [
      "data \"triton_image\" \"ubuntu1604\" {",
      "  name    = \"ubuntu-16.04\"",
      "  version = \"20170403\"",
      "}",
      "",
      "resource \"triton_machine\" \"test\" {",
      "  image   = \"${data.triton_image.ubuntu1604.id}\"",
      "  package = \"g4-highcpu-128M\"",
      "}",
      "",
      "resource \"triton_snapshot\" \"test\" {",
      "  name       = \"my-snapshot\"",
      "  machine_id = \"${triton_machine.test.id}\"",
      "}"
    ]
  },
  "triton-resource-triton_vlan": {
    "description": "Defines triton_vlan",
    "prefix": "tf-triton-resource-triton_vlan",
    "body": [
      "resource \"triton_vlan\" \"dmz\" {",
      "  vlan_id     = 100",
      "  name        = \"dmz\"",
      "  description = \"DMZ VLAN\"",
      "}"
    ]
  },
  "ultradns-resource-dirpool": {
    "description": "Defines dirpool",
    "prefix": "tf-ultradns-resource-dirpool",
    "body": [
      "# Create a Directional Controller pool",
      "resource \"ultradns_dirpool\" \"pool\" {",
      "  zone        = \"${var.ultradns_domain}\"",
      "  name        = \"terraform-dirpool\"",
      "  ttl         = 300",
      "  description = \"Minimal DirPool\"",
      "",
      "  rdata {",
      "    host = \"192.168.0.10\"",
      "  }",
      "}"
    ]
  },
  "ultradns-resource-probe_http": {
    "description": "Defines probe_http",
    "prefix": "tf-ultradns-resource-probe_http",
    "body": [
      "resource \"ultradns_probe_http\" \"probe\" {",
      "  zone        = \"${ultradns_tcpool.pool.zone}\"",
      "  name        = \"${ultradns_tcpool.pool.name}\"",
      "  pool_record = \"10.2.1.1\"",
      "",
      "  agents = [\"DALLAS\", \"AMSTERDAM\"]",
      "",
      "  interval  = \"ONE_MINUTE\"",
      "  threshold = 1",
      "",
      "  http_probe {",
      "    transaction {",
      "      method           = \"POST\"",
      "      url              = \"http://localhost/index\"",
      "      transmitted_data = \"{}\"",
      "      follow_redirects = true",
      "",
      "      limit {",
      "        name = \"run\"",
      "",
      "        warning  = 1",
      "        critical = 2",
      "        fail     = 3",
      "      }",
      "",
      "      limit {",
      "        name = \"avgConnect\"",
      "",
      "        warning  = 4",
      "        critical = 5",
      "        fail     = 6",
      "      }",
      "",
      "      limit {",
      "        name = \"avgRun\"",
      "",
      "        warning  = 7",
      "        critical = 8",
      "        fail     = 9",
      "      }",
      "",
      "      limit {",
      "        name = \"connect\"",
      "",
      "        warning  = 10",
      "        critical = 11",
      "        fail     = 12",
      "      }",
      "    }",
      "",
      "    total_limits {",
      "      warning  = 13",
      "      critical = 14",
      "      fail     = 15",
      "    }",
      "  }",
      "}"
    ]
  },
  "ultradns-resource-probe_ping": {
    "description": "Defines probe_ping",
    "prefix": "tf-ultradns-resource-probe_ping",
    "body": [
      "resource \"ultradns_probe_ping\" \"probe\" {",
      "  zone        = \"${ultradns_tcpool.pool.zone}\"",
      "  name        = \"${ultradns_tcpool.pool.name}\"",
      "  pool_record = \"10.3.0.1\"",
      "",
      "  agents = [\"DALLAS\", \"AMSTERDAM\"]",
      "",
      "  interval  = \"ONE_MINUTE\"",
      "  threshold = 1",
      "",
      "  ping_probe {",
      "    packets     = 15",
      "    packet_size = 56",
      "",
      "    limit {",
      "      name     = \"lossPercent\"",
      "      warning  = 1",
      "      critical = 2",
      "      fail     = 3",
      "    }",
      "",
      "    limit {",
      "      name     = \"total\"",
      "      warning  = 2",
      "      critical = 3",
      "      fail     = 4",
      "    }",
      "  }",
      "}"
    ]
  },
  "ultradns-resource-rdpool": {
    "description": "Defines rdpool",
    "prefix": "tf-ultradns-resource-rdpool",
    "body": [
      "# Create a Resource Distribution pool",
      "",
      "resource \"ultradns_rdpool\" \"pool\" {",
      "  zone        = \"${var.ultradns_domain}\"",
      "  name        = \"terraform-rdpool\"",
      "  ttl         = 600",
      "  description = \"Example RD Pool\"",
      "  order       = \"ROUND_ROBIN\"",
      "  rdata       = [ \"192.168.0.10\", \"192.168.0.11\" ]",
      "}"
    ]
  },
  "ultradns-resource-record": {
    "description": "Defines record",
    "prefix": "tf-ultradns-resource-record",
    "body": [
      "# Add a record to the domain",
      "resource \"ultradns_record\" \"foobar\" {",
      "  zone  = \"${var.ultradns_domain}\"",
      "  name  = \"terraform\"",
      "  rdata = [\"192.168.0.11\"]",
      "  type  = \"A\"",
      "  ttl   = 3600",
      "}"
    ]
  },
  "ultradns-resource-tcpool": {
    "description": "Defines tcpool",
    "prefix": "tf-ultradns-resource-tcpool",
    "body": [
      "# Create a Traffic Controller pool",
      "resource \"ultradns_tcpool\" \"pool\" {",
      "  zone        = \"${var.ultradns_domain}\"",
      "  name        = \"terraform-tcpool\"",
      "  ttl         = 300",
      "  description = \"Minimal TC Pool\"",
      "",
      "  rdata {",
      "    host = \"192.168.0.10\"",
      "  }",
      "}"
    ]
  },
  "vault-data-approle_auth_backend_role_id": {
    "description": "Defines approle_auth_backend_role_id",
    "prefix": "tf-vault-data-approle_auth_backend_role_id",
    "body": [
      "data \"vault_approle_auth_backend_role_id\" \"role\" {",
      "  backend   = \"my-approle-backend\"",
      "  role_name = \"my-role\"",
      "}",
      "",
      "output \"role-id\" {",
      "  value = \"${data.vault_approle_auth_backend_role_id.role.role_id}\"",
      "}"
    ]
  },
  "vault-data-aws_access_credentials": {
    "description": "Defines aws_access_credentials",
    "prefix": "tf-vault-data-aws_access_credentials",
    "body": [
      "resource \"vault_aws_secret_backend\" \"aws\" {",
      "  access_key = \"AKIA.....\"",
      "  secret_key = \"SECRETKEYFROMAWS\"",
      "}",
      "",
      "resource \"vault_aws_secret_backend_role\" \"role\" {",
      "  backend = \"${vault_aws_secret_backend.aws.path}\"",
      "  name    = \"test\"",
      "",
      "  policy = <<EOT",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Action\": \"iam:*\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOT",
      "}",
      "",
      "# generally, these blocks would be in a different module",
      "data \"vault_aws_access_credentials\" \"creds\" {",
      "  backend = \"${vault_aws_secret_backend.aws.path}\"",
      "  role    = \"${vault_aws_secret_backend_role.role.name}\"",
      "}",
      "",
      "provider \"aws\" {",
      "  access_key = \"${data.vault_aws_access_credentials.creds.access_key}\"",
      "  secret_key = \"${data.vault_aws_access_credentials.creds.secret_key}\"",
      "}"
    ]
  },
  "vault-data-generic_secret": {
    "description": "Defines generic_secret",
    "prefix": "tf-vault-data-generic_secret",
    "body": [
      "data \"vault_generic_secret\" \"rundeck_auth\" {",
      "  path = \"secret/rundeck_auth\"",
      "}",
      "",
      "# Rundeck Provider, for example",
      "provider \"rundeck\" {",
      "  url        = \"http://rundeck.example.com/\"",
      "  auth_token = \"${data.vault_generic_secret.rundeck_auth.data[\"auth_token\"]}\"",
      "}"
    ]
  },
  "vault-resource-approle_auth_backend_login": {
    "description": "Defines approle_auth_backend_login",
    "prefix": "tf-vault-resource-approle_auth_backend_login",
    "body": [
      "resource \"vault_auth_backend\" \"approle\" {",
      "  type = \"approle\"",
      "}",
      "",
      "resource \"vault_approle_auth_backend_role\" \"example\" {",
      "  backend   = \"${vault_auth_backend.approle.path}\"",
      "  role_name = \"test-role\"",
      "  policies  = [\"default\", \"dev\", \"prod\"]",
      "}",
      "",
      "resource \"vault_approle_auth_backend_role_secret_id\" \"id\" {",
      "  backend   = \"${vault_auth_backend.approle.path}\"",
      "  role_name = \"${vault_approle_auth_backend_role.example.role_name}\"",
      "}",
      "",
      "resource \"vault_approle_auth_backend_role_login\" \"login\" {",
      "  backend   = \"${vault_auth_backend.approle.path}\"",
      "  role_id   = \"${vault_approle_auth_backend_role.example.role_id}\"",
      "  secret_id = \"${vault_approle_auth_backend_role_secret_id.id.secret_id}\"",
      "}"
    ]
  },
  "vault-resource-approle_auth_backend_role": {
    "description": "Defines approle_auth_backend_role",
    "prefix": "tf-vault-resource-approle_auth_backend_role",
    "body": [
      "resource \"vault_auth_backend\" \"approle\" {",
      "  type = \"approle\"",
      "}",
      "",
      "resource \"vault_approle_auth_backend_role\" \"example\" {",
      "  backend   = \"${vault_auth_backend.approle.path}\"",
      "  role_name = \"test-role\"",
      "  policies  = [\"default\", \"dev\", \"prod\"]",
      "}"
    ]
  },
  "vault-resource-approle_auth_backend_role_secret_id": {
    "description": "Defines approle_auth_backend_role_secret_id",
    "prefix": "tf-vault-resource-approle_auth_backend_role_secret_id",
    "body": [
      "resource \"vault_auth_backend\" \"approle\" {",
      "  type = \"approle\"",
      "}",
      "",
      "resource \"vault_approle_auth_backend_role\" \"example\" {",
      "  backend   = \"${vault_auth_backend.approle.path}\"",
      "  role_name = \"test-role\"",
      "  policies  = [\"default\", \"dev\", \"prod\"]",
      "}",
      "",
      "resource \"vault_approle_auth_backend_role_secret_id\" \"id\" {",
      "  backend   = \"${vault_auth_backend.approle.path}\"",
      "  role_name = \"${vault_approle_auth_backend_role.example.role_name}\"",
      "",
      "  metadata = <<EOT",
      "{",
      "  \"hello\": \"world\"",
      "}",
      "EOT",
      "}"
    ]
  },
  "vault-resource-auth_backend": {
    "description": "Defines auth_backend",
    "prefix": "tf-vault-resource-auth_backend",
    "body": [
      "resource \"vault_auth_backend\" \"example\" {",
      "  type = \"github\"",
      "}"
    ]
  },
  "vault-resource-aws_auth_backend_cert": {
    "description": "Defines aws_auth_backend_cert",
    "prefix": "tf-vault-resource-aws_auth_backend_cert",
    "body": [
      "resource \"vault_auth_backend\" \"aws\" {",
      "  type = \"aws\"",
      "}",
      "",
      "resource \"vault_aws_auth_backend_cert\" \"cert\" {",
      "  backend         = \"${vault_auth_backend.aws.path}\"",
      "  cert_name       = \"my-cert\"",
      "  aws_public_cert = \"${file(\"${path.module}/aws_public_key.crt})\"",
      "  type            = \"pkcs7\"",
      "}"
    ]
  },
  "vault-resource-aws_auth_backend_client": {
    "description": "Defines aws_auth_backend_client",
    "prefix": "tf-vault-resource-aws_auth_backend_client",
    "body": [
      "resource \"vault_auth_backend\" \"example\" {",
      "  type = \"aws\"",
      "}",
      "",
      "resource \"vault_aws_auth_backend_client\" \"example\" {",
      "  backend = \"${vault_auth_backend.example.path}\"",
      "  access_key = \"INSERT_AWS_ACCESS_KEY\"",
      "  secret_key = \"INSERT_AWS_SECRET_KEY\"",
      "}"
    ]
  },
  "vault-resource-aws_auth_backend_identity_whitelist": {
    "description": "Defines aws_auth_backend_identity_whitelist",
    "prefix": "tf-vault-resource-aws_auth_backend_identity_whitelist",
    "body": [
      "resource \"vault_auth_backend\" \"example\" {",
      "  type = \"aws\"",
      "}",
      "",
      "resource \"vault_aws_auth_backend_identity_whitelist\" \"example\" {",
      "  backend       = \"${vault_auth_backend.example.path}\"",
      "  safety_buffer = 3600",
      "}"
    ]
  },
  "vault-resource-aws_auth_backend_login": {
    "description": "Defines aws_auth_backend_login",
    "prefix": "tf-vault-resource-aws_auth_backend_login",
    "body": [
      "resource \"vault_auth_backend\" \"aws\" {",
      "  type = \"aws\"",
      "}",
      "",
      "resource \"vault_aws_auth_backend_client\" \"example\" {",
      "  backend    = \"${vault_auth_backend.aws.path}\"",
      "  access_key = \"123456789012\"",
      "  secret_key = \"AWSSECRETKEYGOESHERE\"",
      "}",
      "",
      "resource \"vault_aws_auth_backend_role\" \"example\" {",
      "  backend                        = \"${vault_auth_backend.aws.path}\"",
      "  role                           = \"test-role\"",
      "  auth_type                      = \"ec2\"",
      "  bound_ami_id                   = \"ami-8c1be5f6\"",
      "  bound_account_id               = \"123456789012\"",
      "  bound_vpc_id                   = \"vpc-b61106d4\"",
      "  bound_subnet_id                = \"vpc-133128f1\"",
      "  bound_iam_instance_profile_arn = \"arn:aws:iam::123456789012:instance-profile/MyProfile\"",
      "  ttl                            = 60",
      "  max_ttl                        = 120",
      "  policies                       = [\"default\", \"dev\", \"prod\"]",
      "",
      "  depends_on                     = [\"vault_aws_auth_backend_client.example\"]",
      "}",
      "",
      "resource \"vault_aws_auth_backend_login\" \"example\" {",
      "  backend = \"${vault_auth_backend.example.path}\"",
      "  role = \"${vault_aws_auth_backend_role.example.role}\"",
      "  identity = \"BASE64ENCODEDIDENTITYDOCUMENT\"",
      "  signature = \"BASE64ENCODEDSHA256IDENTITYDOCUMENTSIGNATURE\"",
      "}"
    ]
  },
  "vault-resource-aws_auth_backend_role": {
    "description": "Defines aws_auth_backend_role",
    "prefix": "tf-vault-resource-aws_auth_backend_role",
    "body": [
      "resource \"vault_auth_backend\" \"aws\" {",
      "  type = \"aws\"",
      "}",
      "",
      "resource \"vault_aws_auth_backend_role\" \"example\" {",
      "  backend                        = \"${vault_auth_backend.aws.path}\"",
      "  role                           = \"test-role\"",
      "  auth_type                      = \"iam\"",
      "  bound_ami_id                   = \"ami-8c1be5f6\"",
      "  bound_account_id               = \"123456789012\"",
      "  bound_vpc_id                   = \"vpc-b61106d4\"",
      "  bound_subnet_id                = \"vpc-133128f1\"",
      "  bound_iam_role_arn             = \"arn:aws:iam::123456789012:role/MyRole\"",
      "  bound_iam_instance_profile_arn = \"arn:aws:iam::123456789012:instance-profile/MyProfile\"",
      "  inferred_entity_type           = \"ec2_instance\"",
      "  inferred_aws_region            = \"us-east-1\"",
      "  ttl                            = 60",
      "  max_ttl                        = 120",
      "  policies                       = [\"default\", \"dev\", \"prod\"]",
      "}"
    ]
  },
  "vault-resource-aws_auth_backend_role_tag": {
    "description": "Defines aws_auth_backend_role_tag",
    "prefix": "tf-vault-resource-aws_auth_backend_role_tag",
    "body": [
      "resource \"vault_auth_backend\" \"aws\" {",
      "  path = \"%s\"",
      "  type = \"aws\"",
      "}",
      "",
      "resource \"vault_aws_auth_backend_role\" \"role\" {",
      "  backend          = \"${vault_auth_backend.aws.path}\"",
      "  role             = \"%s\"",
      "  auth_type        = \"ec2\"",
      "  bound_account_id = \"123456789012\"",
      "  policies         = [\"dev\", \"prod\", \"qa\", \"test\"]",
      "  role_tag         = \"VaultRoleTag\"",
      "}",
      "",
      "resource \"vault_aws_auth_backend_role_tag\" \"test\" {",
      "  backend     = \"${vault_auth_backend.aws.path}\"",
      "  role        = \"${vault_aws_auth_backend_role.role.role}\"",
      "  policies    = [\"prod\", \"dev\", \"test\"]",
      "  max_ttl     = \"1h\"",
      "  instance_id = \"i-1234567\"",
      "}"
    ]
  },
  "vault-resource-aws_auth_backend_sts_role": {
    "description": "Defines aws_auth_backend_sts_role",
    "prefix": "tf-vault-resource-aws_auth_backend_sts_role",
    "body": [
      "resource \"vault_auth_backend\" \"aws\" {",
      "  type = \"aws\"",
      "}",
      "",
      "resource \"vault_aws_auth_backend_sts_role\" \"role\" {",
      "  backend    = \"${vault_auth_backend.aws.path}\"",
      "  account_id = \"1234567890\"",
      "  sts_role   = \"arn:aws:iam::1234567890:role/my-role\"",
      "}"
    ]
  },
  "vault-resource-aws_secret_backend": {
    "description": "Defines aws_secret_backend",
    "prefix": "tf-vault-resource-aws_secret_backend",
    "body": [
      "resource \"vault_aws_secret_backend\" \"aws\" {",
      "  access_key = \"AKIA.....\"",
      "  secret_key = \"AWS secret key\"",
      "}"
    ]
  },
  "vault-resource-aws_secret_backend_role": {
    "description": "Defines aws_secret_backend_role",
    "prefix": "tf-vault-resource-aws_secret_backend_role",
    "body": [
      "resource \"vault_aws_secret_backend\" \"aws\" {",
      "  access_key = \"AKIA.....\"",
      "  secret_key = \"AWS secret key\"",
      "}",
      "",
      "resource \"vault_aws_secret_backend_role\" \"role\" {",
      "  backend = \"${vault_aws_secret_backend.aws.path}\"",
      "  name    = \"deploy\"",
      "",
      "  policy = <<EOT",
      "{",
      "  \"Version\": \"2012-10-17\",",
      "  \"Statement\": [",
      "    {",
      "      \"Effect\": \"Allow\",",
      "      \"Action\": \"iam:*\",",
      "      \"Resource\": \"*\"",
      "    }",
      "  ]",
      "}",
      "EOT",
      "}"
    ]
  },
  "vault-resource-database_secret_backend_connection": {
    "description": "Defines database_secret_backend_connection",
    "prefix": "tf-vault-resource-database_secret_backend_connection",
    "body": [
      "resource \"vault_mount\" \"db\" {",
      "  path = \"postgres\"",
      "  type = \"database\"",
      "}",
      "",
      "resource \"vault_database_secret_backend_connection\" \"postgres\" {",
      "  backend       = \"${vault_mount.db.path}\"",
      "  name          = \"postgres\"",
      "  allowed_roles = [\"dev\", \"prod\"]",
      "",
      "  postgresql {",
      "    connection_url = \"postgres://username:password@host:port/database\"",
      "  }",
      "}"
    ]
  },
  "vault-resource-database_secret_backend_role": {
    "description": "Defines database_secret_backend_role",
    "prefix": "tf-vault-resource-database_secret_backend_role",
    "body": [
      "resource \"vault_mount\" \"db\" {",
      "  path = \"postgres\"",
      "  type = \"database\"",
      "}",
      "",
      "resource \"vault_database_secret_backend_connection\" \"postgres\" {",
      "  backend       = \"${vault_mount.db.path}\"",
      "  name          = \"postgres\"",
      "  allowed_roles = [\"dev\", \"prod\"]",
      "",
      "  postgresql {",
      "    role_url = \"postgres://username:password@host:port/database\"",
      "  }",
      "}",
      "",
      "resource \"vault_database_secret_backend_role\" \"role\" {",
      "  backend             = \"${vault_mount.db.path}\"",
      "  name                = \"my-role\"",
      "  db_name             = \"${vault_database_secret_backend_connection.postgres.name}\"",
      "  creation_statements = \"CREATE ROLE {{name}} WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';\"",
      "}"
    ]
  },
  "vault-resource-generic_secret": {
    "description": "Defines generic_secret",
    "prefix": "tf-vault-resource-generic_secret",
    "body": [
      "resource \"vault_generic_secret\" \"example\" {",
      "  path = \"secret/foo\"",
      "",
      "  data_json = <<EOT",
      "{",
      "  \"foo\":   \"bar\",",
      "  \"pizza\": \"cheese\"",
      "}",
      "EOT",
      "}"
    ]
  },
  "vault-resource-mount": {
    "description": "Defines mount",
    "prefix": "tf-vault-resource-mount",
    "body": [
      "resource \"vault_mount\" \"example\" {",
      "  path = \"dummy\"",
      "  type = \"generic\"",
      "  description = \"This is an example mount\"",
      "}"
    ]
  },
  "vault-resource-okta_auth_backend": {
    "description": "Defines okta_auth_backend",
    "prefix": "tf-vault-resource-okta_auth_backend",
    "body": [
      "resource \"vault_okta_auth_backend\" \"example\" {",
      "    description = \"Demonstration of the Terraform Okta auth backend\"",
      "    organization = \"example\"",
      "    token = \"something that should be kept secret\"",
      "    group {",
      "        group_name = \"foo\"",
      "        policies = [\"one\", \"two\"]",
      "    }",
      "    user {",
      "        username = \"bar\"",
      "        groups = [\"foo\"]",
      "    }",
      "}"
    ]
  },
  "vault-resource-okta_auth_backend_group": {
    "description": "Defines okta_auth_backend_group",
    "prefix": "tf-vault-resource-okta_auth_backend_group",
    "body": [
      "resource \"vault_okta_auth_backend\" \"example\" {",
      "    path = \"group_okta\"",
      "    organization = \"dummy\"",
      "}",
      "",
      "resource \"vault_okta_auth_backend_group\" \"foo\" {",
      "    path = \"${vault_okta_auth_backend.example.path}\"",
      "    group_name = \"foo\"",
      "    policies = [\"one\", \"two\"]",
      "}"
    ]
  },
  "vault-resource-okta_auth_backend_user": {
    "description": "Defines okta_auth_backend_user",
    "prefix": "tf-vault-resource-okta_auth_backend_user",
    "body": [
      "resource \"vault_okta_auth_backend\" \"example\" {",
      "    path = \"user_okta\"",
      "    organization = \"dummy\"",
      "}",
      "",
      "resource \"vault_okta_auth_backend_user\" \"foo\" {",
      "    path = \"${vault_okta_auth_backend.example.path}\"",
      "    username = \"foo\"",
      "    groups = [\"one\", \"two\"]",
      "}"
    ]
  },
  "vault-resource-policy": {
    "description": "Defines policy",
    "prefix": "tf-vault-resource-policy",
    "body": [
      "resource \"vault_policy\" \"example\" {",
      "  name = \"dev-team\"",
      "",
      "  policy = <<EOT",
      "path \"secret/my_app\" {",
      "  policy = \"write\"",
      "}",
      "EOT",
      "}"
    ]
  },
  "vcd-resource-dnat": {
    "description": "Defines dnat",
    "prefix": "tf-vcd-resource-dnat",
    "body": [
      "resource \"vcd_dnat\" \"web\" {",
      "  edge_gateway = \"Edge Gateway Name\"",
      "  external_ip  = \"78.101.10.20\"",
      "  port         = 80",
      "  internal_ip  = \"10.10.0.5\"",
      "  translated_port = 8080",
      "}"
    ]
  },
  "vcd-resource-edgegateway_vpn": {
    "description": "Defines edgegateway_vpn",
    "prefix": "tf-vcd-resource-edgegateway_vpn",
    "body": [
      "resource \"vcd_edgegateway_vpn\" \"vpn\" {",
      "    edge_gateway        = \"Internet_01(nti0000bi2_123-456-2)\"",
      "    name                = \"west-to-east\"",
      "  description         = \"Description\"",
      "  encryption_protocol = \"AES256\"",
      "    mtu                 = 1400",
      "    peer_id             = \"64.121.123.11\"",
      "    peer_ip_address     = \"64.121.123.11\"",
      "    local_id            = \"64.121.123.10\"",
      "    local_ip_address    = \"64.121.123.10\"",
      "    shared_secret       = \"***********************\"",
      "    ",
      "    peer_subnets {",
      "        peer_subnet_name = \"DMZ_WEST\"",
      "        peer_subnet_gateway = \"10.0.10.1\"",
      "        peer_subnet_mask = \"255.255.255.0\"",
      "    }",
      "",
      "    peer_subnets {",
      "        peer_subnet_name = \"WEB_WEST\"",
      "        peer_subnet_gateway = \"10.0.20.1\"",
      "        peer_subnet_mask = \"255.255.255.0\"",
      "    }",
      "",
      "    local_subnets {",
      "        local_subnet_name = \"DMZ_EAST\"",
      "        local_subnet_gateway = \"10.0.1.1\"",
      "        local_subnet_mask = \"255.255.255.0\"",
      "    }",
      "",
      "    local_subnets {",
      "        local_subnet_name = \"WEB_EAST\"",
      "        local_subnet_gateway = \"10.0.22.1\"",
      "        local_subnet_mask = \"255.255.255.0\"",
      "    }",
      "}"
    ]
  },
  "vcd-resource-firewall_rules": {
    "description": "Defines firewall_rules",
    "prefix": "tf-vcd-resource-firewall_rules",
    "body": [
      "resource \"vcd_firewall_rules\" \"fw\" {",
      "  edge_gateway   = \"Edge Gateway Name\"",
      "  default_action = \"deny\"",
      "",
      "  rule {",
      "    description      = \"deny-ftp-out\"",
      "    policy           = \"deny\"",
      "    protocol         = \"tcp\"",
      "    destination_port = \"21\"",
      "    destination_ip   = \"any\"",
      "    source_port      = \"any\"",
      "    source_ip        = \"10.10.0.0/24\"",
      "  }",
      "",
      "  rule {",
      "    description      = \"allow-outbound\"",
      "    policy           = \"allow\"",
      "    protocol         = \"any\"",
      "    destination_port = \"any\"",
      "    destination_ip   = \"any\"",
      "    source_port      = \"any\"",
      "    source_ip        = \"10.10.0.0/24\"",
      "  }",
      "}",
      "",
      "resource \"vcd_vapp\" \"web\" {",
      "  # ...",
      "}",
      "",
      "resource \"vcd_firewall_rules\" \"fw-web\" {",
      "  edge_gateway   = \"Edge Gateway Name\"",
      "  default_action = \"drop\"",
      "",
      "  rule {",
      "    description      = \"allow-web\"",
      "    policy           = \"allow\"",
      "    protocol         = \"tcp\"",
      "    destination_port = \"80\"",
      "    destination_ip   = \"${vcd_vapp.web.ip}\"",
      "    source_port      = \"any\"",
      "    source_ip        = \"any\"",
      "  }",
      "}"
    ]
  },
  "vcd-resource-network": {
    "description": "Defines network",
    "prefix": "tf-vcd-resource-network",
    "body": [
      "resource \"vcd_network\" \"net\" {",
      "  name         = \"my-net\"",
      "  edge_gateway = \"Edge Gateway Name\"",
      "  gateway      = \"10.10.0.1\"",
      "",
      "  dhcp_pool {",
      "    start_address = \"10.10.0.2\"",
      "    end_address   = \"10.10.0.100\"",
      "  }",
      "",
      "  static_ip_pool {",
      "    start_address = \"10.10.0.152\"",
      "    end_address   = \"10.10.0.254\"",
      "  }",
      "}"
    ]
  },
  "vcd-resource-snat": {
    "description": "Defines snat",
    "prefix": "tf-vcd-resource-snat",
    "body": [
      "resource \"vcd_snat\" \"outbound\" {",
      "  edge_gateway = \"Edge Gateway Name\"",
      "  external_ip  = \"78.101.10.20\"",
      "  internal_ip  = \"10.10.0.0/24\"",
      "}"
    ]
  },
  "vcd-resource-vapp": {
    "description": "Defines vapp",
    "prefix": "tf-vcd-resource-vapp",
    "body": [
      "resource \"vcd_network\" \"net\" {",
      "  # ...",
      "}",
      "",
      "resource \"vcd_vapp\" \"web\" {",
      "  name          = \"web\"",
      "  catalog_name  = \"Boxes\"",
      "  template_name = \"lampstack-1.10.1-ubuntu-10.04\"",
      "  memory        = 2048",
      "  cpus          = 1",
      "",
      "  network_name = \"${vcd_network.net.name}\"",
      "  network_href = \"${vcd_network.net.href}\"",
      "  ip           = \"10.10.104.160\"",
      "",
      "  metadata {",
      "    role    = \"web\"",
      "    env     = \"staging\"",
      "    version = \"v1\"",
      "  }",
      "",
      "  ovf {",
      "    hostname = \"web\"",
      "  }",
      "}"
    ]
  },
  "vcd-resource-vapp_vm": {
    "description": "Defines vapp_vm",
    "prefix": "tf-vcd-resource-vapp_vm",
    "body": [
      "resource \"vcd_network\" \"net\" {",
      "  # ...",
      "}",
      "",
      "resource \"vcd_vapp\" \"web\" {",
      "  name          = \"web\"",
      "}",
      "",
      "resource \"vcd_vapp_vm\" \"web2\" {",
      "  vapp_name     = \"${vcd_vapp.web.name}\"",
      "  name          = \"web2\"",
      "  catalog_name  = \"Boxes\"",
      "  template_name = \"lampstack-1.10.1-ubuntu-10.04\"",
      "  memory        = 2048",
      "  cpus          = 1",
      "",
      "  ip           = \"10.10.104.161\"",
      "}",
      "",
      "resource \"vcd_vapp_vm\" \"web3\" {",
      "  vapp_name     = \"${vcd_vapp.web.name}\"",
      "  name          = \"web3\"",
      "  catalog_name  = \"Boxes\"",
      "  template_name = \"lampstack-1.10.1-ubuntu-10.04\"",
      "  memory        = 2048",
      "  cpus          = 1",
      "",
      "  ip           = \"10.10.104.162\"",
      "}"
    ]
  },
  "vsphere-data-compute_cluster": {
    "description": "Defines compute_cluster",
    "prefix": "tf-vsphere-data-compute_cluster",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_compute_cluster\" \"compute_cluster\" {",
      "  name          = \"compute-cluster1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}"
    ]
  },
  "vsphere-data-custom_attribute": {
    "description": "Defines custom_attribute",
    "prefix": "tf-vsphere-data-custom_attribute",
    "body": [
      "data \"vsphere_custom_attribute\" \"attribute\" {",
      "  name = \"terraform-test-attribute\"",
      "}"
    ]
  },
  "vsphere-data-datacenter": {
    "description": "Defines datacenter",
    "prefix": "tf-vsphere-data-datacenter",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}"
    ]
  },
  "vsphere-data-datastore": {
    "description": "Defines datastore",
    "prefix": "tf-vsphere-data-datastore",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_datastore\" \"datastore\" {",
      "  name          = \"datastore1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}"
    ]
  },
  "vsphere-data-datastore_cluster": {
    "description": "Defines datastore_cluster",
    "prefix": "tf-vsphere-data-datastore_cluster",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_datastore_cluster\" \"datastore_cluster\" {",
      "  name          = \"datastore-cluster1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}"
    ]
  },
  "vsphere-data-distributed_virtual_switch": {
    "description": "Defines distributed_virtual_switch",
    "prefix": "tf-vsphere-data-distributed_virtual_switch",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_distributed_virtual_switch\" \"dvs\" {",
      "  name          = \"terraform-test-dvs\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}",
      "",
      "resource \"vsphere_distributed_port_group\" \"pg\" {",
      "  name                            = \"terraform-test-pg\"",
      "  distributed_virtual_switch_uuid = \"${data.vsphere_distributed_virtual_switch.dvs.id}\"",
      "",
      "  active_uplinks  = [\"${data.vsphere_distributed_virtual_switch.dvs.uplinks[0]}\"]",
      "  standby_uplinks = [\"${data.vsphere_distributed_virtual_switch.dvs.uplinks[1]}\"]",
      "}"
    ]
  },
  "vsphere-data-host": {
    "description": "Defines host",
    "prefix": "tf-vsphere-data-host",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_host\" \"host\" {",
      "  name          = \"esxi1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}"
    ]
  },
  "vsphere-data-network": {
    "description": "Defines network",
    "prefix": "tf-vsphere-data-network",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_network\" \"net\" {",
      "  name          = \"terraform-test-net\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}"
    ]
  },
  "vsphere-data-resource_pool": {
    "description": "Defines resource_pool",
    "prefix": "tf-vsphere-data-resource_pool",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_resource_pool\" \"pool\" {",
      "  name          = \"resource-pool-1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}"
    ]
  },
  "vsphere-data-tag": {
    "description": "Defines tag",
    "prefix": "tf-vsphere-data-tag",
    "body": [
      "data \"vsphere_tag_category\" \"category\" {",
      "  name = \"terraform-test-category\"",
      "}",
      "",
      "data \"vsphere_tag\" \"tag\" {",
      "  name        = \"terraform-test-tag\"",
      "  category_id = \"${data.vsphere_tag_category.category.id}\"",
      "}"
    ]
  },
  "vsphere-data-tag_category": {
    "description": "Defines tag_category",
    "prefix": "tf-vsphere-data-tag_category",
    "body": [
      "data \"vsphere_tag_category\" \"category\" {",
      "  name = \"terraform-test-category\"",
      "}"
    ]
  },
  "vsphere-data-virtual_machine": {
    "description": "Defines virtual_machine",
    "prefix": "tf-vsphere-data-virtual_machine",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_virtual_machine\" \"template\" {",
      "  name          = \"test-vm-template\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}"
    ]
  },
  "vsphere-data-vmfs_disks": {
    "description": "Defines vmfs_disks",
    "prefix": "tf-vsphere-data-vmfs_disks",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_host\" \"host\" {",
      "  name          = \"esxi1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}",
      "",
      "data \"vsphere_vmfs_disks\" \"available\" {",
      "  host_system_id = \"${data.vsphere_host.host.id}\"",
      "  rescan         = true",
      "  filter         = \"mpx.vmhba1:C0:T[12]:L0\"",
      "}"
    ]
  },
  "vsphere-resource-compute_cluster": {
    "description": "Defines compute_cluster",
    "prefix": "tf-vsphere-resource-compute_cluster",
    "body": [
      "variable \"datacenter\" {",
      "  default = \"dc1\"",
      "}",
      "",
      "variable \"hosts\" {",
      "  default = [",
      "    \"esxi1\",",
      "    \"esxi2\",",
      "    \"esxi3\",",
      "  ]",
      "}",
      "",
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"${var.datacenter}\"",
      "}",
      "",
      "data \"vsphere_host\" \"hosts\" {",
      "  count         = \"${length(var.hosts)}\"",
      "  name          = \"${var.hosts[count.index]}\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_compute_cluster\" \"compute_cluster\" {",
      "  name            = \"terraform-compute-cluster-test\"",
      "  datacenter_id   = \"${data.vsphere_datacenter.dc.id}\"",
      "  host_system_ids = [\"${data.vsphere_host.hosts.*.id}\"]",
      "",
      "  drs_enabled          = true",
      "  drs_automation_level = \"fullyAutomated\"",
      "",
      "  ha_enabled = true",
      "}"
    ]
  },
  "vsphere-resource-compute_cluster_host_group": {
    "description": "Defines compute_cluster_host_group",
    "prefix": "tf-vsphere-resource-compute_cluster_host_group",
    "body": [
      "variable \"datacenter\" {",
      "  default = \"dc1\"",
      "}",
      "",
      "variable \"hosts\" {",
      "  default = [",
      "    \"esxi1\",",
      "    \"esxi2\",",
      "    \"esxi3\",",
      "  ]",
      "}",
      "",
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"${var.datacenter}\"",
      "}",
      "",
      "data \"vsphere_host\" \"hosts\" {",
      "  count         = \"${length(var.hosts)}\"",
      "  name          = \"${var.hosts[count.index]}\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_compute_cluster\" \"compute_cluster\" {",
      "  name            = \"terraform-compute-cluster-test\"",
      "  datacenter_id   = \"${data.vsphere_datacenter.dc.id}\"",
      "  host_system_ids = [\"${data.vsphere_host.hosts.*.id}\"]",
      "",
      "  drs_enabled          = true",
      "  drs_automation_level = \"fullyAutomated\"",
      "",
      "  ha_enabled = true",
      "}",
      "",
      "resource \"vsphere_compute_cluster_host_group\" \"cluster_host_group\" {",
      "  name                = \"terraform-test-cluster-host-group\"",
      "  compute_cluster_id  = \"${vsphere_compute_cluster.compute_cluster.id}\"",
      "  host_system_ids     = [\"${data.vsphere_host.hosts.*.id}\"]",
      "}"
    ]
  },
  "vsphere-resource-compute_cluster_vm_affinity_rule": {
    "description": "Defines compute_cluster_vm_affinity_rule",
    "prefix": "tf-vsphere-resource-compute_cluster_vm_affinity_rule",
    "body": [
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_datastore\" \"datastore\" {",
      "  name          = \"datastore1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_compute_cluster\" \"cluster\" {",
      "  name          = \"cluster1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_network\" \"network\" {",
      "  name          = \"network1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_virtual_machine\" \"vm\" {",
      "  count            = 2",
      "  name             = \"terraform-test-${count.index}\"",
      "  resource_pool_id = \"${data.vsphere_compute_cluster.cluster.resource_pool_id}\"",
      "  datastore_id     = \"${data.vsphere_datastore.datastore.id}\"",
      "",
      "  num_cpus = 2",
      "  memory   = 2048",
      "  guest_id = \"other3xLinux64Guest\"",
      "",
      "  network_interface {",
      "    network_id = \"${data.vsphere_network.network.id}\"",
      "  }",
      "",
      "  disk {",
      "    label = \"disk0\"",
      "    size  = 20",
      "  }",
      "}",
      "",
      "resource \"vsphere_compute_cluster_vm_affinity_rule\" \"cluster_vm_affinity_rule\" {",
      "  name                = \"terraform-test-cluster-vm-affinity-rule\"",
      "  compute_cluster_id  = \"${data.vsphere_compute_cluster.cluster.id}\"",
      "  virtual_machine_ids = [\"${vsphere_virtual_machine.vm.*.id}\"]",
      "}"
    ]
  },
  "vsphere-resource-compute_cluster_vm_anti_affinity_rule": {
    "description": "Defines compute_cluster_vm_anti_affinity_rule",
    "prefix": "tf-vsphere-resource-compute_cluster_vm_anti_affinity_rule",
    "body": [
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_datastore\" \"datastore\" {",
      "  name          = \"datastore1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_compute_cluster\" \"cluster\" {",
      "  name          = \"cluster1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_network\" \"network\" {",
      "  name          = \"network1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_virtual_machine\" \"vm\" {",
      "  count            = 2",
      "  name             = \"terraform-test-${count.index}\"",
      "  resource_pool_id = \"${data.vsphere_compute_cluster.cluster.resource_pool_id}\"",
      "  datastore_id     = \"${data.vsphere_datastore.datastore.id}\"",
      "",
      "  num_cpus = 2",
      "  memory   = 2048",
      "  guest_id = \"other3xLinux64Guest\"",
      "",
      "  network_interface {",
      "    network_id = \"${data.vsphere_network.network.id}\"",
      "  }",
      "",
      "  disk {",
      "    label = \"disk0\"",
      "    size  = 20",
      "  }",
      "}",
      "",
      "resource \"vsphere_compute_cluster_vm_anti_affinity_rule\" \"cluster_vm_anti_affinity_rule\" {",
      "  name                = \"terraform-test-cluster-vm-anti-affinity-rule\"",
      "  compute_cluster_id  = \"${data.vsphere_compute_cluster.cluster.id}\"",
      "  virtual_machine_ids = [\"${vsphere_virtual_machine.vm.*.id}\"]",
      "}"
    ]
  },
  "vsphere-resource-compute_cluster_vm_dependency_rule": {
    "description": "Defines compute_cluster_vm_dependency_rule",
    "prefix": "tf-vsphere-resource-compute_cluster_vm_dependency_rule",
    "body": [
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_datastore\" \"datastore\" {",
      "  name          = \"datastore1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_compute_cluster\" \"cluster\" {",
      "  name          = \"cluster1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_network\" \"network\" {",
      "  name          = \"network1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_virtual_machine\" \"vm1\" {",
      "  name             = \"terraform-test1\"",
      "  resource_pool_id = \"${data.vsphere_compute_cluster.cluster.resource_pool_id}\"",
      "  datastore_id     = \"${data.vsphere_datastore.datastore.id}\"",
      "",
      "  num_cpus = 2",
      "  memory   = 2048",
      "  guest_id = \"other3xLinux64Guest\"",
      "",
      "  network_interface {",
      "    network_id = \"${data.vsphere_network.network.id}\"",
      "  }",
      "",
      "  disk {",
      "    label = \"disk0\"",
      "    size  = 20",
      "  }",
      "}",
      "",
      "resource \"vsphere_virtual_machine\" \"vm2\" {",
      "  name             = \"terraform-test2\"",
      "  resource_pool_id = \"${data.vsphere_compute_cluster.cluster.resource_pool_id}\"",
      "  datastore_id     = \"${data.vsphere_datastore.datastore.id}\"",
      "",
      "  num_cpus = 2",
      "  memory   = 2048",
      "  guest_id = \"other3xLinux64Guest\"",
      "",
      "  network_interface {",
      "    network_id = \"${data.vsphere_network.network.id}\"",
      "  }",
      "",
      "  disk {",
      "    label = \"disk0\"",
      "    size  = 20",
      "  }",
      "}",
      "",
      "resource \"vsphere_compute_cluster_vm_group\" \"cluster_vm_group1\" {",
      "  name                = \"terraform-test-cluster-vm-group1\"",
      "  compute_cluster_id  = \"${data.vsphere_compute_cluster.cluster.id}\"",
      "  virtual_machine_ids = [\"${vsphere_virtual_machine.vm1.id}\"]",
      "}",
      "",
      "resource \"vsphere_compute_cluster_vm_group\" \"cluster_vm_group2\" {",
      "  name                = \"terraform-test-cluster-vm-group2\"",
      "  compute_cluster_id  = \"${data.vsphere_compute_cluster.cluster.id}\"",
      "  virtual_machine_ids = [\"${vsphere_virtual_machine.vm2.id}\"]",
      "}",
      "",
      "resource \"vsphere_compute_cluster_vm_dependency_rule\" \"cluster_vm_dependency_rule\" {",
      "  compute_cluster_id       = \"${data.vsphere_compute_cluster.cluster.id}\"",
      "  name                     = \"terraform-test-cluster-vm-dependency-rule\"",
      "  dependency_vm_group_name = \"${vsphere_compute_cluster_vm_group.cluster_vm_group1.name}\"",
      "  vm_group_name            = \"${vsphere_compute_cluster_vm_group.cluster_vm_group2.name}\"",
      "}"
    ]
  },
  "vsphere-resource-compute_cluster_vm_group": {
    "description": "Defines compute_cluster_vm_group",
    "prefix": "tf-vsphere-resource-compute_cluster_vm_group",
    "body": [
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_datastore\" \"datastore\" {",
      "  name          = \"datastore1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_compute_cluster\" \"cluster\" {",
      "  name          = \"cluster1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_network\" \"network\" {",
      "  name          = \"network1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_virtual_machine\" \"vm\" {",
      "  count            = 2",
      "  name             = \"terraform-test-${count.index}\"",
      "  resource_pool_id = \"${data.vsphere_compute_cluster.cluster.resource_pool_id}\"",
      "  datastore_id     = \"${data.vsphere_datastore.datastore.id}\"",
      "",
      "  num_cpus = 2",
      "  memory   = 2048",
      "  guest_id = \"other3xLinux64Guest\"",
      "",
      "  network_interface {",
      "    network_id = \"${data.vsphere_network.network.id}\"",
      "  }",
      "",
      "  disk {",
      "    label = \"disk0\"",
      "    size  = 20",
      "  }",
      "}",
      "",
      "resource \"vsphere_compute_cluster_vm_group\" \"cluster_vm_group\" {",
      "  name                = \"terraform-test-cluster-vm-group\"",
      "  compute_cluster_id  = \"${data.vsphere_compute_cluster.cluster.id}\"",
      "  virtual_machine_ids = [\"${vsphere_virtual_machine.vm.*.id}\"]",
      "}"
    ]
  },
  "vsphere-resource-compute_cluster_vm_host_rule": {
    "description": "Defines compute_cluster_vm_host_rule",
    "prefix": "tf-vsphere-resource-compute_cluster_vm_host_rule",
    "body": [
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_datastore\" \"datastore\" {",
      "  name          = \"datastore1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_compute_cluster\" \"cluster\" {",
      "  name          = \"cluster1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_host\" \"host\" {",
      "  name          = \"esxi1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_network\" \"network\" {",
      "  name          = \"network1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_virtual_machine\" \"vm\" {",
      "  name             = \"terraform-test\"",
      "  resource_pool_id = \"${data.vsphere_compute_cluster.cluster.resource_pool_id}\"",
      "  datastore_id     = \"${data.vsphere_datastore.datastore.id}\"",
      "",
      "  num_cpus = 2",
      "  memory   = 2048",
      "  guest_id = \"other3xLinux64Guest\"",
      "",
      "  network_interface {",
      "    network_id = \"${data.vsphere_network.network.id}\"",
      "  }",
      "",
      "  disk {",
      "    label = \"disk0\"",
      "    size  = 20",
      "  }",
      "}",
      "",
      "resource \"vsphere_compute_cluster_vm_group\" \"cluster_vm_group\" {",
      "  name                = \"terraform-test-cluster-vm-group\"",
      "  compute_cluster_id  = \"${data.vsphere_compute_cluster.cluster.id}\"",
      "  virtual_machine_ids = [\"${vsphere_virtual_machine.vm.id}\"]",
      "}",
      "",
      "resource \"vsphere_compute_cluster_host_group\" \"cluster_host_group\" {",
      "  name               = \"terraform-test-cluster-vm-group\"",
      "  compute_cluster_id = \"${data.vsphere_compute_cluster.cluster.id}\"",
      "  host_system_ids    = [\"${data.vsphere_host.host.id}\"]",
      "}",
      "",
      "resource \"vsphere_compute_cluster_vm_host_rule\" \"cluster_vm_host_rule\" {",
      "  compute_cluster_id       = \"${data.vsphere_compute_cluster.cluster.id}\"",
      "  name                     = \"terraform-test-cluster-vm-host-rule\"",
      "  vm_group_name            = \"${vsphere_compute_cluster_vm_group.cluster_vm_group.name}\"",
      "  affinity_host_group_name = \"${vsphere_compute_cluster_host_group.cluster_host_group.name}\"",
      "}"
    ]
  },
  "vsphere-resource-custom_attribute": {
    "description": "Defines custom_attribute",
    "prefix": "tf-vsphere-resource-custom_attribute",
    "body": [
      "resource \"vsphere_custom_attribute\" \"attribute\" {",
      "  name                = \"terraform-test-attribute\"",
      "  managed_object_type = \"VirtualMachine\"",
      "}"
    ]
  },
  "vsphere-resource-datacenter": {
    "description": "Defines datacenter",
    "prefix": "tf-vsphere-resource-datacenter",
    "body": [
      "resource \"vsphere_datacenter\" \"prod_datacenter\" {",
      "  name       = \"my_prod_datacenter\"",
      "}"
    ]
  },
  "vsphere-resource-datastore_cluster": {
    "description": "Defines datastore_cluster",
    "prefix": "tf-vsphere-resource-datastore_cluster",
    "body": [
      "variable \"hosts\" {",
      "  default = [",
      "    \"esxi1\",",
      "    \"esxi2\",",
      "    \"esxi3\",",
      "  ]",
      "}",
      "",
      "data \"vsphere_datacenter\" \"datacenter\" {}",
      "",
      "data \"vsphere_host\" \"esxi_hosts\" {",
      "  count         = \"${length(var.hosts)}\"",
      "  name          = \"${var.hosts[count.index]}\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}",
      "",
      "resource \"vsphere_datastore_cluster\" \"datastore_cluster\" {",
      "  name          = \"terraform-datastore-cluster-test\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "  sdrs_enabled  = true",
      "}",
      "",
      "resource \"vsphere_nas_datastore\" \"datastore1\" {",
      "  name                 = \"terraform-datastore-test1\"",
      "  host_system_ids      = [\"${data.vsphere_host.esxi_hosts.*.id}\"]",
      "  datastore_cluster_id = \"${vsphere_datastore_cluster.datastore_cluster.id}\"",
      "",
      "  type         = \"NFS\"",
      "  remote_hosts = [\"nfs\"]",
      "  remote_path  = \"/export/terraform-test1\"",
      "}",
      "",
      "resource \"vsphere_nas_datastore\" \"datastore2\" {",
      "  name                 = \"terraform-datastore-test2\"",
      "  host_system_ids      = [\"${data.vsphere_host.esxi_hosts.*.id}\"]",
      "  datastore_cluster_id = \"${vsphere_datastore_cluster.datastore_cluster.id}\"",
      "",
      "  type         = \"NFS\"",
      "  remote_hosts = [\"nfs\"]",
      "  remote_path  = \"/export/terraform-test2\"",
      "}"
    ]
  },
  "vsphere-resource-datastore_cluster_vm_anti_affinity_rule": {
    "description": "Defines datastore_cluster_vm_anti_affinity_rule",
    "prefix": "tf-vsphere-resource-datastore_cluster_vm_anti_affinity_rule",
    "body": [
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_datastore_cluster\" \"datastore_cluster\" {",
      "  name          = \"datastore-cluster1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_compute_cluster\" \"cluster\" {",
      "  name          = \"cluster1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_network\" \"network\" {",
      "  name          = \"network1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_virtual_machine\" \"vm\" {",
      "  count                = 2",
      "  name                 = \"terraform-test-${count.index}\"",
      "  resource_pool_id     = \"${data.vsphere_compute_cluster.cluster.resource_pool_id}\"",
      "  datastore_cluster_id = \"${data.vsphere_datastore_cluster.datastore_cluster.id}\"",
      "",
      "  num_cpus = 2",
      "  memory   = 2048",
      "  guest_id = \"other3xLinux64Guest\"",
      "",
      "  network_interface {",
      "    network_id = \"${data.vsphere_network.network.id}\"",
      "  }",
      "",
      "  disk {",
      "    label = \"disk0\"",
      "    size  = 20",
      "  }",
      "}",
      "",
      "resource \"vsphere_datastore_cluster_vm_anti_affinity_rule\" \"cluster_vm_anti_affinity_rule\" {",
      "  name                 = \"terraform-test-datastore-cluster-vm-anti-affinity-rule\"",
      "  datastore_cluster_id = \"${data.vsphere_datastore_cluster.datastore_cluster.id}\"",
      "  virtual_machine_ids  = [\"${vsphere_virtual_machine.vm.*.id}\"]",
      "}"
    ]
  },
  "vsphere-resource-distributed_port_group": {
    "description": "Defines distributed_port_group",
    "prefix": "tf-vsphere-resource-distributed_port_group",
    "body": [
      "variable \"esxi_hosts\" {",
      "  default = [",
      "    \"esxi1\",",
      "    \"esxi2\",",
      "    \"esxi3\",",
      "  ]",
      "}",
      "",
      "variable \"network_interfaces\" {",
      "  default = [",
      "    \"vmnic0\",",
      "    \"vmnic1\",",
      "    \"vmnic2\",",
      "    \"vmnic3\",",
      "  ]",
      "}",
      "",
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_host\" \"host\" {",
      "  count         = \"${length(var.esxi_hosts)}\"",
      "  name          = \"${var.esxi_hosts[count.index]}\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_distributed_virtual_switch\" \"dvs\" {",
      "  name          = \"terraform-test-dvs\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "",
      "  uplinks         = [\"uplink1\", \"uplink2\", \"uplink3\", \"uplink4\"]",
      "  active_uplinks  = [\"uplink1\", \"uplink2\"]",
      "  standby_uplinks = [\"uplink3\", \"uplink4\"]",
      "",
      "  host {",
      "    host_system_id = \"${data.vsphere_host.host.0.id}\"",
      "    devices        = [\"${var.network_interfaces}\"]",
      "  }",
      "",
      "  host {",
      "    host_system_id = \"${data.vsphere_host.host.1.id}\"",
      "    devices        = [\"${var.network_interfaces}\"]",
      "  }",
      "",
      "  host {",
      "    host_system_id = \"${data.vsphere_host.host.2.id}\"",
      "    devices        = [\"${var.network_interfaces}\"]",
      "  }",
      "}",
      "",
      "resource \"vsphere_distributed_port_group\" \"pg\" {",
      "  name                            = \"terraform-test-pg\"",
      "  distributed_virtual_switch_uuid = \"${vsphere_distributed_virtual_switch.dvs.id}\"",
      "",
      "  vlan_id = 1000",
      "}"
    ]
  },
  "vsphere-resource-distributed_virtual_switch": {
    "description": "Defines distributed_virtual_switch",
    "prefix": "tf-vsphere-resource-distributed_virtual_switch",
    "body": [
      "variable \"esxi_hosts\" {",
      "  default = [",
      "    \"esxi1\",",
      "    \"esxi2\",",
      "    \"esxi3\",",
      "  ]",
      "}",
      "",
      "variable \"network_interfaces\" {",
      "  default = [",
      "    \"vmnic0\",",
      "    \"vmnic1\",",
      "    \"vmnic2\",",
      "    \"vmnic3\",",
      "  ]",
      "}",
      "",
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_host\" \"host\" {",
      "  count         = \"${length(var.esxi_hosts)}\"",
      "  name          = \"${var.esxi_hosts[count.index]}\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_distributed_virtual_switch\" \"dvs\" {",
      "  name          = \"terraform-test-dvs\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "",
      "  uplinks         = [\"uplink1\", \"uplink2\", \"uplink3\", \"uplink4\"]",
      "  active_uplinks  = [\"uplink1\", \"uplink2\"]",
      "  standby_uplinks = [\"uplink3\", \"uplink4\"]",
      "",
      "  host {",
      "    host_system_id = \"${data.vsphere_host.host.0.id}\"",
      "    devices        = [\"${var.network_interfaces}\"]",
      "  }",
      "",
      "  host {",
      "    host_system_id = \"${data.vsphere_host.host.1.id}\"",
      "    devices        = [\"${var.network_interfaces}\"]",
      "  }",
      "",
      "  host {",
      "    host_system_id = \"${data.vsphere_host.host.2.id}\"",
      "    devices        = [\"${var.network_interfaces}\"]",
      "  }",
      "}"
    ]
  },
  "vsphere-resource-dpm_host_override": {
    "description": "Defines dpm_host_override",
    "prefix": "tf-vsphere-resource-dpm_host_override",
    "body": [
      "variable \"datacenter\" {",
      "  default = \"dc1\"",
      "}",
      "",
      "variable \"hosts\" {",
      "  default = [",
      "    \"esxi1\",",
      "    \"esxi2\",",
      "    \"esxi3\",",
      "  ]",
      "}",
      "",
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"${var.datacenter}\"",
      "}",
      "",
      "data \"vsphere_host\" \"hosts\" {",
      "  count         = \"${length(var.hosts)}\"",
      "  name          = \"${var.hosts[count.index]}\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_compute_cluster\" \"compute_cluster\" {",
      "  name            = \"terraform-compute-cluster-test\"",
      "  datacenter_id   = \"${data.vsphere_datacenter.dc.id}\"",
      "  host_system_ids = [\"${data.vsphere_host.hosts.*.id}\"]",
      "",
      "  drs_enabled          = true",
      "  drs_automation_level = \"fullyAutomated\"",
      "}",
      "",
      "resource \"vsphere_dpm_host_override\" \"dpm_host_override\" {",
      "  compute_cluster_id   = \"${vsphere_compute_cluster.compute_cluster.id}\"",
      "  host_system_id       = \"${data.vsphere_host.hosts.0.id}\"",
      "  dpm_enabled          = true",
      "  dpm_automation_level = \"automated\"",
      "}"
    ]
  },
  "vsphere-resource-drs_vm_override": {
    "description": "Defines drs_vm_override",
    "prefix": "tf-vsphere-resource-drs_vm_override",
    "body": [
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_datastore\" \"datastore\" {",
      "  name          = \"datastore1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_compute_cluster\" \"cluster\" {",
      "  name          = \"cluster1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_host\" \"host\" {",
      "  name          = \"esxi1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_network\" \"network\" {",
      "  name          = \"network1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_virtual_machine\" \"vm\" {",
      "  name             = \"terraform-test\"",
      "  resource_pool_id = \"${data.vsphere_compute_cluster.cluster.resource_pool_id}\"",
      "  host_system_id   = \"${data.vsphere_host.host.id}\"",
      "  datastore_id     = \"${data.vsphere_datastore.datastore.id}\"",
      "",
      "  num_cpus = 2",
      "  memory   = 2048",
      "  guest_id = \"other3xLinux64Guest\"",
      "",
      "  network_interface {",
      "    network_id = \"${data.vsphere_network.network.id}\"",
      "  }",
      "",
      "  disk {",
      "    label = \"disk0\"",
      "    size  = 20",
      "  }",
      "}",
      "",
      "resource \"vsphere_drs_vm_override\" \"drs_vm_override\" {",
      "  compute_cluster_id = \"${data.vsphere_compute_cluster.cluster.id}\"",
      "  virtual_machine_id = \"${vsphere_virtual_machine.vm.id}\"",
      "  drs_enabled        = false",
      "}"
    ]
  },
  "vsphere-resource-file": {
    "description": "Defines file",
    "prefix": "tf-vsphere-resource-file",
    "body": [
      "resource \"vsphere_file\" \"ubuntu_disk_upload\" {",
      "  datacenter       = \"my_datacenter\"",
      "  datastore        = \"local\"",
      "  source_file      = \"/home/ubuntu/my_disks/custom_ubuntu.vmdk\"",
      "  destination_file = \"/my_path/disks/custom_ubuntu.vmdk\"",
      "}"
    ]
  },
  "vsphere-resource-folder": {
    "description": "Defines folder",
    "prefix": "tf-vsphere-resource-folder",
    "body": [
      "data \"vsphere_datacenter\" \"dc\" {}",
      "",
      "resource \"vsphere_folder\" \"folder\" {",
      "  path          = \"terraform-test-folder\"",
      "  type          = \"vm\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}"
    ]
  },
  "vsphere-resource-ha_vm_override": {
    "description": "Defines ha_vm_override",
    "prefix": "tf-vsphere-resource-ha_vm_override",
    "body": [
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_datastore\" \"datastore\" {",
      "  name          = \"datastore1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_compute_cluster\" \"cluster\" {",
      "  name          = \"cluster1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_network\" \"network\" {",
      "  name          = \"network1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_virtual_machine\" \"vm\" {",
      "  name             = \"terraform-test\"",
      "  resource_pool_id = \"${data.vsphere_compute_cluster.cluster.resource_pool_id}\"",
      "  datastore_id     = \"${data.vsphere_datastore.datastore.id}\"",
      "",
      "  num_cpus = 2",
      "  memory   = 2048",
      "  guest_id = \"other3xLinux64Guest\"",
      "",
      "  network_interface {",
      "    network_id = \"${data.vsphere_network.network.id}\"",
      "  }",
      "",
      "  disk {",
      "    label = \"disk0\"",
      "    size  = 20",
      "  }",
      "}",
      "",
      "resource \"vsphere_ha_vm_override\" \"ha_vm_override\" {",
      "  compute_cluster_id = \"${data.vsphere_compute_cluster.cluster.id}\"",
      "  virtual_machine_id = \"${vsphere_virtual_machine.vm.id}\"",
      "",
      "  ha_vm_restart_priority = \"highest\"",
      "}"
    ]
  },
  "vsphere-resource-host_port_group": {
    "description": "Defines host_port_group",
    "prefix": "tf-vsphere-resource-host_port_group",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_host\" \"esxi_host\" {",
      "  name          = \"esxi1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}",
      "",
      "resource \"vsphere_host_virtual_switch\" \"switch\" {",
      "  name           = \"vSwitchTerraformTest\"",
      "  host_system_id = \"${data.vsphere_host.esxi_host.id}\"",
      "",
      "  network_adapters = [\"vmnic0\", \"vmnic1\"]",
      "",
      "  active_nics  = [\"vmnic0\"]",
      "  standby_nics = [\"vmnic1\"]",
      "}",
      "",
      "resource \"vsphere_host_port_group\" \"pg\" {",
      "  name                = \"PGTerraformTest\"",
      "  host_system_id      = \"${data.vsphere_host.esxi_host.id}\"",
      "  virtual_switch_name = \"${vsphere_host_virtual_switch.switch.name}\"",
      "}"
    ]
  },
  "vsphere-resource-host_virtual_switch": {
    "description": "Defines host_virtual_switch",
    "prefix": "tf-vsphere-resource-host_virtual_switch",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_host\" \"host\" {",
      "  name          = \"esxi1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}",
      "",
      "resource \"vsphere_host_virtual_switch\" \"switch\" {",
      "  name           = \"vSwitchTerraformTest\"",
      "  host_system_id = \"${data.vsphere_host.host.id}\"",
      "",
      "  network_adapters = [\"vmnic0\", \"vmnic1\"]",
      "",
      "  active_nics  = [\"vmnic0\"]",
      "  standby_nics = [\"vmnic1\"]",
      "}"
    ]
  },
  "vsphere-resource-license": {
    "description": "Defines license",
    "prefix": "tf-vsphere-resource-license",
    "body": [
      "resource \"vsphere_license\" \"licenseKey\" {",
      "  license_key = \"452CQ-2EK54-K8742-00000-00000\"",
      "",
      "  labels {",
      "    VpxClientLicenseLabel = \"Hello World\"",
      "    Workflow = \"Hello World\"",
      "  }",
      "  ",
      "}"
    ]
  },
  "vsphere-resource-nas_datastore": {
    "description": "Defines nas_datastore",
    "prefix": "tf-vsphere-resource-nas_datastore",
    "body": [
      "variable \"hosts\" {",
      "  default = [",
      "    \"esxi1\",",
      "    \"esxi2\",",
      "    \"esxi3\",",
      "  ]",
      "}",
      "",
      "data \"vsphere_datacenter\" \"datacenter\" {}",
      "",
      "data \"vsphere_host\" \"esxi_hosts\" {",
      "  count         = \"${length(var.hosts)}\"",
      "  name          = \"${var.hosts[count.index]}\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}",
      "",
      "resource \"vsphere_nas_datastore\" \"datastore\" {",
      "  name            = \"terraform-test\"",
      "  host_system_ids = [\"${data.vsphere_host.esxi_hosts.*.id}\"]",
      "",
      "  type         = \"NFS\"",
      "  remote_hosts = [\"nfs\"]",
      "  remote_path  = \"/export/terraform-test\"",
      "}"
    ]
  },
  "vsphere-resource-storage_drs_vm_override": {
    "description": "Defines storage_drs_vm_override",
    "prefix": "tf-vsphere-resource-storage_drs_vm_override",
    "body": [
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_datastore_cluster\" \"datastore_cluster\" {",
      "  name          = \"datastore-cluster1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_datastore\" \"member_datastore\" {",
      "  name          = \"datastore-cluster1-member1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_resource_pool\" \"pool\" {",
      "  name          = \"cluster1/Resources\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_network\" \"network\" {",
      "  name          = \"public\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_virtual_machine\" \"vm\" {",
      "  name             = \"terraform-test\"",
      "  resource_pool_id = \"${data.vsphere_resource_pool.pool.id}\"",
      "  datastore_id     = \"${data.vsphere_datastore.member_datastore.id}\"",
      "",
      "  num_cpus = 2",
      "  memory   = 1024",
      "  guest_id = \"other3xLinux64Guest\"",
      "",
      "  network_interface {",
      "    network_id = \"${data.vsphere_network.network.id}\"",
      "  }",
      "",
      "  disk {",
      "    label = \"disk0\"",
      "    size  = 20",
      "  }",
      "}",
      "",
      "resource \"vsphere_storage_drs_vm_override\" \"drs_vm_override\" {",
      "  datastore_cluster_id = \"${data.vsphere_datastore_cluster.datastore_cluster.id}\"",
      "  virtual_machine_id   = \"${vsphere_virtual_machine.vm.id}\"",
      "  sdrs_enabled         = false",
      "}"
    ]
  },
  "vsphere-resource-tag": {
    "description": "Defines tag",
    "prefix": "tf-vsphere-resource-tag",
    "body": [
      "resource \"vsphere_tag_category\" \"category\" {",
      "  name        = \"terraform-test-category\"",
      "  cardinality = \"SINGLE\"",
      "  description = \"Managed by Terraform\"",
      "",
      "  associable_types = [",
      "    \"VirtualMachine\",",
      "    \"Datastore\",",
      "  ]",
      "}",
      "",
      "resource \"vsphere_tag\" \"tag\" {",
      "  name        = \"terraform-test-tag\"",
      "  category_id = \"${vsphere_tag_category.category.id}\"",
      "  description = \"Managed by Terraform\"",
      "}"
    ]
  },
  "vsphere-resource-tag_category": {
    "description": "Defines tag_category",
    "prefix": "tf-vsphere-resource-tag_category",
    "body": [
      "resource \"vsphere_tag_category\" \"category\" {",
      "  name        = \"terraform-test-category\"",
      "  description = \"Managed by Terraform\"",
      "  cardinality = \"SINGLE\"",
      "",
      "  associable_types = [",
      "    \"VirtualMachine\",",
      "    \"Datastore\",",
      "  ]",
      "}"
    ]
  },
  "vsphere-resource-virtual_disk": {
    "description": "Defines virtual_disk",
    "prefix": "tf-vsphere-resource-virtual_disk",
    "body": [
      "resource \"vsphere_virtual_disk\" \"myDisk\" {",
      "  size         = 2",
      "  vmdk_path    = \"myDisk.vmdk\"",
      "  datacenter   = \"Datacenter\"",
      "  datastore    = \"local\"",
      "  type         = \"thin\"",
      "}"
    ]
  },
  "vsphere-resource-virtual_machine": {
    "description": "Defines virtual_machine",
    "prefix": "tf-vsphere-resource-virtual_machine",
    "body": [
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_datastore\" \"datastore\" {",
      "  name          = \"datastore1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_compute_cluster\" \"cluster\" {",
      "  name          = \"cluster1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_network\" \"network\" {",
      "  name          = \"public\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_virtual_machine\" \"vm\" {",
      "  name             = \"terraform-test\"",
      "  resource_pool_id = \"${data.vsphere_compute_cluster.cluster.resource_pool_id}\"",
      "  datastore_id     = \"${data.vsphere_datastore.datastore.id}\"",
      "",
      "  num_cpus = 2",
      "  memory   = 1024",
      "  guest_id = \"other3xLinux64Guest\"",
      "",
      "  network_interface {",
      "    network_id = \"${data.vsphere_network.network.id}\"",
      "  }",
      "",
      "  disk {",
      "    label = \"disk0\"",
      "    size  = 20",
      "  }",
      "}"
    ]
  },
  "vsphere-resource-virtual_machine_snapshot": {
    "description": "Defines virtual_machine_snapshot",
    "prefix": "tf-vsphere-resource-virtual_machine_snapshot",
    "body": [
      "resource \"vsphere_virtual_machine_snapshot\" \"demo1\" {",
      "  virtual_machine_uuid = \"9aac5551-a351-4158-8c5c-15a71e8ec5c9\"",
      "  snapshot_name        = \"Snapshot Name\"",
      "  description          = \"This is Demo Snapshot\"",
      "  memory               = \"true\"",
      "  quiesce              = \"true\"",
      "  remove_children      = \"false\"",
      "  consolidate          = \"true\"",
      "}"
    ]
  },
  "vsphere-resource-vmfs_datastore": {
    "description": "Defines vmfs_datastore",
    "prefix": "tf-vsphere-resource-vmfs_datastore",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {}",
      "",
      "data \"vsphere_host\" \"esxi_host\" {",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}",
      "",
      "resource \"vsphere_vmfs_datastore\" \"datastore\" {",
      "  name           = \"terraform-test\"",
      "  host_system_id = \"${data.vsphere_host.esxi_host.id}\"",
      "",
      "  disks = [",
      "    \"mpx.vmhba1:C0:T1:L0\",",
      "    \"mpx.vmhba1:C0:T2:L0\",",
      "    \"mpx.vmhba1:C0:T2:L0\",",
      "  ]",
      "}"
    ]
  }
}