{
  "digitalocean-resource-domain": {
    "prefix": "tf-digitalocean-resource-domain",
    "description": "Defines domain",
    "body": [
      "# Create a new domain",
      "resource \"digitalocean_domain\" \"default\" {",
      "  name       = \"example.com\"",
      "  ip_address = \"${digitalocean_droplet.foo.ipv4_address}\"",
      "}"
    ]
  },
  "digitalocean-resource-droplet": {
    "prefix": "tf-digitalocean-resource-droplet",
    "description": "Defines droplet",
    "body": [
      "# Create a new Web Droplet in the nyc2 region",
      "resource \"digitalocean_droplet\" \"web\" {",
      "  image  = \"ubuntu-14-04-x64\"",
      "  name   = \"web-1\"",
      "  region = \"nyc2\"",
      "  size   = \"s-1vcpu-1gb\"",
      "}"
    ]
  },
  "digitalocean-resource-firewall": {
    "prefix": "tf-digitalocean-resource-firewall",
    "description": "Defines firewall",
    "body": [
      "resource \"digitalocean_droplet\" \"web\" {",
      "  name      = \"web-1\"",
      "  size      = \"s-1vcpu-1gb\"",
      "  image     = \"centos-7-x64\"",
      "  region    = \"nyc3\"",
      "}",
      "",
      "resource \"digitalocean_firewall\" \"web\" {",
      "  name = \"only-22-80-and-443\"",
      "",
      "  droplet_ids = [\"${digitalocean_droplet.web.id}\"]",
      "",
      "  inbound_rule = [",
      "    {",
      "      protocol           = \"tcp\"",
      "      port_range         = \"22\"",
      "      source_addresses   = [\"192.168.1.0/24\", \"2002:1:2::/48\"]",
      "    },",
      "    {",
      "      protocol           = \"tcp\"",
      "      port_range         = \"80\"",
      "      source_addresses   = [\"0.0.0.0/0\", \"::/0\"]",
      "    },",
      "    {",
      "      protocol           = \"tcp\"",
      "      port_range         = \"443\"",
      "      source_addresses   = [\"0.0.0.0/0\", \"::/0\"]",
      "    },",
      "  ]",
      "",
      "  outbound_rule = [",
      "    {",
      "      protocol                = \"tcp\"",
      "      port_range              = \"53\"",
      "      destination_addresses   = [\"0.0.0.0/0\", \"::/0\"]",
      "    },",
      "    {",
      "      protocol                = \"udp\"",
      "      port_range              = \"53\"",
      "      destination_addresses   = [\"0.0.0.0/0\", \"::/0\"]",
      "    },",
      "  ]",
      "}"
    ]
  },
  "digitalocean-resource-floating_ip": {
    "prefix": "tf-digitalocean-resource-floating_ip",
    "description": "Defines floating_ip",
    "body": [
      "resource \"digitalocean_droplet\" \"foobar\" {",
      "  name               = \"baz\"",
      "  size               = \"s-1vcpu-1gb\"",
      "  image              = \"centos-5-8-x32\"",
      "  region             = \"sgp1\"",
      "  ipv6               = true",
      "  private_networking = true",
      "}",
      "",
      "resource \"digitalocean_floating_ip\" \"foobar\" {",
      "  droplet_id = \"${digitalocean_droplet.foobar.id}\"",
      "  region     = \"${digitalocean_droplet.foobar.region}\"",
      "}"
    ]
  },
  "digitalocean-resource-loadbalancer": {
    "prefix": "tf-digitalocean-resource-loadbalancer",
    "description": "Defines loadbalancer",
    "body": [
      "resource \"digitalocean_droplet\" \"web\" {",
      "  name      = \"web-1\"",
      "  size      = \"s-1vcpu-1gb\"",
      "  image     = \"centos-7-x64\"",
      "  region    = \"nyc3\"",
      "}",
      "",
      "resource \"digitalocean_loadbalancer\" \"public\" {",
      "  name = \"loadbalancer-1\"",
      "  region = \"nyc3\"",
      "",
      "  forwarding_rule {",
      "    entry_port = 80",
      "    entry_protocol = \"http\"",
      "",
      "    target_port = 80",
      "    target_protocol = \"http\"",
      "  }",
      "",
      "  healthcheck {",
      "    port = 22",
      "    protocol = \"tcp\"",
      "  }",
      "",
      "  droplet_ids = [\"${digitalocean_droplet.web.id}\"]",
      "}"
    ]
  },
  "digitalocean-resource-record": {
    "prefix": "tf-digitalocean-resource-record",
    "description": "Defines record",
    "body": [
      "# Create a new domain",
      "resource \"digitalocean_domain\" \"default\" {",
      "  name       = \"www.example.com\"",
      "  ip_address = \"${digitalocean_droplet.foo.ipv4_address}\"",
      "}",
      "",
      "# Add a record to the domain",
      "resource \"digitalocean_record\" \"foobar\" {",
      "  domain = \"${digitalocean_domain.default.name}\"",
      "  type   = \"A\"",
      "  name   = \"foobar\"",
      "  value  = \"192.168.0.11\"",
      "}"
    ]
  },
  "digitalocean-resource-ssh_key": {
    "prefix": "tf-digitalocean-resource-ssh_key",
    "description": "Defines ssh_key",
    "body": [
      "# Create a new SSH key",
      "resource \"digitalocean_ssh_key\" \"default\" {",
      "  name       = \"Terraform Example\"",
      "  public_key = \"${file(\"/Users/terraform/.ssh/id_rsa.pub\")}\"",
      "}"
    ]
  },
  "digitalocean-resource-tag": {
    "prefix": "tf-digitalocean-resource-tag",
    "description": "Defines tag",
    "body": [
      "# Create a new tag",
      "resource \"digitalocean_tag\" \"foobar\" {",
      "  name = \"foobar\"",
      "}",
      "",
      "# Create a new droplet in nyc3 with the foobar tag",
      "resource \"digitalocean_droplet\" \"web\" {",
      "  image  = \"ubuntu-16-04-x64\"",
      "  name   = \"web-1\"",
      "  region = \"nyc3\"",
      "  size   = \"s-1vcpu-1gb\"",
      "  tags   = [\"${digitalocean_tag.foobar.id}\"]",
      "}"
    ]
  },
  "digitalocean-resource-volume": {
    "prefix": "tf-digitalocean-resource-volume",
    "description": "Defines volume",
    "body": [
      "resource \"digitalocean_volume\" \"foobar\" {",
      "  region      = \"nyc1\"",
      "  name        = \"baz\"",
      "  size        = 100",
      "  description = \"an example volume\"",
      "}",
      "",
      "resource \"digitalocean_droplet\" \"foobar\" {",
      "  name       = \"baz\"",
      "  size       = \"s-1vcpu-1gb\"",
      "  image      = \"coreos-stable\"",
      "  region     = \"nyc1\"",
      "  volume_ids = [\"${digitalocean_volume.foobar.id}\"]",
      "}"
    ]
  },
  "digitalocean-resource-certificate": {
    "prefix": "tf-digitalocean-resource-certificate",
    "description": "Defines certificate",
    "body": [
      "# Create a new TLS certificate",
      "resource \"digitalocean_certificate\" \"cert\" {",
      "  name              = \"Terraform Example\"",
      "  private_key       = \"${file(\"/Users/terraform/certs/privkey.pem\")}\"",
      "  leaf_certificate  = \"${file(\"/Users/terraform/certs/cert.pem\")}\"",
      "  certificate_chain = \"${file(\"/Users/terraform/certs/fullchain.pem\")}\"",
      "}",
      "",
      "# Create a new Load Balancer with TLS termination",
      "resource \"digitalocean_loadbalancer\" \"public\" {",
      "  name        = \"secure-loadbalancer-1\"",
      "  region      = \"nyc3\"",
      "  droplet_tag = \"backend\"",
      "",
      "  forwarding_rule {",
      "    entry_port      = 443",
      "    entry_protocol  = \"https\"",
      "",
      "    target_port     = 80",
      "    target_protocol = \"http\"",
      "",
      "    certificate_id  = \"${digitalocean_certificate.cert.id}\"",
      "  }",
      "}"
    ]
  },
  "template-data-cloudinit_config": {
    "prefix": "tf-template-data-cloudinit_config",
    "description": "Defines cloudinit_config",
    "body": [
      "# Render a part using a `template_file`",
      "data \"template_file\" \"script\" {",
      "  template = \"${file(\"${path.module}/init.tpl\")}\"",
      "",
      "  vars {",
      "    consul_address = \"${aws_instance.consul.private_ip}\"",
      "  }",
      "}",
      "",
      "# Render a multi-part cloudinit config making use of the part",
      "# above, and other source files",
      "data \"template_cloudinit_config\" \"config\" {",
      "  gzip          = true",
      "  base64_encode = true",
      "",
      "  # Setup hello world script to be called by the cloud-config",
      "  part {",
      "    filename     = \"init.cfg\"",
      "    content_type = \"text/cloud-config\"",
      "    content      = \"${data.template_file.script.rendered}\"",
      "  }",
      "",
      "  part {",
      "    content_type = \"text/x-shellscript\"",
      "    content      = \"baz\"",
      "  }",
      "",
      "  part {",
      "    content_type = \"text/x-shellscript\"",
      "    content      = \"ffbaz\"",
      "  }",
      "}",
      "",
      "# Start an AWS instance with the cloudinit config as user data",
      "resource \"aws_instance\" \"web\" {",
      "  ami           = \"ami-d05e75b8\"",
      "  instance_type = \"t2.micro\"",
      "  user_data     = \"${data.template_cloudinit_config.config.rendered}\"",
      "}"
    ]
  },
  "consul-data-key_prefix": {
    "prefix": "tf-consul-data-key_prefix",
    "description": "Defines key_prefix",
    "body": [
      "data \"consul_key_prefix\" \"app\" {",
      "  datacenter = \"nyc1\"",
      "  token      = \"abcd\"",
      "",
      "  # Prefix to add to prepend to all of the subkey names below.",
      "  path_prefix = \"myapp/config/\"",
      "",
      "  # Read the ami subkey",
      "  subkey {",
      "    name    = \"ami\"",
      "    path    = \"app/launch_ami\"",
      "    default = \"ami-1234\"",
      "  }",
      "}",
      "",
      "# Start our instance with the dynamic ami value",
      "resource \"aws_instance\" \"app\" {",
      "  ami = \"${data.consul_key_prefix.app.var.ami}\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "consul-data-keys": {
    "prefix": "tf-consul-data-keys",
    "description": "Defines keys",
    "body": [
      "data \"consul_keys\" \"app\" {",
      "  datacenter = \"nyc1\"",
      "  token      = \"abcd\"",
      "",
      "  # Read the launch AMI from Consul",
      "  key {",
      "    name    = \"ami\"",
      "    path    = \"service/app/launch_ami\"",
      "    default = \"ami-1234\"",
      "  }",
      "}",
      "",
      "# Start our instance with the dynamic ami value",
      "resource \"aws_instance\" \"app\" {",
      "  ami = \"${data.consul_keys.app.var.ami}\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "consul-data-nodes": {
    "prefix": "tf-consul-data-nodes",
    "description": "Defines nodes",
    "body": [
      "data \"consul_catalog_nodes\" \"read-dc1-nodes\" {",
      "  query_options {",
      "    # Optional parameter: implicitly uses the current datacenter of the agent  ",
      "    datacenter = \"dc1\"",
      "  }",
      "}",
      "",
      "# Set the description to a whitespace delimited list of the node names",
      "resource \"example_resource\" \"app\" {",
      "  description = \"${join(\" \", formatlist(\"%s\", data.consul_catalog_nodes.node_names))}\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "consul-data-service": {
    "prefix": "tf-consul-data-service",
    "description": "Defines service",
    "body": [
      "data \"consul_catalog_service\" \"read-consul-dc1\" {",
      "  query_options {",
      "    # Optional parameter: implicitly uses the current datacenter of the agent  ",
      "    datacenter = \"dc1\"",
      "  }",
      "",
      "  name = \"consul\"",
      "}",
      "",
      "# Set the description to a whitespace delimited list of the node names",
      "resource \"example_resource\" \"app\" {",
      "  description = \"${join(\" \", data.consul_catalog_service.nodes)}\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "consul-data-services": {
    "prefix": "tf-consul-data-services",
    "description": "Defines services",
    "body": [
      "data \"consul_catalog_services\" \"read-dc1\" {",
      "  query_options {",
      "    # Optional parameter: implicitly uses the current datacenter of the agent  ",
      "    datacenter = \"dc1\"",
      "  }",
      "}",
      "",
      "# Set the description to a whitespace delimited list of the services",
      "resource \"example_resource\" \"app\" {",
      "  description = \"${join(\" \", data.consul_catalog_services.names)}\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "consul-resource-agent_service": {
    "prefix": "tf-consul-resource-agent_service",
    "description": "Defines agent_service",
    "body": [
      "resource \"consul_agent_service\" \"app\" {",
      "  address = \"www.google.com\"",
      "  name    = \"google\"",
      "  port    = 80",
      "  tags    = [\"tag0\", \"tag1\"]",
      "}"
    ]
  },
  "consul-resource-catalog_entry": {
    "prefix": "tf-consul-resource-catalog_entry",
    "description": "Defines catalog_entry",
    "body": [
      "resource \"consul_catalog_entry\" \"app\" {",
      "  address = \"192.168.10.10\"",
      "  node    = \"foobar\"",
      "",
      "  service = {",
      "    address = \"127.0.0.1\"",
      "    id      = \"redis1\"",
      "    name    = \"redis\"",
      "    port    = 8000",
      "    tags    = [\"master\", \"v1\"]",
      "  }",
      "}"
    ]
  },
  "consul-resource-key_prefix": {
    "prefix": "tf-consul-resource-key_prefix",
    "description": "Defines key_prefix",
    "body": [
      "resource \"consul_key_prefix\" \"myapp_config\" {",
      "  datacenter = \"nyc1\"",
      "  token      = \"abcd\"",
      "",
      "  # Prefix to add to prepend to all of the subkey names below.",
      "  path_prefix = \"myapp/config/\"",
      "",
      "  subkeys = {",
      "    \"elb_cname\"         = \"${aws_elb.app.dns_name}\"",
      "    \"s3_bucket_name\"    = \"${aws_s3_bucket.app.bucket}\"",
      "    \"database/hostname\" = \"${aws_db_instance.app.address}\"",
      "    \"database/port\"     = \"${aws_db_instance.app.port}\"",
      "    \"database/username\" = \"${aws_db_instance.app.username}\"",
      "    \"database/password\" = \"${aws_db_instance.app.password}\"",
      "    \"database/name\"     = \"${aws_db_instance.app.name}\"",
      "  }",
      "}"
    ]
  },
  "consul-resource-keys": {
    "prefix": "tf-consul-resource-keys",
    "description": "Defines keys",
    "body": [
      "resource \"consul_keys\" \"app\" {",
      "  datacenter = \"nyc1\"",
      "  token      = \"abcd\"",
      "",
      "  # Set the CNAME of our load balancer as a key",
      "  key {",
      "    path  = \"service/app/elb_address\"",
      "    value = \"${aws_elb.app.dns_name}\"",
      "  }",
      "}"
    ]
  },
  "consul-resource-node": {
    "prefix": "tf-consul-resource-node",
    "description": "Defines node",
    "body": [
      "resource \"consul_node\" \"foobar\" {",
      "  address = \"192.168.10.10\"",
      "  name    = \"foobar\"",
      "}"
    ]
  },
  "consul-resource-prepared_query": {
    "prefix": "tf-consul-resource-prepared_query",
    "description": "Defines prepared_query",
    "body": [
      "# Creates a prepared query myquery.query.consul that finds the nearest",
      "# healthy myapp.service.consul instance that has the active tag and not",
      "# the standby tag.",
      "resource \"consul_prepared_query\" \"myapp-query\" {",
      "  name         = \"myquery\"",
      "  datacenter   = \"us-central1\"",
      "  token        = \"abcd\"",
      "  stored_token = \"wxyz\"",
      "  only_passing = true",
      "  near         = \"_agent\"",
      "",
      "  service = \"myapp\"",
      "  tags    = [\"active\", \"!standby\"]",
      "",
      "  failover {",
      "    nearest_n   = 3",
      "    datacenters = [\"us-west1\", \"us-east-2\", \"asia-east1\"]",
      "  }",
      "",
      "  dns {",
      "    ttl = \"30s\"",
      "  }",
      "}",
      "",
      "# Creates a Prepared Query Template that matches *-near-self.query.consul",
      "# and finds the nearest service that matches the glob character (e.g.",
      "# foo-near-self.query.consul will find the nearest healthy foo.service.consul).",
      "resource \"consul_prepared_query\" \"service-near-self\" {",
      "  datacenter   = \"nyc1\"",
      "  token        = \"abcd\"",
      "  stored_token = \"wxyz\"",
      "  name         = \"\"",
      "  only_passing = true",
      "  near         = \"_agent\"",
      "",
      "  template {",
      "    type   = \"name_prefix_match\"",
      "    regexp = \"^(.*)-near-self$\"",
      "  }",
      "",
      "  service = \"$${match(1)}\"",
      "",
      "  failover {",
      "    nearest_n   = 3",
      "    datacenters = [\"dc2\", \"dc3\", \"dc4\"]",
      "  }",
      "",
      "  dns {",
      "    ttl = \"5m\"",
      "  }",
      "}"
    ]
  },
  "consul-resource-service": {
    "prefix": "tf-consul-resource-service",
    "description": "Defines service",
    "body": [
      "resource \"consul_service\" \"google\" {",
      "  address = \"www.google.com\"",
      "  name    = \"google\"",
      "  port    = 80",
      "  tags    = [\"tag0\", \"tag1\"]",
      "}"
    ]
  },
  "consul-data-agent_self": {
    "prefix": "tf-consul-data-agent_self",
    "description": "Defines agent_self",
    "body": [
      "data \"consul_agent_self\" \"read-dc1-agent\" {",
      "  query_options {",
      "    # Optional parameter: implicitly uses the current datacenter of the agent",
      "    datacenter = \"dc1\"",
      "  }",
      "}",
      "",
      "# Set the description to a whitespace delimited list of the services",
      "resource \"example_resource\" \"app\" {",
      "  description = \"Consul datacenter ${data.consul_agent_self.read-dc1-agent.datacenter}\"",
      "",
      "  # ...",
      "}"
    ]
  },
  "vsphere-data-datacenter": {
    "prefix": "tf-vsphere-data-datacenter",
    "description": "Defines datacenter",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}"
    ]
  },
  "vsphere-data-datastore": {
    "prefix": "tf-vsphere-data-datastore",
    "description": "Defines datastore",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_datastore\" \"datastore\" {",
      "  name          = \"datastore1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}"
    ]
  },
  "vsphere-data-datastore_cluster": {
    "prefix": "tf-vsphere-data-datastore_cluster",
    "description": "Defines datastore_cluster",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_datastore_cluster\" \"datastore_cluster\" {",
      "  name          = \"datastore-cluster1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}"
    ]
  },
  "vsphere-data-distributed_virtual_switch": {
    "prefix": "tf-vsphere-data-distributed_virtual_switch",
    "description": "Defines distributed_virtual_switch",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_distributed_virtual_switch\" \"dvs\" {",
      "  name          = \"terraform-test-dvs\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}",
      "",
      "resource \"vsphere_distributed_port_group\" \"pg\" {",
      "  name                            = \"terraform-test-pg\"",
      "  distributed_virtual_switch_uuid = \"${data.vsphere_distributed_virtual_switch.dvs.id}\"",
      "",
      "  active_uplinks  = [\"${data.vsphere_distributed_virtual_switch.dvs.uplinks[0]}\"]",
      "  standby_uplinks = [\"${data.vsphere_distributed_virtual_switch.dvs.uplinks[1]}\"]",
      "}"
    ]
  },
  "vsphere-data-host": {
    "prefix": "tf-vsphere-data-host",
    "description": "Defines host",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_host\" \"host\" {",
      "  name          = \"esxi1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}"
    ]
  },
  "vsphere-data-network": {
    "prefix": "tf-vsphere-data-network",
    "description": "Defines network",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_network\" \"net\" {",
      "  name          = \"terraform-test-net\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}"
    ]
  },
  "vsphere-data-resource_pool": {
    "prefix": "tf-vsphere-data-resource_pool",
    "description": "Defines resource_pool",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_resource_pool\" \"pool\" {",
      "  name          = \"resource-pool-1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}"
    ]
  },
  "vsphere-data-tag": {
    "prefix": "tf-vsphere-data-tag",
    "description": "Defines tag",
    "body": [
      "data \"vsphere_tag_category\" \"category\" {",
      "  name = \"terraform-test-category\"",
      "}",
      "",
      "data \"vsphere_tag\" \"tag\" {",
      "  name        = \"terraform-test-tag\"",
      "  category_id = \"${data.vsphere_tag_category.category.id}\"",
      "}"
    ]
  },
  "vsphere-data-tag_category": {
    "prefix": "tf-vsphere-data-tag_category",
    "description": "Defines tag_category",
    "body": [
      "data \"vsphere_tag_category\" \"category\" {",
      "  name = \"terraform-test-category\"",
      "}"
    ]
  },
  "vsphere-data-virtual_machine": {
    "prefix": "tf-vsphere-data-virtual_machine",
    "description": "Defines virtual_machine",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_virtual_machine\" \"template\" {",
      "  name          = \"test-vm-template\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}"
    ]
  },
  "vsphere-data-vmfs_disks": {
    "prefix": "tf-vsphere-data-vmfs_disks",
    "description": "Defines vmfs_disks",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_host\" \"host\" {",
      "  name          = \"esxi1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}",
      "",
      "data \"vsphere_vmfs_disks\" \"available\" {",
      "  host_system_id = \"${data.vsphere_host.host.id}\"",
      "  rescan         = true",
      "  filter         = \"mpx.vmhba1:C0:T[12]:L0\"",
      "}"
    ]
  },
  "vsphere-resource-custom_attribute": {
    "prefix": "tf-vsphere-resource-custom_attribute",
    "description": "Defines custom_attribute",
    "body": [
      "resource \"vsphere_custom_attribute\" \"attribute\" {",
      "  name                = \"terraform-test-attribute\"",
      "  managed_object_type = \"VirtualMachine\"",
      "}"
    ]
  },
  "vsphere-resource-datacenter": {
    "prefix": "tf-vsphere-resource-datacenter",
    "description": "Defines datacenter",
    "body": [
      "resource \"vsphere_datacenter\" \"prod_datacenter\" {",
      "  name       = \"my_prod_datacenter\"",
      "}"
    ]
  },
  "vsphere-resource-datastore_cluster": {
    "prefix": "tf-vsphere-resource-datastore_cluster",
    "description": "Defines datastore_cluster",
    "body": [
      "variable \"hosts\" {",
      "  default = [",
      "    \"esxi1\",",
      "    \"esxi2\",",
      "    \"esxi3\",",
      "  ]",
      "}",
      "",
      "data \"vsphere_datacenter\" \"datacenter\" {}",
      "",
      "data \"vsphere_host\" \"esxi_hosts\" {",
      "  count         = \"${length(var.hosts)}\"",
      "  name          = \"${var.hosts[count.index]}\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}",
      "",
      "resource \"vsphere_datastore_cluster\" \"datastore_cluster\" {",
      "  name          = \"terraform-datastore-cluster-test\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "  sdrs_enabled  = true",
      "}",
      "",
      "resource \"vsphere_nas_datastore\" \"datastore1\" {",
      "  name                 = \"terraform-datastore-test1\"",
      "  host_system_ids      = [\"${data.vsphere_host.esxi_hosts.*.id}\"]",
      "  datastore_cluster_id = \"${vsphere_datastore_cluster.datastore_cluster.id}\"",
      "",
      "  type         = \"NFS\"",
      "  remote_hosts = [\"nfs\"]",
      "  remote_path  = \"/export/terraform-test1\"",
      "}",
      "",
      "resource \"vsphere_nas_datastore\" \"datastore2\" {",
      "  name                 = \"terraform-datastore-test2\"",
      "  host_system_ids      = [\"${data.vsphere_host.esxi_hosts.*.id}\"]",
      "  datastore_cluster_id = \"${vsphere_datastore_cluster.datastore_cluster.id}\"",
      "",
      "  type         = \"NFS\"",
      "  remote_hosts = [\"nfs\"]",
      "  remote_path  = \"/export/terraform-test2\"",
      "}"
    ]
  },
  "vsphere-resource-distributed_port_group": {
    "prefix": "tf-vsphere-resource-distributed_port_group",
    "description": "Defines distributed_port_group",
    "body": [
      "variable \"esxi_hosts\" {",
      "  default = [",
      "    \"esxi1\",",
      "    \"esxi2\",",
      "    \"esxi3\",",
      "  ]",
      "}",
      "",
      "variable \"network_interfaces\" {",
      "  default = [",
      "    \"vmnic0\",",
      "    \"vmnic1\",",
      "    \"vmnic2\",",
      "    \"vmnic3\",",
      "  ]",
      "}",
      "",
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_host\" \"host\" {",
      "  count         = \"${length(var.esxi_hosts)}\"",
      "  name          = \"${var.esxi_hosts[count.index]}\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_distributed_virtual_switch\" \"dvs\" {",
      "  name          = \"terraform-test-dvs\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "",
      "  uplinks         = [\"uplink1\", \"uplink2\", \"uplink3\", \"uplink4\"]",
      "  active_uplinks  = [\"uplink1\", \"uplink2\"]",
      "  standby_uplinks = [\"uplink3\", \"uplink4\"]",
      "",
      "  host {",
      "    host_system_id = \"${data.vsphere_host.host.0.id}\"",
      "    devices        = [\"${var.network_interfaces}\"]",
      "  }",
      "",
      "  host {",
      "    host_system_id = \"${data.vsphere_host.host.1.id}\"",
      "    devices        = [\"${var.network_interfaces}\"]",
      "  }",
      "",
      "  host {",
      "    host_system_id = \"${data.vsphere_host.host.2.id}\"",
      "    devices        = [\"${var.network_interfaces}\"]",
      "  }",
      "}",
      "",
      "resource \"vsphere_distributed_port_group\" \"pg\" {",
      "  name                            = \"terraform-test-pg\"",
      "  distributed_virtual_switch_uuid = \"${vsphere_distributed_virtual_switch.dvs.id}\"",
      "",
      "  vlan_id = 1000",
      "}"
    ]
  },
  "vsphere-resource-distributed_virtual_switch": {
    "prefix": "tf-vsphere-resource-distributed_virtual_switch",
    "description": "Defines distributed_virtual_switch",
    "body": [
      "variable \"esxi_hosts\" {",
      "  default = [",
      "    \"esxi1\",",
      "    \"esxi2\",",
      "    \"esxi3\",",
      "  ]",
      "}",
      "",
      "variable \"network_interfaces\" {",
      "  default = [",
      "    \"vmnic0\",",
      "    \"vmnic1\",",
      "    \"vmnic2\",",
      "    \"vmnic3\",",
      "  ]",
      "}",
      "",
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_host\" \"host\" {",
      "  count         = \"${length(var.esxi_hosts)}\"",
      "  name          = \"${var.esxi_hosts[count.index]}\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_distributed_virtual_switch\" \"dvs\" {",
      "  name          = \"terraform-test-dvs\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "",
      "  uplinks         = [\"uplink1\", \"uplink2\", \"uplink3\", \"uplink4\"]",
      "  active_uplinks  = [\"uplink1\", \"uplink2\"]",
      "  standby_uplinks = [\"uplink3\", \"uplink4\"]",
      "",
      "  host {",
      "    host_system_id = \"${data.vsphere_host.host.0.id}\"",
      "    devices        = [\"${var.network_interfaces}\"]",
      "  }",
      "",
      "  host {",
      "    host_system_id = \"${data.vsphere_host.host.1.id}\"",
      "    devices        = [\"${var.network_interfaces}\"]",
      "  }",
      "",
      "  host {",
      "    host_system_id = \"${data.vsphere_host.host.2.id}\"",
      "    devices        = [\"${var.network_interfaces}\"]",
      "  }",
      "}"
    ]
  },
  "vsphere-resource-file": {
    "prefix": "tf-vsphere-resource-file",
    "description": "Defines file",
    "body": [
      "resource \"vsphere_file\" \"ubuntu_disk_upload\" {",
      "  datacenter       = \"my_datacenter\"",
      "  datastore        = \"local\"",
      "  source_file      = \"/home/ubuntu/my_disks/custom_ubuntu.vmdk\"",
      "  destination_file = \"/my_path/disks/custom_ubuntu.vmdk\"",
      "}"
    ]
  },
  "vsphere-resource-folder": {
    "prefix": "tf-vsphere-resource-folder",
    "description": "Defines folder",
    "body": [
      "data \"vsphere_datacenter\" \"dc\" {}",
      "",
      "resource \"vsphere_folder\" \"folder\" {",
      "  path          = \"terraform-test-folder\"",
      "  type          = \"vm\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}"
    ]
  },
  "vsphere-resource-host_port_group": {
    "prefix": "tf-vsphere-resource-host_port_group",
    "description": "Defines host_port_group",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_host\" \"esxi_host\" {",
      "  name          = \"esxi1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}",
      "",
      "resource \"vsphere_host_virtual_switch\" \"switch\" {",
      "  name           = \"vSwitchTerraformTest\"",
      "  host_system_id = \"${data.vsphere_host.esxi_host.id}\"",
      "",
      "  network_adapters = [\"vmnic0\", \"vmnic1\"]",
      "",
      "  active_nics  = [\"vmnic0\"]",
      "  standby_nics = [\"vmnic1\"]",
      "}",
      "",
      "resource \"vsphere_host_port_group\" \"pg\" {",
      "  name                = \"PGTerraformTest\"",
      "  host_system_id      = \"${data.vsphere_host.esxi_host.id}\"",
      "  virtual_switch_name = \"${vsphere_host_virtual_switch.switch.name}\"",
      "}"
    ]
  },
  "vsphere-resource-host_virtual_switch": {
    "prefix": "tf-vsphere-resource-host_virtual_switch",
    "description": "Defines host_virtual_switch",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_host\" \"host\" {",
      "  name          = \"esxi1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}",
      "",
      "resource \"vsphere_host_virtual_switch\" \"switch\" {",
      "  name           = \"vSwitchTerraformTest\"",
      "  host_system_id = \"${data.vsphere_host.host.id}\"",
      "",
      "  network_adapters = [\"vmnic0\", \"vmnic1\"]",
      "",
      "  active_nics  = [\"vmnic0\"]",
      "  standby_nics = [\"vmnic1\"]",
      "}"
    ]
  },
  "vsphere-resource-license": {
    "prefix": "tf-vsphere-resource-license",
    "description": "Defines license",
    "body": [
      "resource \"vsphere_license\" \"licenseKey\" {",
      "  license_key = \"452CQ-2EK54-K8742-00000-00000\"",
      "",
      "  labels {",
      "    VpxClientLicenseLabel = \"Hello World\"",
      "    Workflow = \"Hello World\"",
      "  }",
      "  ",
      "}"
    ]
  },
  "vsphere-resource-nas_datastore": {
    "prefix": "tf-vsphere-resource-nas_datastore",
    "description": "Defines nas_datastore",
    "body": [
      "variable \"hosts\" {",
      "  default = [",
      "    \"esxi1\",",
      "    \"esxi2\",",
      "    \"esxi3\",",
      "  ]",
      "}",
      "",
      "data \"vsphere_datacenter\" \"datacenter\" {}",
      "",
      "data \"vsphere_host\" \"esxi_hosts\" {",
      "  count         = \"${length(var.hosts)}\"",
      "  name          = \"${var.hosts[count.index]}\"",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}",
      "",
      "resource \"vsphere_nas_datastore\" \"datastore\" {",
      "  name            = \"terraform-test\"",
      "  host_system_ids = [\"${data.vsphere_host.esxi_hosts.*.id}\"]",
      "",
      "  type         = \"NFS\"",
      "  remote_hosts = [\"nfs\"]",
      "  remote_path  = \"/export/terraform-test\"",
      "}"
    ]
  },
  "vsphere-resource-storage_drs_vm_override": {
    "prefix": "tf-vsphere-resource-storage_drs_vm_override",
    "description": "Defines storage_drs_vm_override",
    "body": [
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_datastore_cluster\" \"datastore_cluster\" {",
      "  name          = \"datastore-cluster1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_datastore\" \"member_datastore\" {",
      "  name          = \"datastore-cluster1-member1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_resource_pool\" \"pool\" {",
      "  name          = \"cluster1/Resources\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_network\" \"network\" {",
      "  name          = \"public\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_virtual_machine\" \"vm\" {",
      "  name             = \"terraform-test\"",
      "  resource_pool_id = \"${data.vsphere_resource_pool.pool.id}\"",
      "  datastore_id     = \"${data.vsphere_datastore.member_datastore.id}\"",
      "",
      "  num_cpus = 2",
      "  memory   = 1024",
      "  guest_id = \"other3xLinux64Guest\"",
      "",
      "  network_interface {",
      "    network_id = \"${data.vsphere_network.network.id}\"",
      "  }",
      "",
      "  disk {",
      "    label = \"disk0\"",
      "    size  = 20",
      "  }",
      "}",
      "",
      "resource \"vsphere_storage_drs_vm_override\" \"drs_vm_override\" {",
      "  datastore_cluster_id = \"${data.vsphere_datastore_cluster.datastore_cluster.id}\"",
      "  virtual_machine_id   = \"${vsphere_virtual_machine.vm.id}\"",
      "  sdrs_enabled         = false",
      "}"
    ]
  },
  "vsphere-resource-tag": {
    "prefix": "tf-vsphere-resource-tag",
    "description": "Defines tag",
    "body": [
      "resource \"vsphere_tag_category\" \"category\" {",
      "  name        = \"terraform-test-category\"",
      "  cardinality = \"SINGLE\"",
      "  description = \"Managed by Terraform\"",
      "",
      "  associable_types = [",
      "    \"VirtualMachine\",",
      "    \"Datastore\",",
      "  ]",
      "}",
      "",
      "resource \"vsphere_tag\" \"tag\" {",
      "  name        = \"terraform-test-tag\"",
      "  category_id = \"${vsphere_tag_category.category.id}\"",
      "  description = \"Managed by Terraform\"",
      "}"
    ]
  },
  "vsphere-resource-tag_category": {
    "prefix": "tf-vsphere-resource-tag_category",
    "description": "Defines tag_category",
    "body": [
      "resource \"vsphere_tag_category\" \"category\" {",
      "  name        = \"terraform-test-category\"",
      "  description = \"Managed by Terraform\"",
      "  cardinality = \"SINGLE\"",
      "",
      "  associable_types = [",
      "    \"VirtualMachine\",",
      "    \"Datastore\",",
      "  ]",
      "}"
    ]
  },
  "vsphere-resource-virtual_disk": {
    "prefix": "tf-vsphere-resource-virtual_disk",
    "description": "Defines virtual_disk",
    "body": [
      "resource \"vsphere_virtual_disk\" \"myDisk\" {",
      "  size         = 2",
      "  vmdk_path    = \"myDisk.vmdk\"",
      "  datacenter   = \"Datacenter\"",
      "  datastore    = \"local\"",
      "  type         = \"thin\"",
      "}"
    ]
  },
  "vsphere-resource-virtual_machine": {
    "prefix": "tf-vsphere-resource-virtual_machine",
    "description": "Defines virtual_machine",
    "body": [
      "data \"vsphere_datacenter\" \"dc\" {",
      "  name = \"dc1\"",
      "}",
      "",
      "data \"vsphere_datastore\" \"datastore\" {",
      "  name          = \"datastore1\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_resource_pool\" \"pool\" {",
      "  name          = \"cluster1/Resources\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "data \"vsphere_network\" \"network\" {",
      "  name          = \"public\"",
      "  datacenter_id = \"${data.vsphere_datacenter.dc.id}\"",
      "}",
      "",
      "resource \"vsphere_virtual_machine\" \"vm\" {",
      "  name             = \"terraform-test\"",
      "  resource_pool_id = \"${data.vsphere_resource_pool.pool.id}\"",
      "  datastore_id     = \"${data.vsphere_datastore.datastore.id}\"",
      "",
      "  num_cpus = 2",
      "  memory   = 1024",
      "  guest_id = \"other3xLinux64Guest\"",
      "",
      "  network_interface {",
      "    network_id = \"${data.vsphere_network.network.id}\"",
      "  }",
      "",
      "  disk {",
      "    label = \"disk0\"",
      "    size  = 20",
      "  }",
      "}"
    ]
  },
  "vsphere-resource-virtual_machine_snapshot": {
    "prefix": "tf-vsphere-resource-virtual_machine_snapshot",
    "description": "Defines virtual_machine_snapshot",
    "body": [
      "resource \"vsphere_virtual_machine_snapshot\" \"demo1\" {",
      "  virtual_machine_uuid = \"9aac5551-a351-4158-8c5c-15a71e8ec5c9\"",
      "  snapshot_name        = \"Snapshot Name\"",
      "  description          = \"This is Demo Snapshot\"",
      "  memory               = \"true\"",
      "  quiesce              = \"true\"",
      "  remove_children      = \"false\"",
      "  consolidate          = \"true\"",
      "}"
    ]
  },
  "vsphere-resource-vmfs_datastore": {
    "prefix": "tf-vsphere-resource-vmfs_datastore",
    "description": "Defines vmfs_datastore",
    "body": [
      "data \"vsphere_datacenter\" \"datacenter\" {}",
      "",
      "data \"vsphere_host\" \"esxi_host\" {",
      "  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"",
      "}",
      "",
      "resource \"vsphere_vmfs_datastore\" \"datastore\" {",
      "  name           = \"terraform-test\"",
      "  host_system_id = \"${data.vsphere_host.esxi_host.id}\"",
      "",
      "  disks = [",
      "    \"mpx.vmhba1:C0:T1:L0\",",
      "    \"mpx.vmhba1:C0:T2:L0\",",
      "    \"mpx.vmhba1:C0:T2:L0\",",
      "  ]",
      "}"
    ]
  },
  "vsphere-data-custom_attribute": {
    "prefix": "tf-vsphere-data-custom_attribute",
    "description": "Defines custom_attribute",
    "body": [
      "data \"vsphere_custom_attribute\" \"attribute\" {",
      "  name = \"terraform-test-attribute\"",
      "}"
    ]
  }
}